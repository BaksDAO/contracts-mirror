/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type DataStruct = {
  isActive: boolean;
  createdAt: BigNumberish;
  addr: string;
  totalIncome: BigNumberish;
  depositIds: BigNumberish[];
};

export type DataStructOutput = [
  boolean,
  BigNumber,
  string,
  BigNumber,
  BigNumber[]
] & {
  isActive: boolean;
  createdAt: BigNumber;
  addr: string;
  totalIncome: BigNumber;
  depositIds: BigNumber[];
};

export interface DepositaryInterface extends utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "addPool(address,bool,uint256,uint256,uint256,uint256)": FunctionFragment;
    "blacklistMagister(address)": FunctionFragment;
    "core()": FunctionFragment;
    "currentDepositIds(uint256,address)": FunctionFragment;
    "deposit(uint256,uint256,address)": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "getActiveMagisterAddresses()": FunctionFragment;
    "getActiveMagisters()": FunctionFragment;
    "getMagisterDepositIds(address)": FunctionFragment;
    "getPools()": FunctionFragment;
    "getPoolsCount()": FunctionFragment;
    "getRewards(uint256)": FunctionFragment;
    "getTotalValueLocked()": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "magisters(address)": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "transitGovernance(address,bool)": FunctionFragment;
    "updatePool(uint256,bool,uint256,uint256,uint256,uint256)": FunctionFragment;
    "whitelistMagister(address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistMagister",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentDepositIds",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveMagisterAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveMagisters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMagisterDepositIds",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "magisters", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transitGovernance",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMagister",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistMagister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentDepositIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveMagisterAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveMagisters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMagisterDepositIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "magisters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transitGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMagister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "GovernanceTransited(address,address)": EventFragment;
    "MagisterBlacklisted(address)": EventFragment;
    "MagisterWhitelisted(address)": EventFragment;
    "PendingGovernanceTransition(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernanceTransited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MagisterBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MagisterWhitelisted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingGovernanceTransition"
  ): EventFragment;
}

export type GovernanceTransitedEvent = TypedEvent<
  [string, string],
  { governor: string; newGovernor: string }
>;

export type GovernanceTransitedEventFilter =
  TypedEventFilter<GovernanceTransitedEvent>;

export type MagisterBlacklistedEvent = TypedEvent<
  [string],
  { magister: string }
>;

export type MagisterBlacklistedEventFilter =
  TypedEventFilter<MagisterBlacklistedEvent>;

export type MagisterWhitelistedEvent = TypedEvent<
  [string],
  { magister: string }
>;

export type MagisterWhitelistedEventFilter =
  TypedEventFilter<MagisterWhitelistedEvent>;

export type PendingGovernanceTransitionEvent = TypedEvent<
  [string, string],
  { governor: string; newGovernor: string }
>;

export type PendingGovernanceTransitionEventFilter =
  TypedEventFilter<PendingGovernanceTransitionEvent>;

export interface Depositary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DepositaryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPool(
      depositToken: string,
      isCompounding: boolean,
      depositorApr: BigNumberish,
      magisterApr: BigNumberish,
      depositorBonusApr: BigNumberish,
      magisterBonusApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blacklistMagister(
      magister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    core(overrides?: CallOverrides): Promise<[string]>;

    currentDepositIds(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "deposit(uint256,uint256,address)"(
      poolId: BigNumberish,
      amount: BigNumberish,
      magister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        isActive: boolean;
        depositor: string;
        magister: string;
        poolId: BigNumber;
        principal: BigNumber;
        depositorTotalAccruedRewards: BigNumber;
        depositorWithdrawnRewards: BigNumber;
        magisterTotalAccruedRewards: BigNumber;
        magisterWithdrawnRewards: BigNumber;
        createdAt: BigNumber;
        lastDepositAt: BigNumber;
        lastInteractionAt: BigNumber;
        closedAt: BigNumber;
      }
    >;

    getActiveMagisterAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { activeMagisterAddresses: string[] }>;

    getActiveMagisters(
      overrides?: CallOverrides
    ): Promise<[DataStructOutput[]] & { activeMagisters: DataStructOutput[] }>;

    getMagisterDepositIds(
      magister: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPools(overrides?: CallOverrides): Promise<[DataStructOutput[]]>;

    getPoolsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewards(
      depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        depositorRewards: BigNumber;
        magisterRewards: BigNumber;
      }
    >;

    getTotalValueLocked(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalValueLocked: BigNumber }>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    magisters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        isActive: boolean;
        createdAt: BigNumber;
        addr: string;
        totalIncome: BigNumber;
      }
    >;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        depositToken: string;
        priceOracle: string;
        isCompounding: boolean;
        depositsAmount: BigNumber;
        depositorApr: BigNumber;
        magisterApr: BigNumber;
        depositorBonusApr: BigNumber;
        magisterBonusApr: BigNumber;
      }
    >;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      poolId: BigNumberish,
      isCompounding: boolean,
      depositorApr: BigNumberish,
      magisterApr: BigNumberish,
      depositorBonusApr: BigNumberish,
      magisterBonusApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistMagister(
      magister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      depositId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPool(
    depositToken: string,
    isCompounding: boolean,
    depositorApr: BigNumberish,
    magisterApr: BigNumberish,
    depositorBonusApr: BigNumberish,
    magisterBonusApr: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blacklistMagister(
    magister: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  core(overrides?: CallOverrides): Promise<string>;

  currentDepositIds(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "deposit(uint256,uint256,address)"(
    poolId: BigNumberish,
    amount: BigNumberish,
    magister: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      isActive: boolean;
      depositor: string;
      magister: string;
      poolId: BigNumber;
      principal: BigNumber;
      depositorTotalAccruedRewards: BigNumber;
      depositorWithdrawnRewards: BigNumber;
      magisterTotalAccruedRewards: BigNumber;
      magisterWithdrawnRewards: BigNumber;
      createdAt: BigNumber;
      lastDepositAt: BigNumber;
      lastInteractionAt: BigNumber;
      closedAt: BigNumber;
    }
  >;

  getActiveMagisterAddresses(overrides?: CallOverrides): Promise<string[]>;

  getActiveMagisters(overrides?: CallOverrides): Promise<DataStructOutput[]>;

  getMagisterDepositIds(
    magister: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPools(overrides?: CallOverrides): Promise<DataStructOutput[]>;

  getPoolsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRewards(
    depositId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      depositorRewards: BigNumber;
      magisterRewards: BigNumber;
    }
  >;

  getTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _core: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  magisters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber] & {
      isActive: boolean;
      createdAt: BigNumber;
      addr: string;
      totalIncome: BigNumber;
    }
  >;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      depositToken: string;
      priceOracle: string;
      isCompounding: boolean;
      depositsAmount: BigNumber;
      depositorApr: BigNumber;
      magisterApr: BigNumber;
      depositorBonusApr: BigNumber;
      magisterBonusApr: BigNumber;
    }
  >;

  transitGovernance(
    newGovernor: string,
    force: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    poolId: BigNumberish,
    isCompounding: boolean,
    depositorApr: BigNumberish,
    magisterApr: BigNumberish,
    depositorBonusApr: BigNumberish,
    magisterBonusApr: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistMagister(
    magister: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    depositId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    addPool(
      depositToken: string,
      isCompounding: boolean,
      depositorApr: BigNumberish,
      magisterApr: BigNumberish,
      depositorBonusApr: BigNumberish,
      magisterBonusApr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklistMagister(
      magister: string,
      overrides?: CallOverrides
    ): Promise<void>;

    core(overrides?: CallOverrides): Promise<string>;

    currentDepositIds(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,address)"(
      poolId: BigNumberish,
      amount: BigNumberish,
      magister: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        isActive: boolean;
        depositor: string;
        magister: string;
        poolId: BigNumber;
        principal: BigNumber;
        depositorTotalAccruedRewards: BigNumber;
        depositorWithdrawnRewards: BigNumber;
        magisterTotalAccruedRewards: BigNumber;
        magisterWithdrawnRewards: BigNumber;
        createdAt: BigNumber;
        lastDepositAt: BigNumber;
        lastInteractionAt: BigNumber;
        closedAt: BigNumber;
      }
    >;

    getActiveMagisterAddresses(overrides?: CallOverrides): Promise<string[]>;

    getActiveMagisters(overrides?: CallOverrides): Promise<DataStructOutput[]>;

    getMagisterDepositIds(
      magister: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPools(overrides?: CallOverrides): Promise<DataStructOutput[]>;

    getPoolsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        depositorRewards: BigNumber;
        magisterRewards: BigNumber;
      }
    >;

    getTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(_core: string, overrides?: CallOverrides): Promise<void>;

    magisters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        isActive: boolean;
        createdAt: BigNumber;
        addr: string;
        totalIncome: BigNumber;
      }
    >;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        depositToken: string;
        priceOracle: string;
        isCompounding: boolean;
        depositsAmount: BigNumber;
        depositorApr: BigNumber;
        magisterApr: BigNumber;
        depositorBonusApr: BigNumber;
        magisterBonusApr: BigNumber;
      }
    >;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      poolId: BigNumberish,
      isCompounding: boolean,
      depositorApr: BigNumberish,
      magisterApr: BigNumberish,
      depositorBonusApr: BigNumberish,
      magisterBonusApr: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistMagister(
      magister: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      depositId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GovernanceTransited(address,address)"(
      governor?: string | null,
      newGovernor?: string | null
    ): GovernanceTransitedEventFilter;
    GovernanceTransited(
      governor?: string | null,
      newGovernor?: string | null
    ): GovernanceTransitedEventFilter;

    "MagisterBlacklisted(address)"(
      magister?: string | null
    ): MagisterBlacklistedEventFilter;
    MagisterBlacklisted(
      magister?: string | null
    ): MagisterBlacklistedEventFilter;

    "MagisterWhitelisted(address)"(
      magister?: string | null
    ): MagisterWhitelistedEventFilter;
    MagisterWhitelisted(
      magister?: string | null
    ): MagisterWhitelistedEventFilter;

    "PendingGovernanceTransition(address,address)"(
      governor?: string | null,
      newGovernor?: string | null
    ): PendingGovernanceTransitionEventFilter;
    PendingGovernanceTransition(
      governor?: string | null,
      newGovernor?: string | null
    ): PendingGovernanceTransitionEventFilter;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPool(
      depositToken: string,
      isCompounding: boolean,
      depositorApr: BigNumberish,
      magisterApr: BigNumberish,
      depositorBonusApr: BigNumberish,
      magisterBonusApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blacklistMagister(
      magister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    currentDepositIds(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,address)"(
      poolId: BigNumberish,
      amount: BigNumberish,
      magister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getActiveMagisterAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveMagisters(overrides?: CallOverrides): Promise<BigNumber>;

    getMagisterDepositIds(
      magister: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPools(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    magisters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      poolId: BigNumberish,
      isCompounding: boolean,
      depositorApr: BigNumberish,
      magisterApr: BigNumberish,
      depositorBonusApr: BigNumberish,
      magisterBonusApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistMagister(
      magister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      depositId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPool(
      depositToken: string,
      isCompounding: boolean,
      depositorApr: BigNumberish,
      magisterApr: BigNumberish,
      depositorBonusApr: BigNumberish,
      magisterBonusApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blacklistMagister(
      magister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentDepositIds(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,address)"(
      poolId: BigNumberish,
      amount: BigNumberish,
      magister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveMagisterAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveMagisters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMagisterDepositIds(
      magister: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewards(
      depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalValueLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    magisters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      poolId: BigNumberish,
      isCompounding: boolean,
      depositorApr: BigNumberish,
      magisterApr: BigNumberish,
      depositorBonusApr: BigNumberish,
      magisterBonusApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistMagister(
      magister: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      depositId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
