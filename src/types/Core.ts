/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CoreInterface extends ethers.utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "developmentFee()": FunctionFragment;
    "exchangeFee()": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize()": FunctionFragment;
    "liquidationLoanToValueRatio()": FunctionFragment;
    "marginCallLoanToValueRatio()": FunctionFragment;
    "minimumPrincipalAmount()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "rebalancingThreshold()": FunctionFragment;
    "setLiquidationLoanToValueRatio(uint256)": FunctionFragment;
    "setMarginCallLoanToValueRatio(uint256)": FunctionFragment;
    "setMinimumPrincipalAmount(uint256)": FunctionFragment;
    "setPlatformFees(uint256,uint256,uint256)": FunctionFragment;
    "setRebalancingThreshold(uint256)": FunctionFragment;
    "setStabilityFee(uint256)": FunctionFragment;
    "stabilityFee()": FunctionFragment;
    "stabilizationFee()": FunctionFragment;
    "transitGovernance(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developmentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationLoanToValueRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marginCallLoanToValueRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumPrincipalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalancingThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationLoanToValueRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginCallLoanToValueRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumPrincipalAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalancingThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStabilityFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stabilizationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transitGovernance",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developmentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationLoanToValueRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginCallLoanToValueRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumPrincipalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalancingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationLoanToValueRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginCallLoanToValueRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumPrincipalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalancingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStabilityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilizationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitGovernance",
    data: BytesLike
  ): Result;

  events: {
    "GovernanceTransited(address,address)": EventFragment;
    "LiquidationLoanToValueRatioUpdated(uint256,uint256)": EventFragment;
    "MarginCallLoanToValueRatioUpdated(uint256,uint256)": EventFragment;
    "MinimumPrincipalAmountUpdated(uint256,uint256)": EventFragment;
    "PendingGovernanceTransition(address,address)": EventFragment;
    "PlatformFeesUpdated(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RebalancingThresholdUpdated(uint256,uint256)": EventFragment;
    "StabilityFeeUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernanceTransited"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationLoanToValueRatioUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MarginCallLoanToValueRatioUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinimumPrincipalAmountUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingGovernanceTransition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeesUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RebalancingThresholdUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityFeeUpdated"): EventFragment;
}

export type GovernanceTransitedEvent = TypedEvent<
  [string, string],
  { governor: string; newGovernor: string }
>;

export type GovernanceTransitedEventFilter =
  TypedEventFilter<GovernanceTransitedEvent>;

export type LiquidationLoanToValueRatioUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  {
    liqudationLoanToValueRatio: BigNumber;
    newLiquidationLoanToValueRatio: BigNumber;
  }
>;

export type LiquidationLoanToValueRatioUpdatedEventFilter =
  TypedEventFilter<LiquidationLoanToValueRatioUpdatedEvent>;

export type MarginCallLoanToValueRatioUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  {
    marginCallLoanToValueRatio: BigNumber;
    newMarginCallLoanToValueRatio: BigNumber;
  }
>;

export type MarginCallLoanToValueRatioUpdatedEventFilter =
  TypedEventFilter<MarginCallLoanToValueRatioUpdatedEvent>;

export type MinimumPrincipalAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { minimumPrincipalAmount: BigNumber; newMinimumPrincipalAmount: BigNumber }
>;

export type MinimumPrincipalAmountUpdatedEventFilter =
  TypedEventFilter<MinimumPrincipalAmountUpdatedEvent>;

export type PendingGovernanceTransitionEvent = TypedEvent<
  [string, string],
  { governor: string; newGovernor: string }
>;

export type PendingGovernanceTransitionEventFilter =
  TypedEventFilter<PendingGovernanceTransitionEvent>;

export type PlatformFeesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    stabilizationFee: BigNumber;
    newStabilizationFee: BigNumber;
    exchangeFee: BigNumber;
    newExchangeFee: BigNumber;
    developmentFee: BigNumber;
    newDevelopmentFee: BigNumber;
  }
>;

export type PlatformFeesUpdatedEventFilter =
  TypedEventFilter<PlatformFeesUpdatedEvent>;

export type RebalancingThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { rebalancingThreshold: BigNumber; newRebalancingThreshold: BigNumber }
>;

export type RebalancingThresholdUpdatedEventFilter =
  TypedEventFilter<RebalancingThresholdUpdatedEvent>;

export type StabilityFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { stabilityFee: BigNumber; newStabilityFee: BigNumber }
>;

export type StabilityFeeUpdatedEventFilter =
  TypedEventFilter<StabilityFeeUpdatedEvent>;

export interface Core extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    developmentFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationLoanToValueRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    marginCallLoanToValueRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumPrincipalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    rebalancingThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    setLiquidationLoanToValueRatio(
      newLiquidationLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarginCallLoanToValueRatio(
      newMarginCallLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumPrincipalAmount(
      newMinimumPrincipalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformFees(
      newStabilizationFee: BigNumberish,
      newExchangeFee: BigNumberish,
      newDevelopmentFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRebalancingThreshold(
      newRebalancingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStabilityFee(
      newStabilityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stabilityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    stabilizationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  developmentFee(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

  marginCallLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

  minimumPrincipalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  rebalancingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  setLiquidationLoanToValueRatio(
    newLiquidationLoanToValueRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarginCallLoanToValueRatio(
    newMarginCallLoanToValueRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumPrincipalAmount(
    newMinimumPrincipalAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformFees(
    newStabilizationFee: BigNumberish,
    newExchangeFee: BigNumberish,
    newDevelopmentFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRebalancingThreshold(
    newRebalancingThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStabilityFee(
    newStabilityFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stabilityFee(overrides?: CallOverrides): Promise<BigNumber>;

  stabilizationFee(overrides?: CallOverrides): Promise<BigNumber>;

  transitGovernance(
    newGovernor: string,
    force: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    developmentFee(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    liquidationLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

    marginCallLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPrincipalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    rebalancingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    setLiquidationLoanToValueRatio(
      newLiquidationLoanToValueRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarginCallLoanToValueRatio(
      newMarginCallLoanToValueRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumPrincipalAmount(
      newMinimumPrincipalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFees(
      newStabilizationFee: BigNumberish,
      newExchangeFee: BigNumberish,
      newDevelopmentFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalancingThreshold(
      newRebalancingThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStabilityFee(
      newStabilityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stabilityFee(overrides?: CallOverrides): Promise<BigNumber>;

    stabilizationFee(overrides?: CallOverrides): Promise<BigNumber>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GovernanceTransited(address,address)"(
      governor?: string | null,
      newGovernor?: string | null
    ): GovernanceTransitedEventFilter;
    GovernanceTransited(
      governor?: string | null,
      newGovernor?: string | null
    ): GovernanceTransitedEventFilter;

    "LiquidationLoanToValueRatioUpdated(uint256,uint256)"(
      liqudationLoanToValueRatio?: null,
      newLiquidationLoanToValueRatio?: null
    ): LiquidationLoanToValueRatioUpdatedEventFilter;
    LiquidationLoanToValueRatioUpdated(
      liqudationLoanToValueRatio?: null,
      newLiquidationLoanToValueRatio?: null
    ): LiquidationLoanToValueRatioUpdatedEventFilter;

    "MarginCallLoanToValueRatioUpdated(uint256,uint256)"(
      marginCallLoanToValueRatio?: null,
      newMarginCallLoanToValueRatio?: null
    ): MarginCallLoanToValueRatioUpdatedEventFilter;
    MarginCallLoanToValueRatioUpdated(
      marginCallLoanToValueRatio?: null,
      newMarginCallLoanToValueRatio?: null
    ): MarginCallLoanToValueRatioUpdatedEventFilter;

    "MinimumPrincipalAmountUpdated(uint256,uint256)"(
      minimumPrincipalAmount?: null,
      newMinimumPrincipalAmount?: null
    ): MinimumPrincipalAmountUpdatedEventFilter;
    MinimumPrincipalAmountUpdated(
      minimumPrincipalAmount?: null,
      newMinimumPrincipalAmount?: null
    ): MinimumPrincipalAmountUpdatedEventFilter;

    "PendingGovernanceTransition(address,address)"(
      governor?: string | null,
      newGovernor?: string | null
    ): PendingGovernanceTransitionEventFilter;
    PendingGovernanceTransition(
      governor?: string | null,
      newGovernor?: string | null
    ): PendingGovernanceTransitionEventFilter;

    "PlatformFeesUpdated(uint256,uint256,uint256,uint256,uint256,uint256)"(
      stabilizationFee?: null,
      newStabilizationFee?: null,
      exchangeFee?: null,
      newExchangeFee?: null,
      developmentFee?: null,
      newDevelopmentFee?: null
    ): PlatformFeesUpdatedEventFilter;
    PlatformFeesUpdated(
      stabilizationFee?: null,
      newStabilizationFee?: null,
      exchangeFee?: null,
      newExchangeFee?: null,
      developmentFee?: null,
      newDevelopmentFee?: null
    ): PlatformFeesUpdatedEventFilter;

    "RebalancingThresholdUpdated(uint256,uint256)"(
      rebalancingThreshold?: null,
      newRebalancingThreshold?: null
    ): RebalancingThresholdUpdatedEventFilter;
    RebalancingThresholdUpdated(
      rebalancingThreshold?: null,
      newRebalancingThreshold?: null
    ): RebalancingThresholdUpdatedEventFilter;

    "StabilityFeeUpdated(uint256,uint256)"(
      stabilityFee?: null,
      newStabilityFee?: null
    ): StabilityFeeUpdatedEventFilter;
    StabilityFeeUpdated(
      stabilityFee?: null,
      newStabilityFee?: null
    ): StabilityFeeUpdatedEventFilter;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    developmentFee(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

    marginCallLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPrincipalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    rebalancingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    setLiquidationLoanToValueRatio(
      newLiquidationLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarginCallLoanToValueRatio(
      newMarginCallLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumPrincipalAmount(
      newMinimumPrincipalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformFees(
      newStabilizationFee: BigNumberish,
      newExchangeFee: BigNumberish,
      newDevelopmentFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRebalancingThreshold(
      newRebalancingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStabilityFee(
      newStabilityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stabilityFee(overrides?: CallOverrides): Promise<BigNumber>;

    stabilizationFee(overrides?: CallOverrides): Promise<BigNumber>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    developmentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationLoanToValueRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marginCallLoanToValueRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumPrincipalAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalancingThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLiquidationLoanToValueRatio(
      newLiquidationLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarginCallLoanToValueRatio(
      newMarginCallLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumPrincipalAmount(
      newMinimumPrincipalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFees(
      newStabilizationFee: BigNumberish,
      newExchangeFee: BigNumberish,
      newDevelopmentFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRebalancingThreshold(
      newRebalancingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStabilityFee(
      newStabilityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stabilityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stabilizationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
