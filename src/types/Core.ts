/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CoreInterface extends utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "baks()": FunctionFragment;
    "bank()": FunctionFragment;
    "depositary()": FunctionFragment;
    "developmentFee()": FunctionFragment;
    "developmentFund()": FunctionFragment;
    "earlyWithdrawalFee()": FunctionFragment;
    "earlyWithdrawalPeriod()": FunctionFragment;
    "exchangeFee()": FunctionFragment;
    "exchangeFund()": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "interest()": FunctionFragment;
    "liquidationLoanToValueRatio()": FunctionFragment;
    "liquidator()": FunctionFragment;
    "marginCallLoanToValueRatio()": FunctionFragment;
    "minimumLiquidity()": FunctionFragment;
    "minimumMagisterDepositAmount()": FunctionFragment;
    "minimumPrincipalAmount()": FunctionFragment;
    "operator()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "rebalancingThreshold()": FunctionFragment;
    "servicingThreshold()": FunctionFragment;
    "setBaks(address)": FunctionFragment;
    "setBank(address)": FunctionFragment;
    "setDepositary(address)": FunctionFragment;
    "setDevelopmentFund(address)": FunctionFragment;
    "setEarlyWithdrawalFee(uint256)": FunctionFragment;
    "setEarlyWithdrawalPeriod(uint256)": FunctionFragment;
    "setExchangeFund(address)": FunctionFragment;
    "setInterest(uint256)": FunctionFragment;
    "setLiquidationLoanToValueRatio(uint256)": FunctionFragment;
    "setLiquidator(address)": FunctionFragment;
    "setMarginCallLoanToValueRatio(uint256)": FunctionFragment;
    "setMinimumLiquidity(uint256)": FunctionFragment;
    "setMinimumMagisterDepositAmount(uint256)": FunctionFragment;
    "setMinimumPrincipalAmount(uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setPlatformFees(uint256,uint256,uint256)": FunctionFragment;
    "setPriceOracle(address)": FunctionFragment;
    "setRebalancingThreshold(uint256)": FunctionFragment;
    "setServicingThreshold(uint256)": FunctionFragment;
    "setStabilityFee(uint256)": FunctionFragment;
    "setVoice(address)": FunctionFragment;
    "setWorkFee(uint256)": FunctionFragment;
    "stabilityFee()": FunctionFragment;
    "stabilizationFee()": FunctionFragment;
    "transitGovernance(address,bool)": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "voice()": FunctionFragment;
    "workFee()": FunctionFragment;
    "wrappedNativeCurrency()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baks", values?: undefined): string;
  encodeFunctionData(functionFragment: "bank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developmentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developmentFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlyWithdrawalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlyWithdrawalPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "interest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidationLoanToValueRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marginCallLoanToValueRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumMagisterDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumPrincipalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalancingThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "servicingThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setBaks", values: [string]): string;
  encodeFunctionData(functionFragment: "setBank", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDepositary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevelopmentFund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarlyWithdrawalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarlyWithdrawalPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeFund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationLoanToValueRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginCallLoanToValueRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumMagisterDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumPrincipalAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPlatformFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalancingThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setServicingThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStabilityFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setVoice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWorkFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stabilizationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transitGovernance",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voice", values?: undefined): string;
  encodeFunctionData(functionFragment: "workFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrappedNativeCurrency",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "developmentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developmentFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyWithdrawalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationLoanToValueRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marginCallLoanToValueRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumMagisterDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumPrincipalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalancingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "servicingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevelopmentFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarlyWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarlyWithdrawalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationLoanToValueRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginCallLoanToValueRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumMagisterDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumPrincipalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalancingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServicingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStabilityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVoice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWorkFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stabilityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilizationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNativeCurrency",
    data: BytesLike
  ): Result;

  events: {
    "BaksUpdated(address,address)": EventFragment;
    "BankUpdated(address,address)": EventFragment;
    "DepositaryUpdated(address,address)": EventFragment;
    "DevelopmentFundUpdated(address,address)": EventFragment;
    "EarlyWithdrawalFeeUpdated(uint256,uint256)": EventFragment;
    "EarlyWithdrawalPeriodUpdated(uint256,uint256)": EventFragment;
    "ExchangeFundUpdated(address,address)": EventFragment;
    "GovernanceTransited(address,address)": EventFragment;
    "InterestUpdated(uint256,uint256)": EventFragment;
    "LiquidationLoanToValueRatioUpdated(uint256,uint256)": EventFragment;
    "LiquidatorUpdated(address,address)": EventFragment;
    "MarginCallLoanToValueRatioUpdated(uint256,uint256)": EventFragment;
    "MinimumLiquidityUpdated(uint256,uint256)": EventFragment;
    "MinimumMagisterDepositAmountUpdated(uint256,uint256)": EventFragment;
    "MinimumPrincipalAmountUpdated(uint256,uint256)": EventFragment;
    "OperatorUpdated(address,address)": EventFragment;
    "PendingGovernanceTransition(address,address)": EventFragment;
    "PlatformFeesUpdated(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "PriceOracleUpdated(address,address)": EventFragment;
    "RebalancingThresholdUpdated(uint256,uint256)": EventFragment;
    "ServicingThresholdUpdated(uint256,uint256)": EventFragment;
    "StabilityFeeUpdated(uint256,uint256)": EventFragment;
    "VoiceUpdated(address,address)": EventFragment;
    "WorkFeeUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BankUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositaryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevelopmentFundUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EarlyWithdrawalFeeUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EarlyWithdrawalPeriodUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeFundUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceTransited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationLoanToValueRatioUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatorUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MarginCallLoanToValueRatioUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumLiquidityUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinimumMagisterDepositAmountUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinimumPrincipalAmountUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingGovernanceTransition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceOracleUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RebalancingThresholdUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServicingThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoiceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkFeeUpdated"): EventFragment;
}

export type BaksUpdatedEvent = TypedEvent<
  [string, string],
  { baks: string; newBaks: string }
>;

export type BaksUpdatedEventFilter = TypedEventFilter<BaksUpdatedEvent>;

export type BankUpdatedEvent = TypedEvent<
  [string, string],
  { bank: string; newBank: string }
>;

export type BankUpdatedEventFilter = TypedEventFilter<BankUpdatedEvent>;

export type DepositaryUpdatedEvent = TypedEvent<
  [string, string],
  { depositary: string; newDepositary: string }
>;

export type DepositaryUpdatedEventFilter =
  TypedEventFilter<DepositaryUpdatedEvent>;

export type DevelopmentFundUpdatedEvent = TypedEvent<
  [string, string],
  { developmentFund: string; newDevelopmentFund: string }
>;

export type DevelopmentFundUpdatedEventFilter =
  TypedEventFilter<DevelopmentFundUpdatedEvent>;

export type EarlyWithdrawalFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { earlyWithdrawalFee: BigNumber; newEarlyWithdrawalFee: BigNumber }
>;

export type EarlyWithdrawalFeeUpdatedEventFilter =
  TypedEventFilter<EarlyWithdrawalFeeUpdatedEvent>;

export type EarlyWithdrawalPeriodUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { earlyWithdrawalPeriod: BigNumber; newEarlyWithdrawalPeriod: BigNumber }
>;

export type EarlyWithdrawalPeriodUpdatedEventFilter =
  TypedEventFilter<EarlyWithdrawalPeriodUpdatedEvent>;

export type ExchangeFundUpdatedEvent = TypedEvent<
  [string, string],
  { exchangeFund: string; newExchangeFund: string }
>;

export type ExchangeFundUpdatedEventFilter =
  TypedEventFilter<ExchangeFundUpdatedEvent>;

export type GovernanceTransitedEvent = TypedEvent<
  [string, string],
  { governor: string; newGovernor: string }
>;

export type GovernanceTransitedEventFilter =
  TypedEventFilter<GovernanceTransitedEvent>;

export type InterestUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { interest: BigNumber; newInterest: BigNumber }
>;

export type InterestUpdatedEventFilter = TypedEventFilter<InterestUpdatedEvent>;

export type LiquidationLoanToValueRatioUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  {
    liqudationLoanToValueRatio: BigNumber;
    newLiquidationLoanToValueRatio: BigNumber;
  }
>;

export type LiquidationLoanToValueRatioUpdatedEventFilter =
  TypedEventFilter<LiquidationLoanToValueRatioUpdatedEvent>;

export type LiquidatorUpdatedEvent = TypedEvent<
  [string, string],
  { liquidator: string; newLiquidator: string }
>;

export type LiquidatorUpdatedEventFilter =
  TypedEventFilter<LiquidatorUpdatedEvent>;

export type MarginCallLoanToValueRatioUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  {
    marginCallLoanToValueRatio: BigNumber;
    newMarginCallLoanToValueRatio: BigNumber;
  }
>;

export type MarginCallLoanToValueRatioUpdatedEventFilter =
  TypedEventFilter<MarginCallLoanToValueRatioUpdatedEvent>;

export type MinimumLiquidityUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { minimumLiquidity: BigNumber; newMinimumLiquidity: BigNumber }
>;

export type MinimumLiquidityUpdatedEventFilter =
  TypedEventFilter<MinimumLiquidityUpdatedEvent>;

export type MinimumMagisterDepositAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  {
    minimumMagisterDepositAmount: BigNumber;
    newMinimumMagisterDepositAmount: BigNumber;
  }
>;

export type MinimumMagisterDepositAmountUpdatedEventFilter =
  TypedEventFilter<MinimumMagisterDepositAmountUpdatedEvent>;

export type MinimumPrincipalAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { minimumPrincipalAmount: BigNumber; newMinimumPrincipalAmount: BigNumber }
>;

export type MinimumPrincipalAmountUpdatedEventFilter =
  TypedEventFilter<MinimumPrincipalAmountUpdatedEvent>;

export type OperatorUpdatedEvent = TypedEvent<
  [string, string],
  { operator: string; newOperator: string }
>;

export type OperatorUpdatedEventFilter = TypedEventFilter<OperatorUpdatedEvent>;

export type PendingGovernanceTransitionEvent = TypedEvent<
  [string, string],
  { governor: string; newGovernor: string }
>;

export type PendingGovernanceTransitionEventFilter =
  TypedEventFilter<PendingGovernanceTransitionEvent>;

export type PlatformFeesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    stabilizationFee: BigNumber;
    newStabilizationFee: BigNumber;
    exchangeFee: BigNumber;
    newExchangeFee: BigNumber;
    developmentFee: BigNumber;
    newDevelopmentFee: BigNumber;
  }
>;

export type PlatformFeesUpdatedEventFilter =
  TypedEventFilter<PlatformFeesUpdatedEvent>;

export type PriceOracleUpdatedEvent = TypedEvent<
  [string, string],
  { priceOracle: string; newPriceOracle: string }
>;

export type PriceOracleUpdatedEventFilter =
  TypedEventFilter<PriceOracleUpdatedEvent>;

export type RebalancingThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { rebalancingThreshold: BigNumber; newRebalancingThreshold: BigNumber }
>;

export type RebalancingThresholdUpdatedEventFilter =
  TypedEventFilter<RebalancingThresholdUpdatedEvent>;

export type ServicingThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { servicingThreshold: BigNumber; newServicingThreshold: BigNumber }
>;

export type ServicingThresholdUpdatedEventFilter =
  TypedEventFilter<ServicingThresholdUpdatedEvent>;

export type StabilityFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { stabilityFee: BigNumber; newStabilityFee: BigNumber }
>;

export type StabilityFeeUpdatedEventFilter =
  TypedEventFilter<StabilityFeeUpdatedEvent>;

export type VoiceUpdatedEvent = TypedEvent<
  [string, string],
  { voice: string; newVoice: string }
>;

export type VoiceUpdatedEventFilter = TypedEventFilter<VoiceUpdatedEvent>;

export type WorkFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { workFee: BigNumber; newWorkFee: BigNumber }
>;

export type WorkFeeUpdatedEventFilter = TypedEventFilter<WorkFeeUpdatedEvent>;

export interface Core extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baks(overrides?: CallOverrides): Promise<[string]>;

    bank(overrides?: CallOverrides): Promise<[string]>;

    depositary(overrides?: CallOverrides): Promise<[string]>;

    developmentFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    developmentFund(overrides?: CallOverrides): Promise<[string]>;

    earlyWithdrawalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    earlyWithdrawalPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeFund(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _wrappedNativeCurrency: string,
      _uniswapV2Router: string,
      _operator: string,
      _liquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interest(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationLoanToValueRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidator(overrides?: CallOverrides): Promise<[string]>;

    marginCallLoanToValueRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumMagisterDepositAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minimumPrincipalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    rebalancingThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    servicingThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBaks(
      newBaks: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBank(
      newBank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositary(
      newDepositary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevelopmentFund(
      newDevelopmentFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEarlyWithdrawalFee(
      newEarlyWithdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEarlyWithdrawalPeriod(
      newEarlyWithdrawalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchangeFund(
      newExchangeFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterest(
      newInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationLoanToValueRatio(
      newLiquidationLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidator(
      newLiquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarginCallLoanToValueRatio(
      newMarginCallLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumLiquidity(
      newMinimumLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumMagisterDepositAmount(
      newMinimumMagisterDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumPrincipalAmount(
      newMinimumPrincipalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformFees(
      newStabilizationFee: BigNumberish,
      newExchangeFee: BigNumberish,
      newDevelopmentFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceOracle(
      newPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRebalancingThreshold(
      newRebalancingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setServicingThreshold(
      newServicingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStabilityFee(
      newStabilityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVoice(
      newVoice: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWorkFee(
      newWorkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stabilityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    stabilizationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    voice(overrides?: CallOverrides): Promise<[string]>;

    workFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    wrappedNativeCurrency(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baks(overrides?: CallOverrides): Promise<string>;

  bank(overrides?: CallOverrides): Promise<string>;

  depositary(overrides?: CallOverrides): Promise<string>;

  developmentFee(overrides?: CallOverrides): Promise<BigNumber>;

  developmentFund(overrides?: CallOverrides): Promise<string>;

  earlyWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

  earlyWithdrawalPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeFund(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _wrappedNativeCurrency: string,
    _uniswapV2Router: string,
    _operator: string,
    _liquidator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interest(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

  liquidator(overrides?: CallOverrides): Promise<string>;

  marginCallLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

  minimumLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  minimumMagisterDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minimumPrincipalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  operator(overrides?: CallOverrides): Promise<string>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  rebalancingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  servicingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  setBaks(
    newBaks: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBank(
    newBank: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositary(
    newDepositary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevelopmentFund(
    newDevelopmentFund: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEarlyWithdrawalFee(
    newEarlyWithdrawalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEarlyWithdrawalPeriod(
    newEarlyWithdrawalPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchangeFund(
    newExchangeFund: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterest(
    newInterest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationLoanToValueRatio(
    newLiquidationLoanToValueRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidator(
    newLiquidator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarginCallLoanToValueRatio(
    newMarginCallLoanToValueRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumLiquidity(
    newMinimumLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumMagisterDepositAmount(
    newMinimumMagisterDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumPrincipalAmount(
    newMinimumPrincipalAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    newOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformFees(
    newStabilizationFee: BigNumberish,
    newExchangeFee: BigNumberish,
    newDevelopmentFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceOracle(
    newPriceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRebalancingThreshold(
    newRebalancingThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setServicingThreshold(
    newServicingThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStabilityFee(
    newStabilityFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVoice(
    newVoice: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWorkFee(
    newWorkFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stabilityFee(overrides?: CallOverrides): Promise<BigNumber>;

  stabilizationFee(overrides?: CallOverrides): Promise<BigNumber>;

  transitGovernance(
    newGovernor: string,
    force: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  voice(overrides?: CallOverrides): Promise<string>;

  workFee(overrides?: CallOverrides): Promise<BigNumber>;

  wrappedNativeCurrency(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    baks(overrides?: CallOverrides): Promise<string>;

    bank(overrides?: CallOverrides): Promise<string>;

    depositary(overrides?: CallOverrides): Promise<string>;

    developmentFee(overrides?: CallOverrides): Promise<BigNumber>;

    developmentFund(overrides?: CallOverrides): Promise<string>;

    earlyWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    earlyWithdrawalPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeFund(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(
      _wrappedNativeCurrency: string,
      _uniswapV2Router: string,
      _operator: string,
      _liquidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interest(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

    liquidator(overrides?: CallOverrides): Promise<string>;

    marginCallLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minimumLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    minimumMagisterDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPrincipalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<string>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    rebalancingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    servicingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    setBaks(newBaks: string, overrides?: CallOverrides): Promise<void>;

    setBank(newBank: string, overrides?: CallOverrides): Promise<void>;

    setDepositary(
      newDepositary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevelopmentFund(
      newDevelopmentFund: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEarlyWithdrawalFee(
      newEarlyWithdrawalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEarlyWithdrawalPeriod(
      newEarlyWithdrawalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangeFund(
      newExchangeFund: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterest(
      newInterest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationLoanToValueRatio(
      newLiquidationLoanToValueRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidator(
      newLiquidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarginCallLoanToValueRatio(
      newMarginCallLoanToValueRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumLiquidity(
      newMinimumLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumMagisterDepositAmount(
      newMinimumMagisterDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumPrincipalAmount(
      newMinimumPrincipalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(newOperator: string, overrides?: CallOverrides): Promise<void>;

    setPlatformFees(
      newStabilizationFee: BigNumberish,
      newExchangeFee: BigNumberish,
      newDevelopmentFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOracle(
      newPriceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalancingThreshold(
      newRebalancingThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setServicingThreshold(
      newServicingThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStabilityFee(
      newStabilityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoice(newVoice: string, overrides?: CallOverrides): Promise<void>;

    setWorkFee(
      newWorkFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stabilityFee(overrides?: CallOverrides): Promise<BigNumber>;

    stabilizationFee(overrides?: CallOverrides): Promise<BigNumber>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    voice(overrides?: CallOverrides): Promise<string>;

    workFee(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedNativeCurrency(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BaksUpdated(address,address)"(
      baks?: null,
      newBaks?: null
    ): BaksUpdatedEventFilter;
    BaksUpdated(baks?: null, newBaks?: null): BaksUpdatedEventFilter;

    "BankUpdated(address,address)"(
      bank?: null,
      newBank?: null
    ): BankUpdatedEventFilter;
    BankUpdated(bank?: null, newBank?: null): BankUpdatedEventFilter;

    "DepositaryUpdated(address,address)"(
      depositary?: null,
      newDepositary?: null
    ): DepositaryUpdatedEventFilter;
    DepositaryUpdated(
      depositary?: null,
      newDepositary?: null
    ): DepositaryUpdatedEventFilter;

    "DevelopmentFundUpdated(address,address)"(
      developmentFund?: null,
      newDevelopmentFund?: null
    ): DevelopmentFundUpdatedEventFilter;
    DevelopmentFundUpdated(
      developmentFund?: null,
      newDevelopmentFund?: null
    ): DevelopmentFundUpdatedEventFilter;

    "EarlyWithdrawalFeeUpdated(uint256,uint256)"(
      earlyWithdrawalFee?: null,
      newEarlyWithdrawalFee?: null
    ): EarlyWithdrawalFeeUpdatedEventFilter;
    EarlyWithdrawalFeeUpdated(
      earlyWithdrawalFee?: null,
      newEarlyWithdrawalFee?: null
    ): EarlyWithdrawalFeeUpdatedEventFilter;

    "EarlyWithdrawalPeriodUpdated(uint256,uint256)"(
      earlyWithdrawalPeriod?: null,
      newEarlyWithdrawalPeriod?: null
    ): EarlyWithdrawalPeriodUpdatedEventFilter;
    EarlyWithdrawalPeriodUpdated(
      earlyWithdrawalPeriod?: null,
      newEarlyWithdrawalPeriod?: null
    ): EarlyWithdrawalPeriodUpdatedEventFilter;

    "ExchangeFundUpdated(address,address)"(
      exchangeFund?: null,
      newExchangeFund?: null
    ): ExchangeFundUpdatedEventFilter;
    ExchangeFundUpdated(
      exchangeFund?: null,
      newExchangeFund?: null
    ): ExchangeFundUpdatedEventFilter;

    "GovernanceTransited(address,address)"(
      governor?: string | null,
      newGovernor?: string | null
    ): GovernanceTransitedEventFilter;
    GovernanceTransited(
      governor?: string | null,
      newGovernor?: string | null
    ): GovernanceTransitedEventFilter;

    "InterestUpdated(uint256,uint256)"(
      interest?: null,
      newInterest?: null
    ): InterestUpdatedEventFilter;
    InterestUpdated(
      interest?: null,
      newInterest?: null
    ): InterestUpdatedEventFilter;

    "LiquidationLoanToValueRatioUpdated(uint256,uint256)"(
      liqudationLoanToValueRatio?: null,
      newLiquidationLoanToValueRatio?: null
    ): LiquidationLoanToValueRatioUpdatedEventFilter;
    LiquidationLoanToValueRatioUpdated(
      liqudationLoanToValueRatio?: null,
      newLiquidationLoanToValueRatio?: null
    ): LiquidationLoanToValueRatioUpdatedEventFilter;

    "LiquidatorUpdated(address,address)"(
      liquidator?: null,
      newLiquidator?: null
    ): LiquidatorUpdatedEventFilter;
    LiquidatorUpdated(
      liquidator?: null,
      newLiquidator?: null
    ): LiquidatorUpdatedEventFilter;

    "MarginCallLoanToValueRatioUpdated(uint256,uint256)"(
      marginCallLoanToValueRatio?: null,
      newMarginCallLoanToValueRatio?: null
    ): MarginCallLoanToValueRatioUpdatedEventFilter;
    MarginCallLoanToValueRatioUpdated(
      marginCallLoanToValueRatio?: null,
      newMarginCallLoanToValueRatio?: null
    ): MarginCallLoanToValueRatioUpdatedEventFilter;

    "MinimumLiquidityUpdated(uint256,uint256)"(
      minimumLiquidity?: null,
      newMinimumLiquidity?: null
    ): MinimumLiquidityUpdatedEventFilter;
    MinimumLiquidityUpdated(
      minimumLiquidity?: null,
      newMinimumLiquidity?: null
    ): MinimumLiquidityUpdatedEventFilter;

    "MinimumMagisterDepositAmountUpdated(uint256,uint256)"(
      minimumMagisterDepositAmount?: null,
      newMinimumMagisterDepositAmount?: null
    ): MinimumMagisterDepositAmountUpdatedEventFilter;
    MinimumMagisterDepositAmountUpdated(
      minimumMagisterDepositAmount?: null,
      newMinimumMagisterDepositAmount?: null
    ): MinimumMagisterDepositAmountUpdatedEventFilter;

    "MinimumPrincipalAmountUpdated(uint256,uint256)"(
      minimumPrincipalAmount?: null,
      newMinimumPrincipalAmount?: null
    ): MinimumPrincipalAmountUpdatedEventFilter;
    MinimumPrincipalAmountUpdated(
      minimumPrincipalAmount?: null,
      newMinimumPrincipalAmount?: null
    ): MinimumPrincipalAmountUpdatedEventFilter;

    "OperatorUpdated(address,address)"(
      operator?: null,
      newOperator?: null
    ): OperatorUpdatedEventFilter;
    OperatorUpdated(
      operator?: null,
      newOperator?: null
    ): OperatorUpdatedEventFilter;

    "PendingGovernanceTransition(address,address)"(
      governor?: string | null,
      newGovernor?: string | null
    ): PendingGovernanceTransitionEventFilter;
    PendingGovernanceTransition(
      governor?: string | null,
      newGovernor?: string | null
    ): PendingGovernanceTransitionEventFilter;

    "PlatformFeesUpdated(uint256,uint256,uint256,uint256,uint256,uint256)"(
      stabilizationFee?: null,
      newStabilizationFee?: null,
      exchangeFee?: null,
      newExchangeFee?: null,
      developmentFee?: null,
      newDevelopmentFee?: null
    ): PlatformFeesUpdatedEventFilter;
    PlatformFeesUpdated(
      stabilizationFee?: null,
      newStabilizationFee?: null,
      exchangeFee?: null,
      newExchangeFee?: null,
      developmentFee?: null,
      newDevelopmentFee?: null
    ): PlatformFeesUpdatedEventFilter;

    "PriceOracleUpdated(address,address)"(
      priceOracle?: null,
      newPriceOracle?: null
    ): PriceOracleUpdatedEventFilter;
    PriceOracleUpdated(
      priceOracle?: null,
      newPriceOracle?: null
    ): PriceOracleUpdatedEventFilter;

    "RebalancingThresholdUpdated(uint256,uint256)"(
      rebalancingThreshold?: null,
      newRebalancingThreshold?: null
    ): RebalancingThresholdUpdatedEventFilter;
    RebalancingThresholdUpdated(
      rebalancingThreshold?: null,
      newRebalancingThreshold?: null
    ): RebalancingThresholdUpdatedEventFilter;

    "ServicingThresholdUpdated(uint256,uint256)"(
      servicingThreshold?: null,
      newServicingThreshold?: null
    ): ServicingThresholdUpdatedEventFilter;
    ServicingThresholdUpdated(
      servicingThreshold?: null,
      newServicingThreshold?: null
    ): ServicingThresholdUpdatedEventFilter;

    "StabilityFeeUpdated(uint256,uint256)"(
      stabilityFee?: null,
      newStabilityFee?: null
    ): StabilityFeeUpdatedEventFilter;
    StabilityFeeUpdated(
      stabilityFee?: null,
      newStabilityFee?: null
    ): StabilityFeeUpdatedEventFilter;

    "VoiceUpdated(address,address)"(
      voice?: null,
      newVoice?: null
    ): VoiceUpdatedEventFilter;
    VoiceUpdated(voice?: null, newVoice?: null): VoiceUpdatedEventFilter;

    "WorkFeeUpdated(uint256,uint256)"(
      workFee?: null,
      newWorkFee?: null
    ): WorkFeeUpdatedEventFilter;
    WorkFeeUpdated(
      workFee?: null,
      newWorkFee?: null
    ): WorkFeeUpdatedEventFilter;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baks(overrides?: CallOverrides): Promise<BigNumber>;

    bank(overrides?: CallOverrides): Promise<BigNumber>;

    depositary(overrides?: CallOverrides): Promise<BigNumber>;

    developmentFee(overrides?: CallOverrides): Promise<BigNumber>;

    developmentFund(overrides?: CallOverrides): Promise<BigNumber>;

    earlyWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    earlyWithdrawalPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeFund(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _wrappedNativeCurrency: string,
      _uniswapV2Router: string,
      _operator: string,
      _liquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interest(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

    liquidator(overrides?: CallOverrides): Promise<BigNumber>;

    marginCallLoanToValueRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minimumLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    minimumMagisterDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimumPrincipalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    rebalancingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    servicingThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    setBaks(
      newBaks: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBank(
      newBank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositary(
      newDepositary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevelopmentFund(
      newDevelopmentFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEarlyWithdrawalFee(
      newEarlyWithdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEarlyWithdrawalPeriod(
      newEarlyWithdrawalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchangeFund(
      newExchangeFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterest(
      newInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationLoanToValueRatio(
      newLiquidationLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidator(
      newLiquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarginCallLoanToValueRatio(
      newMarginCallLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumLiquidity(
      newMinimumLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumMagisterDepositAmount(
      newMinimumMagisterDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumPrincipalAmount(
      newMinimumPrincipalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformFees(
      newStabilizationFee: BigNumberish,
      newExchangeFee: BigNumberish,
      newDevelopmentFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceOracle(
      newPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRebalancingThreshold(
      newRebalancingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setServicingThreshold(
      newServicingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStabilityFee(
      newStabilityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVoice(
      newVoice: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWorkFee(
      newWorkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stabilityFee(overrides?: CallOverrides): Promise<BigNumber>;

    stabilizationFee(overrides?: CallOverrides): Promise<BigNumber>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    voice(overrides?: CallOverrides): Promise<BigNumber>;

    workFee(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedNativeCurrency(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    developmentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    developmentFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earlyWithdrawalFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earlyWithdrawalPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _wrappedNativeCurrency: string,
      _uniswapV2Router: string,
      _operator: string,
      _liquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationLoanToValueRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marginCallLoanToValueRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumMagisterDepositAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumPrincipalAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalancingThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    servicingThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaks(
      newBaks: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBank(
      newBank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositary(
      newDepositary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevelopmentFund(
      newDevelopmentFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEarlyWithdrawalFee(
      newEarlyWithdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEarlyWithdrawalPeriod(
      newEarlyWithdrawalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchangeFund(
      newExchangeFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterest(
      newInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationLoanToValueRatio(
      newLiquidationLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidator(
      newLiquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarginCallLoanToValueRatio(
      newMarginCallLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumLiquidity(
      newMinimumLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumMagisterDepositAmount(
      newMinimumMagisterDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumPrincipalAmount(
      newMinimumPrincipalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFees(
      newStabilizationFee: BigNumberish,
      newExchangeFee: BigNumberish,
      newDevelopmentFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOracle(
      newPriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRebalancingThreshold(
      newRebalancingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setServicingThreshold(
      newServicingThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStabilityFee(
      newStabilityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVoice(
      newVoice: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWorkFee(
      newWorkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stabilityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stabilizationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    workFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrappedNativeCurrency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
