/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type DataStruct = {
  id: BigNumberish;
  isActive: boolean;
  borrower: string;
  collateralToken: string;
  isNativeCurrency: boolean;
  priceOracle: string;
  stabilityFee: BigNumberish;
  stabilizationFee: BigNumberish;
  exchangeFee: BigNumberish;
  developmentFee: BigNumberish;
  principalAmount: BigNumberish;
  collateralAmount: BigNumberish;
  lastDepositAt: BigNumberish;
  lastRepaymentAt: BigNumberish;
};

export type DataStructOutput = [
  BigNumber,
  boolean,
  string,
  string,
  boolean,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  isActive: boolean;
  borrower: string;
  collateralToken: string;
  isNativeCurrency: boolean;
  priceOracle: string;
  stabilityFee: BigNumber;
  stabilizationFee: BigNumber;
  exchangeFee: BigNumber;
  developmentFee: BigNumber;
  principalAmount: BigNumber;
  collateralAmount: BigNumber;
  lastDepositAt: BigNumber;
  lastRepaymentAt: BigNumber;
};

export interface BankInterface extends ethers.utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "borrow(address,uint256)": FunctionFragment;
    "borrowInNativeCurrency(uint256)": FunctionFragment;
    "calculateLoanByCollateralAmount(address,uint256)": FunctionFragment;
    "calculateLoanByPrincipalAmount(address,uint256)": FunctionFragment;
    "calculateLoanBySecurityAmount(address,uint256)": FunctionFragment;
    "checkHealth(uint256)": FunctionFragment;
    "collateralTokens(address)": FunctionFragment;
    "core()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "depositInNativeCurrency(uint256)": FunctionFragment;
    "developmentFund()": FunctionFragment;
    "exchangeFund()": FunctionFragment;
    "getAllowedCollateralTokens()": FunctionFragment;
    "getLoanToValueRatio(uint256)": FunctionFragment;
    "getLoans(address)": FunctionFragment;
    "getTotalValueLocked()": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address)": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "liquidator()": FunctionFragment;
    "listCollateralToken(address,uint256)": FunctionFragment;
    "loanIds(address,uint256)": FunctionFragment;
    "loans(uint256)": FunctionFragment;
    "operator()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "rebalance()": FunctionFragment;
    "repay(uint256,uint256)": FunctionFragment;
    "salvage(address)": FunctionFragment;
    "setInitialLoanToValueRatio(address,uint256)": FunctionFragment;
    "stablecoin()": FunctionFragment;
    "transitGovernance(address,bool)": FunctionFragment;
    "unlistCollateralToken(address)": FunctionFragment;
    "wrappedNativeCurrency()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowInNativeCurrency",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLoanByCollateralAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLoanByPrincipalAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLoanBySecurityAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInNativeCurrency",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "developmentFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedCollateralTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanToValueRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getLoans", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listCollateralToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanIds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "salvage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setInitialLoanToValueRatio",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transitGovernance",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistCollateralToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNativeCurrency",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowInNativeCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLoanByCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLoanByPrincipalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLoanBySecurityAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositInNativeCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developmentFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedCollateralTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanToValueRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLoans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "salvage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInitialLoanToValueRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transitGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlistCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNativeCurrency",
    data: BytesLike
  ): Result;

  events: {
    "Borrow(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "CollateralTokenListed(address)": EventFragment;
    "CollateralTokenUnlisted(address)": EventFragment;
    "Deposit(uint256,uint256)": EventFragment;
    "GovernanceTransited(address,address)": EventFragment;
    "InitialLoanToValueRatioUpdated(address,uint256,uint256)": EventFragment;
    "Liquidated(uint256)": EventFragment;
    "PendingGovernanceTransition(address,address)": EventFragment;
    "Rebalance(int256)": EventFragment;
    "Repaid(uint256)": EventFragment;
    "Repay(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralTokenListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralTokenUnlisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceTransited"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InitialLoanToValueRatioUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingGovernanceTransition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
}

export type BorrowEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  {
    id: BigNumber;
    borrower: string;
    token: string;
    principalAmount: BigNumber;
    collateralAmount: BigNumber;
    initialLoanToValueRatio: BigNumber;
  }
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export type CollateralTokenListedEvent = TypedEvent<
  [string],
  { token: string }
>;

export type CollateralTokenListedEventFilter =
  TypedEventFilter<CollateralTokenListedEvent>;

export type CollateralTokenUnlistedEvent = TypedEvent<
  [string],
  { token: string }
>;

export type CollateralTokenUnlistedEventFilter =
  TypedEventFilter<CollateralTokenUnlistedEvent>;

export type DepositEvent = TypedEvent<
  [BigNumber, BigNumber],
  { id: BigNumber; collateralAmount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type GovernanceTransitedEvent = TypedEvent<
  [string, string],
  { governor: string; newGovernor: string }
>;

export type GovernanceTransitedEventFilter =
  TypedEventFilter<GovernanceTransitedEvent>;

export type InitialLoanToValueRatioUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    token: string;
    initialLoanToValueRatio: BigNumber;
    newInitialLoanToValueRatio: BigNumber;
  }
>;

export type InitialLoanToValueRatioUpdatedEventFilter =
  TypedEventFilter<InitialLoanToValueRatioUpdatedEvent>;

export type LiquidatedEvent = TypedEvent<[BigNumber], { id: BigNumber }>;

export type LiquidatedEventFilter = TypedEventFilter<LiquidatedEvent>;

export type PendingGovernanceTransitionEvent = TypedEvent<
  [string, string],
  { governor: string; newGovernor: string }
>;

export type PendingGovernanceTransitionEventFilter =
  TypedEventFilter<PendingGovernanceTransitionEvent>;

export type RebalanceEvent = TypedEvent<[BigNumber], { delta: BigNumber }>;

export type RebalanceEventFilter = TypedEventFilter<RebalanceEvent>;

export type RepaidEvent = TypedEvent<[BigNumber], { id: BigNumber }>;

export type RepaidEventFilter = TypedEventFilter<RepaidEvent>;

export type RepayEvent = TypedEvent<
  [BigNumber, BigNumber],
  { id: BigNumber; principalAmount: BigNumber }
>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface Bank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      collateralToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowInNativeCurrency(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateLoanByCollateralAmount(
      collateralToken: string,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataStructOutput] & { loan: DataStructOutput }>;

    calculateLoanByPrincipalAmount(
      collateralToken: string,
      principalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataStructOutput] & { loan: DataStructOutput }>;

    calculateLoanBySecurityAmount(
      collateralToken: string,
      securityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataStructOutput] & { loan: DataStructOutput }>;

    checkHealth(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { health: number }>;

    collateralTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        collateralToken: string;
        priceOracle: string;
        stabilityFee: BigNumber;
        stabilizationFee: BigNumber;
        exchangeFee: BigNumber;
        developmentFee: BigNumber;
        initialLoanToValueRatio: BigNumber;
        marginCallLoanToValueRatio: BigNumber;
        liquidationLoanToValueRatio: BigNumber;
        collateralAmount: BigNumber;
      }
    >;

    core(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositInNativeCurrency(
      loanId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    developmentFund(overrides?: CallOverrides): Promise<[string]>;

    exchangeFund(overrides?: CallOverrides): Promise<[string]>;

    getAllowedCollateralTokens(
      overrides?: CallOverrides
    ): Promise<
      [DataStructOutput[]] & { allowedCollateralTokens: DataStructOutput[] }
    >;

    getLoanToValueRatio(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { loanToValueRatio: BigNumber }>;

    getLoans(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[DataStructOutput[]] & { _loans: DataStructOutput[] }>;

    getTotalValueLocked(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalValueLocked: BigNumber }>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _wrappedNativeCurrency: string,
      _core: string,
      _stablecoin: string,
      _priceOracle: string,
      _operator: string,
      _liquidator: string,
      _exchangeFund: string,
      _developmentFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidator(overrides?: CallOverrides): Promise<[string]>;

    listCollateralToken(
      token: string,
      initialLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loanIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        string,
        string,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        isActive: boolean;
        borrower: string;
        collateralToken: string;
        isNativeCurrency: boolean;
        priceOracle: string;
        stabilityFee: BigNumber;
        stabilizationFee: BigNumber;
        exchangeFee: BigNumber;
        developmentFee: BigNumber;
        principalAmount: BigNumber;
        collateralAmount: BigNumber;
        lastDepositAt: BigNumber;
        lastRepaymentAt: BigNumber;
      }
    >;

    operator(overrides?: CallOverrides): Promise<[string]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salvage(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInitialLoanToValueRatio(
      token: string,
      newInitialLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<[string]>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlistCollateralToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrappedNativeCurrency(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    collateralToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowInNativeCurrency(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateLoanByCollateralAmount(
    collateralToken: string,
    collateralAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataStructOutput>;

  calculateLoanByPrincipalAmount(
    collateralToken: string,
    principalAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataStructOutput>;

  calculateLoanBySecurityAmount(
    collateralToken: string,
    securityAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataStructOutput>;

  checkHealth(loanId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  collateralTokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      collateralToken: string;
      priceOracle: string;
      stabilityFee: BigNumber;
      stabilizationFee: BigNumber;
      exchangeFee: BigNumber;
      developmentFee: BigNumber;
      initialLoanToValueRatio: BigNumber;
      marginCallLoanToValueRatio: BigNumber;
      liquidationLoanToValueRatio: BigNumber;
      collateralAmount: BigNumber;
    }
  >;

  core(overrides?: CallOverrides): Promise<string>;

  deposit(
    loanId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositInNativeCurrency(
    loanId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  developmentFund(overrides?: CallOverrides): Promise<string>;

  exchangeFund(overrides?: CallOverrides): Promise<string>;

  getAllowedCollateralTokens(
    overrides?: CallOverrides
  ): Promise<DataStructOutput[]>;

  getLoanToValueRatio(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoans(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<DataStructOutput[]>;

  getTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _wrappedNativeCurrency: string,
    _core: string,
    _stablecoin: string,
    _priceOracle: string,
    _operator: string,
    _liquidator: string,
    _exchangeFund: string,
    _developmentFund: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidator(overrides?: CallOverrides): Promise<string>;

  listCollateralToken(
    token: string,
    initialLoanToValueRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loanIds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  loans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      string,
      string,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      isActive: boolean;
      borrower: string;
      collateralToken: string;
      isNativeCurrency: boolean;
      priceOracle: string;
      stabilityFee: BigNumber;
      stabilizationFee: BigNumber;
      exchangeFee: BigNumber;
      developmentFee: BigNumber;
      principalAmount: BigNumber;
      collateralAmount: BigNumber;
      lastDepositAt: BigNumber;
      lastRepaymentAt: BigNumber;
    }
  >;

  operator(overrides?: CallOverrides): Promise<string>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  rebalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    loanId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salvage(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInitialLoanToValueRatio(
    token: string,
    newInitialLoanToValueRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stablecoin(overrides?: CallOverrides): Promise<string>;

  transitGovernance(
    newGovernor: string,
    force: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlistCollateralToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrappedNativeCurrency(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    borrow(
      collateralToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataStructOutput>;

    borrowInNativeCurrency(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataStructOutput>;

    calculateLoanByCollateralAmount(
      collateralToken: string,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataStructOutput>;

    calculateLoanByPrincipalAmount(
      collateralToken: string,
      principalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataStructOutput>;

    calculateLoanBySecurityAmount(
      collateralToken: string,
      securityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataStructOutput>;

    checkHealth(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    collateralTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        collateralToken: string;
        priceOracle: string;
        stabilityFee: BigNumber;
        stabilizationFee: BigNumber;
        exchangeFee: BigNumber;
        developmentFee: BigNumber;
        initialLoanToValueRatio: BigNumber;
        marginCallLoanToValueRatio: BigNumber;
        liquidationLoanToValueRatio: BigNumber;
        collateralAmount: BigNumber;
      }
    >;

    core(overrides?: CallOverrides): Promise<string>;

    deposit(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositInNativeCurrency(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    developmentFund(overrides?: CallOverrides): Promise<string>;

    exchangeFund(overrides?: CallOverrides): Promise<string>;

    getAllowedCollateralTokens(
      overrides?: CallOverrides
    ): Promise<DataStructOutput[]>;

    getLoanToValueRatio(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoans(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<DataStructOutput[]>;

    getTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(
      _wrappedNativeCurrency: string,
      _core: string,
      _stablecoin: string,
      _priceOracle: string,
      _operator: string,
      _liquidator: string,
      _exchangeFund: string,
      _developmentFund: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(loanId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    liquidator(overrides?: CallOverrides): Promise<string>;

    listCollateralToken(
      token: string,
      initialLoanToValueRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    loanIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        string,
        string,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        isActive: boolean;
        borrower: string;
        collateralToken: string;
        isNativeCurrency: boolean;
        priceOracle: string;
        stabilityFee: BigNumber;
        stabilizationFee: BigNumber;
        exchangeFee: BigNumber;
        developmentFee: BigNumber;
        principalAmount: BigNumber;
        collateralAmount: BigNumber;
        lastDepositAt: BigNumber;
        lastRepaymentAt: BigNumber;
      }
    >;

    operator(overrides?: CallOverrides): Promise<string>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    repay(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    salvage(token: string, overrides?: CallOverrides): Promise<void>;

    setInitialLoanToValueRatio(
      token: string,
      newInitialLoanToValueRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stablecoin(overrides?: CallOverrides): Promise<string>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    unlistCollateralToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wrappedNativeCurrency(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Borrow(uint256,address,address,uint256,uint256,uint256)"(
      id?: BigNumberish | null,
      borrower?: string | null,
      token?: string | null,
      principalAmount?: null,
      collateralAmount?: null,
      initialLoanToValueRatio?: null
    ): BorrowEventFilter;
    Borrow(
      id?: BigNumberish | null,
      borrower?: string | null,
      token?: string | null,
      principalAmount?: null,
      collateralAmount?: null,
      initialLoanToValueRatio?: null
    ): BorrowEventFilter;

    "CollateralTokenListed(address)"(
      token?: string | null
    ): CollateralTokenListedEventFilter;
    CollateralTokenListed(
      token?: string | null
    ): CollateralTokenListedEventFilter;

    "CollateralTokenUnlisted(address)"(
      token?: string | null
    ): CollateralTokenUnlistedEventFilter;
    CollateralTokenUnlisted(
      token?: string | null
    ): CollateralTokenUnlistedEventFilter;

    "Deposit(uint256,uint256)"(
      id?: BigNumberish | null,
      collateralAmount?: null
    ): DepositEventFilter;
    Deposit(
      id?: BigNumberish | null,
      collateralAmount?: null
    ): DepositEventFilter;

    "GovernanceTransited(address,address)"(
      governor?: string | null,
      newGovernor?: string | null
    ): GovernanceTransitedEventFilter;
    GovernanceTransited(
      governor?: string | null,
      newGovernor?: string | null
    ): GovernanceTransitedEventFilter;

    "InitialLoanToValueRatioUpdated(address,uint256,uint256)"(
      token?: string | null,
      initialLoanToValueRatio?: null,
      newInitialLoanToValueRatio?: null
    ): InitialLoanToValueRatioUpdatedEventFilter;
    InitialLoanToValueRatioUpdated(
      token?: string | null,
      initialLoanToValueRatio?: null,
      newInitialLoanToValueRatio?: null
    ): InitialLoanToValueRatioUpdatedEventFilter;

    "Liquidated(uint256)"(id?: BigNumberish | null): LiquidatedEventFilter;
    Liquidated(id?: BigNumberish | null): LiquidatedEventFilter;

    "PendingGovernanceTransition(address,address)"(
      governor?: string | null,
      newGovernor?: string | null
    ): PendingGovernanceTransitionEventFilter;
    PendingGovernanceTransition(
      governor?: string | null,
      newGovernor?: string | null
    ): PendingGovernanceTransitionEventFilter;

    "Rebalance(int256)"(delta?: null): RebalanceEventFilter;
    Rebalance(delta?: null): RebalanceEventFilter;

    "Repaid(uint256)"(id?: BigNumberish | null): RepaidEventFilter;
    Repaid(id?: BigNumberish | null): RepaidEventFilter;

    "Repay(uint256,uint256)"(
      id?: BigNumberish | null,
      principalAmount?: null
    ): RepayEventFilter;
    Repay(id?: BigNumberish | null, principalAmount?: null): RepayEventFilter;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      collateralToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowInNativeCurrency(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateLoanByCollateralAmount(
      collateralToken: string,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLoanByPrincipalAmount(
      collateralToken: string,
      principalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLoanBySecurityAmount(
      collateralToken: string,
      securityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkHealth(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositInNativeCurrency(
      loanId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    developmentFund(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeFund(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedCollateralTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getLoanToValueRatio(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoans(borrower: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _wrappedNativeCurrency: string,
      _core: string,
      _stablecoin: string,
      _priceOracle: string,
      _operator: string,
      _liquidator: string,
      _exchangeFund: string,
      _developmentFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidator(overrides?: CallOverrides): Promise<BigNumber>;

    listCollateralToken(
      token: string,
      initialLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loanIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loans(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salvage(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInitialLoanToValueRatio(
      token: string,
      newInitialLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stablecoin(overrides?: CallOverrides): Promise<BigNumber>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlistCollateralToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrappedNativeCurrency(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      collateralToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowInNativeCurrency(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateLoanByCollateralAmount(
      collateralToken: string,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLoanByPrincipalAmount(
      collateralToken: string,
      principalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLoanBySecurityAmount(
      collateralToken: string,
      securityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkHealth(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositInNativeCurrency(
      loanId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    developmentFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllowedCollateralTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanToValueRatio(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoans(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalValueLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _wrappedNativeCurrency: string,
      _core: string,
      _stablecoin: string,
      _priceOracle: string,
      _operator: string,
      _liquidator: string,
      _exchangeFund: string,
      _developmentFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listCollateralToken(
      token: string,
      initialLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loanIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salvage(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInitialLoanToValueRatio(
      token: string,
      newInitialLoanToValueRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlistCollateralToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrappedNativeCurrency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
