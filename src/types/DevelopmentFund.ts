/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DevelopmentFundInterface extends utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "core()": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "transitGovernance(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transitGovernance",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitGovernance",
    data: BytesLike
  ): Result;

  events: {
    "GovernanceTransited(address,address)": EventFragment;
    "PendingGovernanceTransition(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernanceTransited"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingGovernanceTransition"
  ): EventFragment;
}

export type GovernanceTransitedEvent = TypedEvent<
  [string, string],
  { governor: string; newGovernor: string }
>;

export type GovernanceTransitedEventFilter =
  TypedEventFilter<GovernanceTransitedEvent>;

export type PendingGovernanceTransitionEvent = TypedEvent<
  [string, string],
  { governor: string; newGovernor: string }
>;

export type PendingGovernanceTransitionEventFilter =
  TypedEventFilter<PendingGovernanceTransitionEvent>;

export interface DevelopmentFund extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DevelopmentFundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    core(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  core(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _core: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  transitGovernance(
    newGovernor: string,
    force: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    core(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(_core: string, overrides?: CallOverrides): Promise<void>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GovernanceTransited(address,address)"(
      governor?: string | null,
      newGovernor?: string | null
    ): GovernanceTransitedEventFilter;
    GovernanceTransited(
      governor?: string | null,
      newGovernor?: string | null
    ): GovernanceTransitedEventFilter;

    "PendingGovernanceTransition(address,address)"(
      governor?: string | null,
      newGovernor?: string | null
    ): PendingGovernanceTransitionEventFilter;
    PendingGovernanceTransition(
      governor?: string | null,
      newGovernor?: string | null
    ): PendingGovernanceTransitionEventFilter;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transitGovernance(
      newGovernor: string,
      force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
