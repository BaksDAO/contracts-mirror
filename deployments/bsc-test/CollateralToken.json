{
  "address": "0x5b77C87b2121ef9b0F3F09bfa3fC91AC3737B1c3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "FixedPointMathMulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "IERC20"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "IPriceOracle"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marginCallLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CollateralToken.Data",
          "name": "self",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanByCollateralAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "IERC20"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "IPriceOracle"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "IERC20"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "IPriceOracle"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marginCallLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CollateralToken.Data",
          "name": "self",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanByPrincipalAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "IERC20"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "IPriceOracle"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "IERC20"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "IPriceOracle"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marginCallLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CollateralToken.Data",
          "name": "self",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "securityAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanBySecurityAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "IERC20"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "IPriceOracle"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x411ec5f8d18f4a3a2eeaf95887eafbb94c18a21231e4470bd69e8b40da8e023b",
  "receipt": {
    "to": null,
    "from": "0x21309DA9AD64eA82431758B27cbD63E5d53A556c",
    "contractAddress": "0x5b77C87b2121ef9b0F3F09bfa3fC91AC3737B1c3",
    "transactionIndex": 0,
    "gasUsed": "597901",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6156523700b747f3a7e6054baad64836350332af592e4a030abf7baae5eb8d9c",
    "transactionHash": "0x411ec5f8d18f4a3a2eeaf95887eafbb94c18a21231e4470bd69e8b40da8e023b",
    "logs": [],
    "blockNumber": 13128673,
    "cumulativeGasUsed": "597901",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37e44ceb5ade6fd628df41eb5d70582d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FixedPointMathMulDivOverflow\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"IERC20\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"IPriceOracle\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginCallLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralToken.Data\",\"name\":\"self\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanByCollateralAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"IERC20\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"IPriceOracle\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"IERC20\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"IPriceOracle\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginCallLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralToken.Data\",\"name\":\"self\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanByPrincipalAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"IERC20\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"IPriceOracle\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"IERC20\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"IPriceOracle\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginCallLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralToken.Data\",\"name\":\"self\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"securityAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanBySecurityAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"IERC20\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"IPriceOracle\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/CollateralToken.sol\":\"CollateralToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IMintableAndBurnableERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x555b3bf9906cdd22fd702e227764b81c027180c0af11c48222ba6273441c63f3\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./../libraries/FixedPointMath.sol\\\";\\n\\n/// @notice Thrown when oracle doesn't provide price for `token` token.\\n/// @param token The address of the token contract.\\nerror PriceOracleTokenUnknown(IERC20 token);\\n/// @notice Thrown when oracle provide stale price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleStalePrice(IERC20 token, uint256 price);\\n/// @notice Thrown when oracle provide negative, zero or in other ways invalid price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleInvalidPrice(IERC20 token, int256 price);\\n\\ninterface IPriceOracle {\\n    /// @notice Gets normalized to 18 decimals price for the `token` token.\\n    /// @param token The address of the token contract.\\n    /// @return normalizedPrice Normalized price.\\n    function getNormalizedPrice(IERC20 token) external view returns (uint256 normalizedPrice);\\n}\\n\",\"keccak256\":\"0x21c070369f7fe028994543eb4963d468e0968a6e088ee66d50ffdf05774ed202\",\"license\":\"MIT\"},\"contracts/libraries/CollateralToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport \\\"./Loan.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary CollateralToken {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        IERC20 collateralToken;\\n        IPriceOracle priceOracle;\\n        uint256 stabilityFee;\\n        uint256 stabilizationFee;\\n        uint256 exchangeFee;\\n        uint256 investmentFee;\\n        uint256 initialLoanToValueRatio;\\n        uint256 marginCallLoanToValueRatio;\\n        uint256 liquidationLoanToValueRatio;\\n        uint256 collateralAmount;\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n\\n    function calculateLoanByPrincipalAmount(Data memory self, uint256 principalAmount)\\n        public\\n        view\\n        returns (Loan.Data memory)\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n\\n        uint256 restOfIssuance = principalAmount.mul(ONE - self.initialLoanToValueRatio).div(\\n            self.initialLoanToValueRatio\\n        );\\n        uint256 stabilizationFee = restOfIssuance.mul(self.stabilizationFee);\\n        uint256 exchangeFee = restOfIssuance.mul(self.exchangeFee);\\n        uint256 investmentFee = restOfIssuance.mul(self.investmentFee);\\n\\n        uint256 collateralAmount = principalAmount.div(self.initialLoanToValueRatio.mul(collateralTokenPrice));\\n        uint256 stabilityFee = self.stabilityFee.mul(principalAmount).div(collateralTokenPrice);\\n\\n        return\\n            Loan.Data({\\n                id: 0,\\n                isActive: true,\\n                borrower: msg.sender,\\n                collateralToken: self.collateralToken,\\n                isNativeCurrency: false,\\n                priceOracle: self.priceOracle,\\n                stabilityFee: stabilityFee,\\n                stabilizationFee: stabilizationFee,\\n                exchangeFee: exchangeFee,\\n                investmentFee: investmentFee,\\n                principalAmount: principalAmount,\\n                collateralAmount: collateralAmount,\\n                lastDepositAt: block.timestamp,\\n                lastRepaymentAt: block.timestamp\\n            });\\n    }\\n\\n    function calculateLoanByCollateralAmount(Data memory self, uint256 collateralAmount)\\n        public\\n        view\\n        returns (Loan.Data memory)\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        uint256 principalAmount = collateralAmount.mul(self.initialLoanToValueRatio).mul(collateralTokenPrice);\\n\\n        uint256 restOfIssuance = principalAmount.mul(ONE - self.initialLoanToValueRatio).div(\\n            self.initialLoanToValueRatio\\n        );\\n        uint256 stabilizationFee = restOfIssuance.mul(self.stabilizationFee);\\n        uint256 exchangeFee = restOfIssuance.mul(self.exchangeFee);\\n        uint256 investmentFee = restOfIssuance.mul(self.investmentFee);\\n\\n        uint256 stabilityFee = self.stabilityFee.mul(principalAmount).div(collateralTokenPrice);\\n\\n        return\\n            Loan.Data({\\n                id: 0,\\n                isActive: true,\\n                borrower: msg.sender,\\n                collateralToken: self.collateralToken,\\n                isNativeCurrency: false,\\n                priceOracle: self.priceOracle,\\n                stabilityFee: stabilityFee,\\n                stabilizationFee: stabilizationFee,\\n                exchangeFee: exchangeFee,\\n                investmentFee: investmentFee,\\n                principalAmount: principalAmount,\\n                collateralAmount: collateralAmount,\\n                lastDepositAt: block.timestamp,\\n                lastRepaymentAt: block.timestamp\\n            });\\n    }\\n\\n    function calculateLoanBySecurityAmount(Data memory self, uint256 securityAmount)\\n        public\\n        view\\n        returns (Loan.Data memory)\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        uint256 c = self.stabilityFee.mul(self.initialLoanToValueRatio);\\n        uint256 principalAmount = securityAmount.mul(self.initialLoanToValueRatio).mul(collateralTokenPrice).div(\\n            c + ONE\\n        );\\n        return calculateLoanByPrincipalAmount(self, principalAmount);\\n    }\\n\\n    function getCollateralValue(Data memory self) internal view returns (uint256 collateralValue) {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        collateralValue = self.collateralAmount.mul(collateralTokenPrice);\\n    }\\n}\\n\",\"keccak256\":\"0x338b116e1e1e16406d9eb032cda64dc013c00e251bb97b65aed94852c9148c3b\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nerror FixedPointMathMulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @title Fixed point math implementation\\nlibrary FixedPointMath {\\n    uint256 internal constant SCALE = 1e18;\\n    /// @dev Largest power of two divisor of scale.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n    /// @dev Scale inverted mod 2**256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert FixedPointMathMulDivOverflow(prod1, SCALE);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(a, b, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := add(div(prod0, SCALE), roundUpUnit)\\n            }\\n            return result;\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        result = mulDiv(a, SCALE, b);\\n    }\\n\\n    /// @notice Calculates \\u230aa \\u00d7 b \\u00f7 denominator\\u230b with full precision.\\n    /// @dev Credit to Remco Bloemen under MIT license https://2\\u03c0.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= denominator) {\\n            revert FixedPointMathMulDivOverflow(prod1, denominator);\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        unchecked {\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                denominator := div(denominator, lpotdod)\\n                prod0 := div(prod0, lpotdod)\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n            prod0 |= prod1 * lpotdod;\\n\\n            uint256 inverse = (3 * denominator) ^ 2;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n\\n            result = prod0 * inverse;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d0813682bbe12845de0111298ec16fb9ebf5ac404cce4bee155a455fa547eb4\",\"license\":\"MIT\"},\"contracts/libraries/Loan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Loan {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        uint256 id;\\n        bool isActive;\\n        address borrower;\\n        IERC20 collateralToken;\\n        bool isNativeCurrency;\\n        IPriceOracle priceOracle;\\n        uint256 stabilityFee;\\n        uint256 stabilizationFee;\\n        uint256 exchangeFee;\\n        uint256 investmentFee;\\n        uint256 principalAmount;\\n        uint256 collateralAmount;\\n        uint256 lastDepositAt;\\n        uint256 lastRepaymentAt;\\n    }\\n\\n    function getCollateralValue(Data memory self) internal view returns (uint256 collateralValue) {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        collateralValue = self.collateralAmount.mul(collateralTokenPrice);\\n    }\\n\\n    function calculateLoanToValueRatio(Data memory self) internal view returns (uint256 loanToValueRatio) {\\n        if (self.principalAmount == 0) {\\n            return 0;\\n        }\\n        if (self.collateralAmount == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        loanToValueRatio = self.principalAmount.div(getCollateralValue(self));\\n    }\\n}\\n\",\"keccak256\":\"0x8fa04f3f18ab9719d3bac5b448e91c1020c3f3af4bb5ae6d2d974844c9941239\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6109db61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063aea37f6614610050578063b951bd1114610079578063e33d5c9a1461008c575b600080fd5b61006361005e3660046107e8565b61009f565b6040516100709190610890565b60405180910390f35b6100636100873660046107e8565b61028c565b61006361009a3660046107e8565b610382565b6100a7610706565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000929190911690631e1f12649060240160206040518083038186803b1580156100f457600080fd5b505afa158015610108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012c9190610970565b905060006101518261014b8760c001518761055a90919063ffffffff16565b9061055a565b60c08601519091506000906101829061017c61017582670de0b6b3a764000061099f565b859061055a565b9061062f565b9050600061019d87606001518361055a90919063ffffffff16565b905060006101b888608001518461055a90919063ffffffff16565b905060006101d38960a001518561055a90919063ffffffff16565b905060006101f28761017c888d6040015161055a90919063ffffffff16565b9050604051806101c0016040528060008152602001600115158152602001336001600160a01b031681526020018b600001516001600160a01b031681526020016000151581526020018b602001516001600160a01b031681526020018281526020018581526020018481526020018381526020018781526020018a8152602001428152602001428152509750505050505050505b92915050565b610294610706565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000929190911690631e1f12649060240160206040518083038186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103199190610970565b905060006103388560c00151866040015161055a90919063ffffffff16565b9050600061036c610351670de0b6b3a7640000846109b6565b61017c8561014b8a60c001518a61055a90919063ffffffff16565b90506103788682610382565b9695505050505050565b61038a610706565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000929190911690631e1f12649060240160206040518083038186803b1580156103d757600080fd5b505afa1580156103eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040f9190610970565b60c085015190915060009061043a9061017c61043382670de0b6b3a764000061099f565b879061055a565b9050600061045586606001518361055a90919063ffffffff16565b9050600061047087608001518461055a90919063ffffffff16565b9050600061048b8860a001518561055a90919063ffffffff16565b905060006104b06104a9878b60c0015161055a90919063ffffffff16565b899061062f565b905060006104cf8761017c8b8d6040015161055a90919063ffffffff16565b604080516101c0810182526000808252600160208084019190915233938301939093528d516001600160a01b03908116606084015260808301919091529c90910151909b1660a08c015260c08b01525060e08901939093526101008801919091526101208701526101408601949094525050506101608201524261018082018190526101a082015290565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106105b15760405163072fa3c960e31b815260048101829052670de0b6b3a764000060248201526044015b60405180910390fd5b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826105eb5780670de0b6b3a7640000850401945050505050610286565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600061064483670de0b6b3a76400008461064b565b9392505050565b6000808060001985870985870292508281108382030391505083811061068e5760405163072fa3c960e31b815260048101829052602481018590526044016105a8565b8061069e57508290049050610644565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b604051806101c001604052806000815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051610140810167ffffffffffffffff811182821017156107c657634e487b7160e01b600052604160045260246000fd5b60405290565b80356001600160a01b03811681146107e357600080fd5b919050565b6000808284036101608112156107fd57600080fd5b6101408082121561080d57600080fd5b610815610794565b9150610820856107cc565b825261082e602086016107cc565b602083015260408581013590830152606080860135908301526080808601359083015260a0808601359083015260c0808601359083015260e0808601359083015261010080860135908301526101208086013590830152909593013593505050565b815181526020808301516101c08301916108ad9084018215159052565b5060408301516108c860408401826001600160a01b03169052565b5060608301516108e360608401826001600160a01b03169052565b5060808301516108f7608084018215159052565b5060a083015161091260a08401826001600160a01b03169052565b5060c0838101519083015260e08084015190830152610100808401519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a092830151929091019190915290565b60006020828403121561098257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156109b1576109b1610989565b500390565b600082198211156109c9576109c9610989565b50019056fea164736f6c6343000809000a",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063aea37f6614610050578063b951bd1114610079578063e33d5c9a1461008c575b600080fd5b61006361005e3660046107e8565b61009f565b6040516100709190610890565b60405180910390f35b6100636100873660046107e8565b61028c565b61006361009a3660046107e8565b610382565b6100a7610706565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000929190911690631e1f12649060240160206040518083038186803b1580156100f457600080fd5b505afa158015610108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012c9190610970565b905060006101518261014b8760c001518761055a90919063ffffffff16565b9061055a565b60c08601519091506000906101829061017c61017582670de0b6b3a764000061099f565b859061055a565b9061062f565b9050600061019d87606001518361055a90919063ffffffff16565b905060006101b888608001518461055a90919063ffffffff16565b905060006101d38960a001518561055a90919063ffffffff16565b905060006101f28761017c888d6040015161055a90919063ffffffff16565b9050604051806101c0016040528060008152602001600115158152602001336001600160a01b031681526020018b600001516001600160a01b031681526020016000151581526020018b602001516001600160a01b031681526020018281526020018581526020018481526020018381526020018781526020018a8152602001428152602001428152509750505050505050505b92915050565b610294610706565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000929190911690631e1f12649060240160206040518083038186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103199190610970565b905060006103388560c00151866040015161055a90919063ffffffff16565b9050600061036c610351670de0b6b3a7640000846109b6565b61017c8561014b8a60c001518a61055a90919063ffffffff16565b90506103788682610382565b9695505050505050565b61038a610706565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000929190911690631e1f12649060240160206040518083038186803b1580156103d757600080fd5b505afa1580156103eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040f9190610970565b60c085015190915060009061043a9061017c61043382670de0b6b3a764000061099f565b879061055a565b9050600061045586606001518361055a90919063ffffffff16565b9050600061047087608001518461055a90919063ffffffff16565b9050600061048b8860a001518561055a90919063ffffffff16565b905060006104b06104a9878b60c0015161055a90919063ffffffff16565b899061062f565b905060006104cf8761017c8b8d6040015161055a90919063ffffffff16565b604080516101c0810182526000808252600160208084019190915233938301939093528d516001600160a01b03908116606084015260808301919091529c90910151909b1660a08c015260c08b01525060e08901939093526101008801919091526101208701526101408601949094525050506101608201524261018082018190526101a082015290565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106105b15760405163072fa3c960e31b815260048101829052670de0b6b3a764000060248201526044015b60405180910390fd5b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826105eb5780670de0b6b3a7640000850401945050505050610286565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600061064483670de0b6b3a76400008461064b565b9392505050565b6000808060001985870985870292508281108382030391505083811061068e5760405163072fa3c960e31b815260048101829052602481018590526044016105a8565b8061069e57508290049050610644565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b604051806101c001604052806000815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051610140810167ffffffffffffffff811182821017156107c657634e487b7160e01b600052604160045260246000fd5b60405290565b80356001600160a01b03811681146107e357600080fd5b919050565b6000808284036101608112156107fd57600080fd5b6101408082121561080d57600080fd5b610815610794565b9150610820856107cc565b825261082e602086016107cc565b602083015260408581013590830152606080860135908301526080808601359083015260a0808601359083015260c0808601359083015260e0808601359083015261010080860135908301526101208086013590830152909593013593505050565b815181526020808301516101c08301916108ad9084018215159052565b5060408301516108c860408401826001600160a01b03169052565b5060608301516108e360608401826001600160a01b03169052565b5060808301516108f7608084018215159052565b5060a083015161091260a08401826001600160a01b03169052565b5060c0838101519083015260e08084015190830152610100808401519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a092830151929091019190915290565b60006020828403121561098257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156109b1576109b1610989565b500390565b600082198211156109c9576109c9610989565b50019056fea164736f6c6343000809000a",
  "libraries": {
    "FixedPointMath": "0x8caF0dE4A26Bbcf38c1DDa4FbF3699D3c512a662"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}