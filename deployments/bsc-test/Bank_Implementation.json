{
  "address": "0xC21554456FAC7bCcFa5691800908542291889d0A",
  "abi": [
    {
      "inputs": [],
      "name": "BaksDAOBorrowBelowMinimumPrincipalAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOBorrowZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOCollateralTokenAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOCollateralTokenNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "BaksDAOCollateralTokenTooLargeDecimals",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOCollateralTokenZeroDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAODepositZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOInactiveLoan",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOInitialLoanToValueRatioTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumRequiredSecurityAmount",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOInsufficientSecurityAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOLoanIsSubjectToLiquidation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOLoanNotSubjectToLiquidation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAONativeCurrencyCollateralNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAONativeCurrencyTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAONoNeedToRebalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOPlainNativeCurrencyTransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAORepayZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shortage",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOStabilizationFundOutOfFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOTokenNotAllowedAsCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOTokenNotAllowedToBeSalvaged",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "CallToNonContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "FixedPointMathMulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedCantGoverItself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedGovernorZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyPendingGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeERC20NoReturnData",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CollateralTokenListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CollateralTokenUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernanceTransited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInitialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "InitialLoanToValueRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceTransition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "delta",
          "type": "int256"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Repaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrowInNativeCurrency",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanByCollateralAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanByPrincipalAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "securityAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanBySecurityAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "checkHealth",
      "outputs": [
        {
          "internalType": "enum Bank.Health",
          "name": "health",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stabilizationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "developmentFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marginCallLoanToValueRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationLoanToValueRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "depositInNativeCurrency",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developmentFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedCollateralTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marginCallLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CollateralToken.Data[]",
          "name": "allowedCollateralTokens",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanToValueRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanToValueRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "getLoans",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data[]",
          "name": "_loans",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValueLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWrappedNativeCurrency",
          "name": "_wrappedNativeCurrency",
          "type": "address"
        },
        {
          "internalType": "contract ICore",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "contract IMintableAndBurnableERC20",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeFund",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_developmentFund",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "listCollateralToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loanIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isNativeCurrency",
          "type": "bool"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stabilizationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "developmentFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRepaymentAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "salvage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newInitialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "setInitialLoanToValueRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IMintableAndBurnableERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        }
      ],
      "name": "transitGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unlistCollateralToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeCurrency",
      "outputs": [
        {
          "internalType": "contract IWrappedNativeCurrency",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdf76f50095c117270646f803f75571fc516c8d9a08c8748d474e3b1c2ec0d0a9",
  "receipt": {
    "to": null,
    "from": "0x21309DA9AD64eA82431758B27cbD63E5d53A556c",
    "contractAddress": "0xC21554456FAC7bCcFa5691800908542291889d0A",
    "transactionIndex": 6,
    "gasUsed": "4069637",
    "logsBloom": "0x
    "blockHash": "0x46c702bd2099fd8efe5127bf49868a622868c45c177f42e00cc583b80fa3b18f",
    "transactionHash": "0xdf76f50095c117270646f803f75571fc516c8d9a08c8748d474e3b1c2ec0d0a9",
    "logs": [],
    "blockNumber": 13816273,
    "cumulativeGasUsed": "8950811",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e55ff2d5620125d078bf2822362bfb18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaksDAOBorrowBelowMinimumPrincipalAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOBorrowZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOCollateralTokenAlreadyListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOCollateralTokenNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"BaksDAOCollateralTokenTooLargeDecimals\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOCollateralTokenZeroDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAODepositZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAOInactiveLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"BaksDAOInitialLoanToValueRatioTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumRequiredSecurityAmount\",\"type\":\"uint256\"}],\"name\":\"BaksDAOInsufficientSecurityAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAOLoanIsSubjectToLiquidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAOLoanNotSubjectToLiquidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAONativeCurrencyCollateralNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAONativeCurrencyTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAONoNeedToRebalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOPlainNativeCurrencyTransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAORepayZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shortage\",\"type\":\"uint256\"}],\"name\":\"BaksDAOStabilizationFundOutOfFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOTokenNotAllowedAsCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOTokenNotAllowedToBeSalvaged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"CallToNonContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FixedPointMathMulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedCantGoverItself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedGovernorZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyPendingGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeERC20NoReturnData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CollateralTokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CollateralTokenUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernanceTransited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInitialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"InitialLoanToValueRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernanceTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrowInNativeCurrency\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanByCollateralAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"loan\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanByPrincipalAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"loan\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"securityAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanBySecurityAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"loan\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"checkHealth\",\"outputs\":[{\"internalType\":\"enum Bank.Health\",\"name\":\"health\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginCallLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"depositInNativeCurrency\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedCollateralTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginCallLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralToken.Data[]\",\"name\":\"allowedCollateralTokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanToValueRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanToValueRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getLoans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data[]\",\"name\":\"_loans\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWrappedNativeCurrency\",\"name\":\"_wrappedNativeCurrency\",\"type\":\"address\"},{\"internalType\":\"contract ICore\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IMintableAndBurnableERC20\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developmentFund\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"listCollateralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newInitialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"setInitialLoanToValueRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IMintableAndBurnableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"transitGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unlistCollateralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeCurrency\",\"outputs\":[{\"internalType\":\"contract IWrappedNativeCurrency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Andrey Gulitsky\",\"errors\":{\"BaksDAOBorrowBelowMinimumPrincipalAmount()\":[{\"details\":\"Thrown when trying to borrow below minimum principal amount.\"}],\"BaksDAOBorrowZeroAmount()\":[{\"details\":\"Thrown when borrowing a zero amount of stablecoin.\"}],\"BaksDAOCollateralTokenAlreadyListed(address)\":[{\"details\":\"Thrown when trying to list collateral token that's already listed.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOCollateralTokenNotListed(address)\":[{\"details\":\"Thrown when trying to unlist collateral token that's not listed.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOCollateralTokenTooLargeDecimals(address,uint8)\":[{\"details\":\"Thrown when trying to list collateral token that has too large decimals.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOCollateralTokenZeroDecimals(address)\":[{\"details\":\"Thrown when trying to list collateral token that has zero decimals.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAODepositZeroAmount()\":[{\"details\":\"Thrown when depositing a zero amount of collateral token.\"}],\"BaksDAOInactiveLoan(uint256)\":[{\"details\":\"Thrown when trying to interact with inactive loan with `id` id.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAOInitialLoanToValueRatioTooHigh(address,uint256)\":[{\"details\":\"Thrown when trying to set initial loan-to-value ratio that higher than margin call or liquidation ones.\",\"params\":{\"initialLoanToValueRatio\":\"The initial loan-to-value ratio that was tried to set.\",\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOLoanIsSubjectToLiquidation(uint256)\":[{\"details\":\"Thrown when trying to interact with loan with `id` id that is subject to liquidation.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAOLoanNotSubjectToLiquidation(uint256)\":[{\"details\":\"Thrown when trying to liquidate healthy loan with `id` id.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAONativeCurrencyCollateralNotAllowed(uint256)\":[{\"details\":\"Thrown when trying to deposit native currency collateral to the non-wrapped native currency token loan with `id` id.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAONoNeedToRebalance()\":[{\"details\":\"Thrown when there's no need to rebalance the platform.\"}],\"BaksDAORepayZeroAmount()\":[{\"details\":\"Thrown when repaying a zero amount of stablecoin.\"}],\"BaksDAOStabilizationFundOutOfFunds(uint256)\":[{\"details\":\"Thrown when trying to rebalance the platform and there is a shortage of funds to burn.\",\"params\":{\"shortage\":\"Shoratge of funds to burn.\"}}],\"BaksDAOTokenNotAllowedAsCollateral(address)\":[{\"details\":\"Thrown when interacting with a token that's not allowed as collateral.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOTokenNotAllowedToBeSalvaged(address)\":[{\"details\":\"Thrown when trying to salvage one of allowed collateral tokens or stablecoin.\",\"params\":{\"token\":\"The address of the token contract.\"}}]},\"kind\":\"dev\",\"methods\":{\"borrow(address,uint256)\":{\"details\":\"The caller must have allowed this contract to spend a sufficient amount of collateral tokens to cover initial loan-to-value ratio.\",\"params\":{\"amount\":\"The amount of stablecoin to borrow and issue.\",\"collateralToken\":\"The address of the collateral token contract.\"}},\"deposit(uint256,uint256)\":{\"details\":\"The caller must have allowed this contract to spend `amount` of collateral tokens.\",\"params\":{\"amount\":\"The amount of collateral token to deposit.\",\"loanId\":\"The loan id.\"}},\"repay(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of stablecoin to repay.\",\"loanId\":\"The loan id.\"}}},\"title\":\"Core smart contract of BaksDAO platform\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(address,uint256)\":{\"notice\":\"Increases loan's principal on `collateralToken` collateral token and mints `amount` of stablecoin.\"},\"borrowInNativeCurrency(uint256)\":{\"notice\":\"Increases loan's principal on wrapped native currency token and mints stablecoin.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposits `amount` of collateral token to loan with `id` id.\"},\"depositInNativeCurrency(uint256)\":{\"notice\":\"Deposits wrapped native currency token to loan with `id` id.\"},\"repay(uint256,uint256)\":{\"notice\":\"Decreases principal of loan with `id` id by `amount` of stablecoin.\"}},\"notice\":\"You should use this contract to interact with the BaksDAO platform.Only this contract can issue stablecoins.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bank.sol\":\"Bank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"./interfaces/IWrappedNativeCurrency.sol\\\";\\nimport \\\"./libraries/AmountNormalization.sol\\\";\\nimport \\\"./libraries/CollateralToken.sol\\\";\\nimport \\\"./libraries/EnumerableAddressSet.sol\\\";\\nimport \\\"./libraries/FixedPointMath.sol\\\";\\nimport \\\"./libraries/Loan.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\nimport {ICore} from \\\"./Core.sol\\\";\\nimport {IERC20, IMintableAndBurnableERC20} from \\\"./interfaces/ERC20.sol\\\";\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {IPriceOracle} from \\\"./interfaces/IPriceOracle.sol\\\";\\n\\n/// @dev Thrown when trying to list collateral token that has zero decimals.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenZeroDecimals(IERC20 token);\\n\\n/// @dev Thrown when trying to list collateral token that has too large decimals.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenTooLargeDecimals(IERC20 token, uint8 decimals);\\n\\n/// @dev Thrown when trying to list collateral token that's already listed.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenAlreadyListed(IERC20 token);\\n\\n/// @dev Thrown when trying to unlist collateral token that's not listed.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenNotListed(IERC20 token);\\n\\n/// @dev Thrown when interacting with a token that's not allowed as collateral.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOTokenNotAllowedAsCollateral(IERC20 token);\\n\\n/// @dev Thrown when trying to set initial loan-to-value ratio that higher than margin call or liquidation ones.\\n/// @param token The address of the collateral token contract.\\n/// @param initialLoanToValueRatio The initial loan-to-value ratio that was tried to set.\\nerror BaksDAOInitialLoanToValueRatioTooHigh(IERC20 token, uint256 initialLoanToValueRatio);\\n\\n/// @dev Thrown when trying to interact with inactive loan with `id` id.\\n/// @param id The loan id.\\nerror BaksDAOInactiveLoan(uint256 id);\\n\\n/// @dev Thrown when trying to liquidate healthy loan with `id` id.\\n/// @param id The loan id.\\nerror BaksDAOLoanNotSubjectToLiquidation(uint256 id);\\n/// @dev Thrown when trying to interact with loan with `id` id that is subject to liquidation.\\n/// @param id The loan id.\\nerror BaksDAOLoanIsSubjectToLiquidation(uint256 id);\\n\\n/// @dev Thrown when borrowing a zero amount of stablecoin.\\nerror BaksDAOBorrowZeroAmount();\\n\\n/// @dev Thrown when trying to borrow below minimum principal amount.\\nerror BaksDAOBorrowBelowMinimumPrincipalAmount();\\n\\n/// @dev Thrown when depositing a zero amount of collateral token.\\nerror BaksDAODepositZeroAmount();\\n\\n/// @dev Thrown when repaying a zero amount of stablecoin.\\nerror BaksDAORepayZeroAmount();\\n\\n/// @dev Thrown when there's no need to rebalance the platform.\\nerror BaksDAONoNeedToRebalance();\\n\\n/// @dev Thrown when trying to rebalance the platform and there is a shortage of funds to burn.\\n/// @param shortage Shoratge of funds to burn.\\nerror BaksDAOStabilizationFundOutOfFunds(uint256 shortage);\\n\\n/// @dev Thrown when trying to salvage one of allowed collateral tokens or stablecoin.\\n/// @param token The address of the token contract.\\nerror BaksDAOTokenNotAllowedToBeSalvaged(IERC20 token);\\n\\n/// @dev Thrown when trying to deposit native currency collateral to the non-wrapped native currency token loan\\n/// with `id` id.\\n/// @param id The loan id.\\nerror BaksDAONativeCurrencyCollateralNotAllowed(uint256 id);\\n\\nerror BaksDAONativeCurrencyTransferFailed();\\n\\nerror BaksDAOPlainNativeCurrencyTransferNotAllowed();\\n\\nerror BaksDAOInsufficientSecurityAmount(uint256 minimumRequiredSecurityAmount);\\n\\n/// @title Core smart contract of BaksDAO platform\\n/// @author Andrey Gulitsky\\n/// @notice You should use this contract to interact with the BaksDAO platform.\\n/// @notice Only this contract can issue stablecoins.\\ncontract Bank is Initializable, Governed, ReentrancyGuard {\\n    using AmountNormalization for IERC20;\\n    using AmountNormalization for IWrappedNativeCurrency;\\n    using CollateralToken for CollateralToken.Data;\\n    using EnumerableAddressSet for EnumerableAddressSet.Set;\\n    using FixedPointMath for uint256;\\n    using Loan for Loan.Data;\\n    using SafeERC20 for IWrappedNativeCurrency;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IMintableAndBurnableERC20;\\n\\n    enum Health {\\n        Ok,\\n        MarginCall,\\n        Liquidation\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n    uint8 internal constant DECIMALS = 18;\\n\\n    IWrappedNativeCurrency public wrappedNativeCurrency;\\n    ICore public core;\\n    IMintableAndBurnableERC20 public stablecoin;\\n    IPriceOracle public priceOracle;\\n\\n    address public operator;\\n    address public liquidator;\\n    address public exchangeFund;\\n    address public developmentFund;\\n\\n    Loan.Data[] public loans;\\n    mapping(address => uint256[]) public loanIds;\\n\\n    mapping(IERC20 => CollateralToken.Data) public collateralTokens;\\n    EnumerableAddressSet.Set internal collateralTokensSet;\\n\\n    event CollateralTokenListed(IERC20 indexed token);\\n    event CollateralTokenUnlisted(IERC20 indexed token);\\n\\n    event InitialLoanToValueRatioUpdated(\\n        IERC20 indexed token,\\n        uint256 initialLoanToValueRatio,\\n        uint256 newInitialLoanToValueRatio\\n    );\\n\\n    event Borrow(\\n        uint256 indexed id,\\n        address indexed borrower,\\n        IERC20 indexed token,\\n        uint256 principalAmount,\\n        uint256 collateralAmount,\\n        uint256 initialLoanToValueRatio\\n    );\\n    event Deposit(uint256 indexed id, uint256 collateralAmount);\\n    event Repay(uint256 indexed id, uint256 principalAmount);\\n    event Repaid(uint256 indexed id);\\n\\n    event Liquidated(uint256 indexed id);\\n\\n    event Rebalance(int256 delta);\\n\\n    modifier tokenAllowedAsCollateral(IERC20 token) {\\n        if (!collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOTokenNotAllowedAsCollateral(token);\\n        }\\n        _;\\n    }\\n\\n    modifier onActiveLoan(uint256 id) {\\n        if (id >= loans.length || !loans[id].isActive) {\\n            revert BaksDAOInactiveLoan(id);\\n        }\\n        _;\\n    }\\n\\n    modifier notOnSubjectToLiquidation(uint256 loanId) {\\n        if (checkHealth(loanId) == Health.Liquidation) {\\n            revert BaksDAOLoanIsSubjectToLiquidation(loanId);\\n        }\\n        _;\\n    }\\n\\n    modifier onSubjectToLiquidation(uint256 loanId) {\\n        if (checkHealth(loanId) != Health.Liquidation) {\\n            revert BaksDAOLoanNotSubjectToLiquidation(loanId);\\n        }\\n        _;\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != address(wrappedNativeCurrency)) {\\n            revert BaksDAOPlainNativeCurrencyTransferNotAllowed();\\n        }\\n    }\\n\\n    function initialize(\\n        IWrappedNativeCurrency _wrappedNativeCurrency,\\n        ICore _core,\\n        IMintableAndBurnableERC20 _stablecoin,\\n        IPriceOracle _priceOracle,\\n        address _operator,\\n        address _liquidator,\\n        address _exchangeFund,\\n        address _developmentFund\\n    ) external initializer {\\n        setGovernor(msg.sender);\\n\\n        wrappedNativeCurrency = _wrappedNativeCurrency;\\n        core = _core;\\n        stablecoin = _stablecoin;\\n        priceOracle = _priceOracle;\\n        operator = _operator;\\n        liquidator = _liquidator;\\n        exchangeFund = _exchangeFund;\\n        developmentFund = _developmentFund;\\n    }\\n\\n    /// @notice Increases loan's principal on `collateralToken` collateral token and mints `amount` of stablecoin.\\n    /// @dev The caller must have allowed this contract to spend a sufficient amount of collateral tokens to cover\\n    /// initial loan-to-value ratio.\\n    /// @param collateralToken The address of the collateral token contract.\\n    /// @param amount The amount of stablecoin to borrow and issue.\\n    function borrow(IERC20 collateralToken, uint256 amount)\\n        external\\n        nonReentrant\\n        tokenAllowedAsCollateral(collateralToken)\\n        returns (Loan.Data memory)\\n    {\\n        Loan.Data memory loan = calculateLoanByPrincipalAmount(collateralToken, amount);\\n\\n        collateralToken.safeTransferFrom(msg.sender, operator, collateralToken.denormalizeAmount(loan.stabilityFee));\\n        collateralToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralToken.denormalizeAmount(loan.collateralAmount)\\n        );\\n\\n        return _createLoan(loan);\\n    }\\n\\n    /// @notice Increases loan's principal on wrapped native currency token and mints stablecoin.\\n    function borrowInNativeCurrency(uint256 amount) external payable nonReentrant returns (Loan.Data memory) {\\n        Loan.Data memory loan = calculateLoanByPrincipalAmount(wrappedNativeCurrency, amount);\\n        loan.isNativeCurrency = true;\\n\\n        uint256 securityAmount = loan.collateralAmount + loan.stabilityFee;\\n        if (msg.value < securityAmount) {\\n            revert BaksDAOInsufficientSecurityAmount(securityAmount);\\n        }\\n\\n        wrappedNativeCurrency.deposit{value: securityAmount}();\\n        wrappedNativeCurrency.safeTransfer(operator, wrappedNativeCurrency.denormalizeAmount(loan.stabilityFee));\\n\\n        uint256 change;\\n        unchecked {\\n            change = msg.value - securityAmount;\\n        }\\n        if (change > 0) {\\n            (bool success, ) = msg.sender.call{value: change}(\\\"\\\");\\n            if (!success) {\\n                revert BaksDAONativeCurrencyTransferFailed();\\n            }\\n        }\\n\\n        return _createLoan(loan);\\n    }\\n\\n    /// @notice Deposits `amount` of collateral token to loan with `id` id.\\n    /// @dev The caller must have allowed this contract to spend `amount` of collateral tokens.\\n    /// @param loanId The loan id.\\n    /// @param amount The amount of collateral token to deposit.\\n    function deposit(uint256 loanId, uint256 amount)\\n        external\\n        nonReentrant\\n        onActiveLoan(loanId)\\n        notOnSubjectToLiquidation(loanId)\\n    {\\n        loans[loanId].collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        _deposit(loanId, amount);\\n    }\\n\\n    /// @notice Deposits wrapped native currency token to loan with `id` id.\\n    function depositInNativeCurrency(uint256 loanId)\\n        external\\n        payable\\n        nonReentrant\\n        onActiveLoan(loanId)\\n        notOnSubjectToLiquidation(loanId)\\n    {\\n        if (loans[loanId].collateralToken != wrappedNativeCurrency) {\\n            revert BaksDAONativeCurrencyCollateralNotAllowed(loanId);\\n        }\\n        wrappedNativeCurrency.deposit{value: msg.value}();\\n        _deposit(loanId, msg.value);\\n    }\\n\\n    /// @notice Decreases principal of loan with `id` id by `amount` of stablecoin.\\n    /// @param loanId The loan id.\\n    /// @param amount The amount of stablecoin to repay.\\n    function repay(uint256 loanId, uint256 amount)\\n        external\\n        nonReentrant\\n        onActiveLoan(loanId)\\n        notOnSubjectToLiquidation(loanId)\\n    {\\n        if (amount == 0) {\\n            revert BaksDAORepayZeroAmount();\\n        }\\n        Loan.Data storage loan = loans[loanId];\\n        loan.principalAmount -= amount;\\n\\n        stablecoin.burn(msg.sender, amount);\\n        loan.lastRepaymentAt = block.timestamp;\\n        if (loan.principalAmount > 0) {\\n            emit Repay(loanId, amount);\\n        } else {\\n            uint256 denormalizedCollateralAmount = loan.collateralToken.denormalizeAmount(loan.collateralAmount);\\n            collateralTokens[loan.collateralToken].collateralAmount -= loan.collateralAmount;\\n\\n            loan.collateralAmount = 0;\\n\\n            stablecoin.burn(address(this), loan.stabilizationFee);\\n\\n            loan.isActive = false;\\n            emit Repaid(loanId);\\n\\n            if (!loan.isNativeCurrency) {\\n                loan.collateralToken.safeTransfer(loan.borrower, denormalizedCollateralAmount);\\n            } else {\\n                wrappedNativeCurrency.withdraw(denormalizedCollateralAmount);\\n                (bool success, ) = msg.sender.call{value: denormalizedCollateralAmount}(\\\"\\\");\\n                if (!success) {\\n                    revert BaksDAONativeCurrencyTransferFailed();\\n                }\\n            }\\n        }\\n    }\\n\\n    function liquidate(uint256 loanId) external nonReentrant onActiveLoan(loanId) onSubjectToLiquidation(loanId) {\\n        Loan.Data storage loan = loans[loanId];\\n\\n        collateralTokens[loan.collateralToken].collateralAmount -= loan.collateralAmount;\\n        loan.collateralToken.safeTransfer(liquidator, loan.collateralToken.denormalizeAmount(loan.collateralAmount));\\n\\n        uint256 collateralValue = loan.getCollateralValue();\\n        stablecoin.burn(liquidator, loan.principalAmount);\\n        stablecoin.burn(address(this), collateralValue - loan.principalAmount);\\n\\n        loan.isActive = false;\\n        emit Liquidated(loanId);\\n    }\\n\\n    function rebalance() external nonReentrant {\\n        uint256 totalValueLocked = getTotalValueLocked();\\n        uint256 totalSupply = stablecoin.totalSupply();\\n\\n        int256 delta = int256(totalSupply) - int256(totalValueLocked);\\n        uint256 absoluteDelta = Math.abs(delta);\\n        uint256 p = absoluteDelta.div(totalSupply);\\n        if (p < core.rebalancingThreshold()) {\\n            revert BaksDAONoNeedToRebalance();\\n        }\\n\\n        if (delta > 0) {\\n            try stablecoin.burn(address(this), absoluteDelta) {} catch {\\n                uint256 balance = stablecoin.balanceOf(address(this));\\n                revert BaksDAOStabilizationFundOutOfFunds(absoluteDelta - balance);\\n            }\\n        } else {\\n            stablecoin.mint(address(this), absoluteDelta);\\n        }\\n\\n        emit Rebalance(delta);\\n    }\\n\\n    function listCollateralToken(IERC20 token, uint256 initialLoanToValueRatio) external onlyGovernor {\\n        if (collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOCollateralTokenAlreadyListed(token);\\n        }\\n\\n        if (initialLoanToValueRatio >= core.marginCallLoanToValueRatio()) {\\n            revert BaksDAOInitialLoanToValueRatioTooHigh(token, initialLoanToValueRatio);\\n        }\\n\\n        uint8 decimals = token.decimals();\\n        if (decimals == 0) {\\n            revert BaksDAOCollateralTokenZeroDecimals(token);\\n        }\\n        if (decimals > DECIMALS) {\\n            revert BaksDAOCollateralTokenTooLargeDecimals(token, decimals);\\n        }\\n\\n        if (collateralTokensSet.add(address(token))) {\\n            collateralTokens[token] = CollateralToken.Data({\\n                collateralToken: token,\\n                priceOracle: priceOracle,\\n                stabilityFee: core.stabilityFee(),\\n                stabilizationFee: core.stabilizationFee(),\\n                exchangeFee: core.exchangeFee(),\\n                developmentFee: core.developmentFee(),\\n                initialLoanToValueRatio: initialLoanToValueRatio,\\n                marginCallLoanToValueRatio: core.marginCallLoanToValueRatio(),\\n                liquidationLoanToValueRatio: core.liquidationLoanToValueRatio(),\\n                collateralAmount: 0\\n            });\\n\\n            emit CollateralTokenListed(token);\\n            emit InitialLoanToValueRatioUpdated(token, 0, initialLoanToValueRatio);\\n        }\\n    }\\n\\n    function unlistCollateralToken(IERC20 token) external onlyGovernor {\\n        if (!collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOCollateralTokenNotListed(token);\\n        }\\n\\n        if (collateralTokensSet.remove(address(token))) {\\n            delete collateralTokens[token];\\n            emit CollateralTokenUnlisted(token);\\n        }\\n    }\\n\\n    function setInitialLoanToValueRatio(IERC20 token, uint256 newInitialLoanToValueRatio) external onlyGovernor {\\n        if (!collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOCollateralTokenNotListed(token);\\n        }\\n\\n        CollateralToken.Data storage collateralToken = collateralTokens[token];\\n        if (newInitialLoanToValueRatio >= collateralToken.marginCallLoanToValueRatio) {\\n            revert BaksDAOInitialLoanToValueRatioTooHigh(token, newInitialLoanToValueRatio);\\n        }\\n\\n        uint256 initialLoanToValueRatio = collateralToken.initialLoanToValueRatio;\\n        collateralToken.initialLoanToValueRatio = newInitialLoanToValueRatio;\\n\\n        emit InitialLoanToValueRatioUpdated(token, initialLoanToValueRatio, newInitialLoanToValueRatio);\\n    }\\n\\n    function salvage(IERC20 token) external onlyGovernor {\\n        address tokenAddress = address(token);\\n        if (tokenAddress == address(stablecoin) || collateralTokensSet.contains(tokenAddress)) {\\n            revert BaksDAOTokenNotAllowedToBeSalvaged(token);\\n        }\\n        token.safeTransfer(operator, token.balanceOf(address(this)));\\n    }\\n\\n    function getLoans(address borrower) external view returns (Loan.Data[] memory _loans) {\\n        uint256 length = loanIds[borrower].length;\\n        _loans = new Loan.Data[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _loans[i] = loans[loanIds[borrower][i]];\\n        }\\n    }\\n\\n    function getAllowedCollateralTokens()\\n        external\\n        view\\n        returns (CollateralToken.Data[] memory allowedCollateralTokens)\\n    {\\n        uint256 length = collateralTokensSet.elements.length;\\n        allowedCollateralTokens = new CollateralToken.Data[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            allowedCollateralTokens[i] = collateralTokens[IERC20(collateralTokensSet.elements[i])];\\n        }\\n    }\\n\\n    function calculateLoanByPrincipalAmount(IERC20 collateralToken, uint256 principalAmount)\\n        public\\n        view\\n        returns (Loan.Data memory loan)\\n    {\\n        loan = collateralTokens[collateralToken].calculateLoanByPrincipalAmount(principalAmount);\\n    }\\n\\n    function calculateLoanByCollateralAmount(IERC20 collateralToken, uint256 collateralAmount)\\n        public\\n        view\\n        returns (Loan.Data memory loan)\\n    {\\n        loan = collateralTokens[collateralToken].calculateLoanByCollateralAmount(collateralAmount);\\n    }\\n\\n    function calculateLoanBySecurityAmount(IERC20 collateralToken, uint256 securityAmount)\\n        public\\n        view\\n        returns (Loan.Data memory loan)\\n    {\\n        loan = collateralTokens[collateralToken].calculateLoanBySecurityAmount(securityAmount);\\n    }\\n\\n    function getTotalValueLocked() public view returns (uint256 totalValueLocked) {\\n        for (uint256 i = 0; i < collateralTokensSet.elements.length; i++) {\\n            totalValueLocked += collateralTokens[IERC20(collateralTokensSet.elements[i])].getCollateralValue();\\n        }\\n    }\\n\\n    function getLoanToValueRatio(uint256 loanId) public view returns (uint256 loanToValueRatio) {\\n        Loan.Data memory loan = loans[loanId];\\n        loanToValueRatio = loan.calculateLoanToValueRatio();\\n    }\\n\\n    function checkHealth(uint256 loanId) public view returns (Health health) {\\n        uint256 loanToValueRatio = getLoanToValueRatio(loanId);\\n        health = loanToValueRatio >= core.liquidationLoanToValueRatio()\\n            ? Health.Liquidation\\n            : loanToValueRatio >= core.marginCallLoanToValueRatio()\\n            ? Health.MarginCall\\n            : Health.Ok;\\n    }\\n\\n    function _createLoan(Loan.Data memory loan) internal returns (Loan.Data memory) {\\n        if (loan.principalAmount == 0) {\\n            revert BaksDAOBorrowZeroAmount();\\n        }\\n        if (loan.principalAmount < core.minimumPrincipalAmount()) {\\n            revert BaksDAOBorrowBelowMinimumPrincipalAmount();\\n        }\\n\\n        stablecoin.mint(address(this), loan.stabilizationFee);\\n        stablecoin.mint(exchangeFund, loan.exchangeFee);\\n        stablecoin.mint(developmentFund, loan.developmentFee);\\n        stablecoin.mint(loan.borrower, loan.principalAmount);\\n\\n        uint256 id = loans.length;\\n        loan.id = id;\\n\\n        loans.push(loan);\\n        loanIds[loan.borrower].push(id);\\n\\n        collateralTokens[loan.collateralToken].collateralAmount += loan.collateralAmount;\\n\\n        emit Borrow(\\n            id,\\n            loan.borrower,\\n            loan.collateralToken,\\n            loan.principalAmount,\\n            loan.collateralAmount,\\n            collateralTokens[loan.collateralToken].initialLoanToValueRatio\\n        );\\n\\n        return loan;\\n    }\\n\\n    function _deposit(uint256 loanId, uint256 amount) internal {\\n        if (amount == 0) {\\n            revert BaksDAODepositZeroAmount();\\n        }\\n\\n        Loan.Data storage loan = loans[loanId];\\n\\n        uint256 normalizedCollateralAmount = loan.collateralToken.normalizeAmount(amount);\\n        loan.collateralAmount += normalizedCollateralAmount;\\n        loan.lastDepositAt = block.timestamp;\\n        collateralTokens[loan.collateralToken].collateralAmount += normalizedCollateralAmount;\\n\\n        emit Deposit(loanId, normalizedCollateralAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x0ecdaf35ff29c96f7c67605c119a7a84e02003a9e6fe13d0a60671886276bb08\",\"license\":\"BUSL-1.1\"},\"contracts/Core.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\n\\n/// @dev Thrown when trying to set platform fees that don't sum up to one.\\n/// @param stabilizationFee The stabilization fee that was tried to set.\\n/// @param exchangeFee The stabilization fee that was tried to set.\\n/// @param developmentFee The stabilization fee that was tried to set.\\nerror BaksDAOPlatformFeesDontSumUpToOne(uint256 stabilizationFee, uint256 exchangeFee, uint256 developmentFee);\\n\\ninterface ICore {\\n    event MinimumPrincipalAmountUpdated(uint256 minimumPrincipalAmount, uint256 newMinimumPrincipalAmount);\\n    event StabilityFeeUpdated(uint256 stabilityFee, uint256 newStabilityFee);\\n    event RebalancingThresholdUpdated(uint256 rebalancingThreshold, uint256 newRebalancingThreshold);\\n    event PlatformFeesUpdated(\\n        uint256 stabilizationFee,\\n        uint256 newStabilizationFee,\\n        uint256 exchangeFee,\\n        uint256 newExchangeFee,\\n        uint256 developmentFee,\\n        uint256 newDevelopmentFee\\n    );\\n    event MarginCallLoanToValueRatioUpdated(uint256 marginCallLoanToValueRatio, uint256 newMarginCallLoanToValueRatio);\\n    event LiquidationLoanToValueRatioUpdated(\\n        uint256 liqudationLoanToValueRatio,\\n        uint256 newLiquidationLoanToValueRatio\\n    );\\n\\n    event ServicingThresholdUpdated(uint256 servicingThreshold, uint256 newServicingThreshold);\\n    event MinimumLiquidityUpdated(uint256 minimumLiquidity, uint256 newMinimumLiquidity);\\n\\n    function minimumPrincipalAmount() external view returns (uint256);\\n\\n    function stabilityFee() external view returns (uint256);\\n\\n    function stabilizationFee() external view returns (uint256);\\n\\n    function exchangeFee() external view returns (uint256);\\n\\n    function developmentFee() external view returns (uint256);\\n\\n    function marginCallLoanToValueRatio() external view returns (uint256);\\n\\n    function liquidationLoanToValueRatio() external view returns (uint256);\\n\\n    function rebalancingThreshold() external view returns (uint256);\\n\\n    function servicingThreshold() external view returns (uint256);\\n\\n    function minimumLiquidity() external view returns (uint256);\\n}\\n\\ncontract Core is Initializable, Governed, ICore {\\n    uint256 internal constant ONE = 100e16;\\n\\n    uint256 public override minimumPrincipalAmount;\\n    uint256 public override stabilityFee;\\n    uint256 public override stabilizationFee;\\n    uint256 public override exchangeFee;\\n    uint256 public override developmentFee;\\n    uint256 public override marginCallLoanToValueRatio;\\n    uint256 public override liquidationLoanToValueRatio;\\n    uint256 public override rebalancingThreshold;\\n\\n    uint256 public override servicingThreshold;\\n    uint256 public override minimumLiquidity;\\n\\n    function initialize() external initializer {\\n        setGovernor(msg.sender);\\n\\n        minimumPrincipalAmount = 50e18; // 50 BAKS\\n        stabilityFee = 3e16; // 3 %\\n        stabilizationFee = 85e16; // 85 %\\n        exchangeFee = 15e16; // 15 %\\n        developmentFee = 0;\\n        marginCallLoanToValueRatio = 75e16; // 75 %\\n        liquidationLoanToValueRatio = 83e16; // 83 %\\n        rebalancingThreshold = 1e16; // 1 %\\n\\n        servicingThreshold = 1e16; // 1%\\n        minimumLiquidity = 50000e18; // 50000 BAKS\\n    }\\n\\n    function setMinimumPrincipalAmount(uint256 newMinimumPrincipalAmount) external onlyGovernor {\\n        emit StabilityFeeUpdated(minimumPrincipalAmount, newMinimumPrincipalAmount);\\n        minimumPrincipalAmount = newMinimumPrincipalAmount;\\n    }\\n\\n    function setStabilityFee(uint256 newStabilityFee) external onlyGovernor {\\n        emit StabilityFeeUpdated(stabilityFee, newStabilityFee);\\n        stabilityFee = newStabilityFee;\\n    }\\n\\n    function setPlatformFees(\\n        uint256 newStabilizationFee,\\n        uint256 newExchangeFee,\\n        uint256 newDevelopmentFee\\n    ) external onlyGovernor {\\n        if (newStabilizationFee + newExchangeFee + newDevelopmentFee != ONE) {\\n            revert BaksDAOPlatformFeesDontSumUpToOne(newStabilizationFee, newExchangeFee, newDevelopmentFee);\\n        }\\n        emit PlatformFeesUpdated(\\n            stabilizationFee,\\n            newStabilizationFee,\\n            exchangeFee,\\n            newExchangeFee,\\n            developmentFee,\\n            newDevelopmentFee\\n        );\\n        stabilizationFee = newStabilizationFee;\\n        exchangeFee = newExchangeFee;\\n        developmentFee = newDevelopmentFee;\\n    }\\n\\n    function setMarginCallLoanToValueRatio(uint256 newMarginCallLoanToValueRatio) external onlyGovernor {\\n        emit MarginCallLoanToValueRatioUpdated(marginCallLoanToValueRatio, newMarginCallLoanToValueRatio);\\n        marginCallLoanToValueRatio = newMarginCallLoanToValueRatio;\\n    }\\n\\n    function setLiquidationLoanToValueRatio(uint256 newLiquidationLoanToValueRatio) external onlyGovernor {\\n        emit LiquidationLoanToValueRatioUpdated(liquidationLoanToValueRatio, newLiquidationLoanToValueRatio);\\n        liquidationLoanToValueRatio = newLiquidationLoanToValueRatio;\\n    }\\n\\n    function setRebalancingThreshold(uint256 newRebalancingThreshold) external onlyGovernor {\\n        emit RebalancingThresholdUpdated(rebalancingThreshold, newRebalancingThreshold);\\n        rebalancingThreshold = newRebalancingThreshold;\\n    }\\n\\n    function setServicingThreshold(uint256 newServicingThreshold) external onlyGovernor {\\n        emit ServicingThresholdUpdated(servicingThreshold, newServicingThreshold);\\n        servicingThreshold = newServicingThreshold;\\n    }\\n\\n    function setMinimumLiquidity(uint256 newMinimumLiquidity) external onlyGovernor {\\n        emit MinimumLiquidityUpdated(minimumLiquidity, newMinimumLiquidity);\\n        minimumLiquidity = newMinimumLiquidity;\\n    }\\n}\\n\",\"keccak256\":\"0xbabf81c75977a58d01b9a8cc7dd83fe8c24b14be6c69ba25a74bf1c1d2202c77\",\"license\":\"BUSL-1.1\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nerror GovernedOnlyGovernorAllowedToCall();\\nerror GovernedOnlyPendingGovernorAllowedToCall();\\nerror GovernedGovernorZeroAddress();\\nerror GovernedCantGoverItself();\\n\\nabstract contract Governed {\\n    address public governor;\\n    address public pendingGovernor;\\n\\n    event PendingGovernanceTransition(address indexed governor, address indexed newGovernor);\\n    event GovernanceTransited(address indexed governor, address indexed newGovernor);\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor) {\\n            revert GovernedOnlyGovernorAllowedToCall();\\n        }\\n        _;\\n    }\\n\\n    function transitGovernance(address newGovernor, bool force) external onlyGovernor {\\n        if (newGovernor == address(0)) {\\n            revert GovernedGovernorZeroAddress();\\n        }\\n        if (newGovernor == address(this)) {\\n            revert GovernedCantGoverItself();\\n        }\\n\\n        pendingGovernor = newGovernor;\\n        if (!force) {\\n            emit PendingGovernanceTransition(governor, newGovernor);\\n        } else {\\n            setGovernor(newGovernor);\\n        }\\n    }\\n\\n    function acceptGovernance() external {\\n        if (msg.sender != pendingGovernor) {\\n            revert GovernedOnlyPendingGovernorAllowedToCall();\\n        }\\n\\n        governor = pendingGovernor;\\n        emit GovernanceTransited(governor, pendingGovernor);\\n    }\\n\\n    function setGovernor(address newGovernor) internal {\\n        governor = newGovernor;\\n        emit GovernanceTransited(governor, newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xe86e94a8fa51fb298c4152828f39bd32ceb0eed75717c70cc519528e7e448875\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IMintableAndBurnableERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x555b3bf9906cdd22fd702e227764b81c027180c0af11c48222ba6273441c63f3\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\nimport \\\"./../libraries/FixedPointMath.sol\\\";\\n\\n/// @notice Thrown when oracle doesn't provide price for `token` token.\\n/// @param token The address of the token contract.\\nerror PriceOracleTokenUnknown(IERC20 token);\\n/// @notice Thrown when oracle provide stale price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleStalePrice(IERC20 token, uint256 price);\\n/// @notice Thrown when oracle provide negative, zero or in other ways invalid price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleInvalidPrice(IERC20 token, int256 price);\\n\\ninterface IPriceOracle {\\n    /// @notice Gets normalized to 18 decimals price for the `token` token.\\n    /// @param token The address of the token contract.\\n    /// @return normalizedPrice Normalized price.\\n    function getNormalizedPrice(IERC20 token) external view returns (uint256 normalizedPrice);\\n}\\n\",\"keccak256\":\"0x2cfa58d491572f613703a352a2ca52ecea5299711852d190c3abed043d95028b\",\"license\":\"MIT\"},\"contracts/interfaces/IWrappedNativeCurrency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\n\\ninterface IWrappedNativeCurrency is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xc94fb4955357b9fa1728487f1c34edb25c9edbbc376b1ed4b5feb86e2a5887b4\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nerror CallToNonContract(address target);\\n\\nlibrary Address {\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.call(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function delegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.delegatecall(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(account)\\n        }\\n\\n        return codeSize > 0;\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returnData,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returnData;\\n        } else {\\n            if (returnData.length > 0) {\\n                assembly {\\n                    let returnDataSize := mload(returnData)\\n                    revert(add(returnData, 32), returnDataSize)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0600a1e06b9ff00c4175ca0f55c0b85cbc9283a101cc0c2a0624c600c456c003\",\"license\":\"MIT\"},\"contracts/libraries/AmountNormalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\n\\nlibrary AmountNormalization {\\n    uint8 internal constant DECIMALS = 18;\\n\\n    function normalizeAmount(IERC20 self, uint256 denormalizedAmount) internal view returns (uint256 normalizedAmount) {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return denormalizedAmount * scale;\\n        }\\n        return denormalizedAmount;\\n    }\\n\\n    function denormalizeAmount(IERC20 self, uint256 normalizedAmount)\\n        internal\\n        view\\n        returns (uint256 denormalizedAmount)\\n    {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return normalizedAmount / scale;\\n        }\\n        return normalizedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x4db96164ff3f9388d3079863e78d773f0af7c9875d2987c22b2cb21cc815c0ff\",\"license\":\"MIT\"},\"contracts/libraries/CollateralToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport \\\"./Loan.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary CollateralToken {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        IERC20 collateralToken;\\n        IPriceOracle priceOracle;\\n        uint256 stabilityFee;\\n        uint256 stabilizationFee;\\n        uint256 exchangeFee;\\n        uint256 developmentFee;\\n        uint256 initialLoanToValueRatio;\\n        uint256 marginCallLoanToValueRatio;\\n        uint256 liquidationLoanToValueRatio;\\n        uint256 collateralAmount;\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n\\n    function calculateLoanByPrincipalAmount(Data memory self, uint256 principalAmount)\\n        internal\\n        view\\n        returns (Loan.Data memory)\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n\\n        uint256 restOfIssuance = principalAmount.mul(ONE - self.initialLoanToValueRatio).div(\\n            self.initialLoanToValueRatio\\n        );\\n        uint256 stabilizationFee = restOfIssuance.mul(self.stabilizationFee);\\n        uint256 exchangeFee = restOfIssuance.mul(self.exchangeFee);\\n        uint256 developmentFee = restOfIssuance.mul(self.developmentFee);\\n\\n        uint256 collateralAmount = principalAmount.div(self.initialLoanToValueRatio.mul(collateralTokenPrice));\\n        uint256 stabilityFee = self.stabilityFee.mul(principalAmount).div(collateralTokenPrice);\\n\\n        return\\n            Loan.Data({\\n                id: 0,\\n                isActive: true,\\n                borrower: msg.sender,\\n                collateralToken: self.collateralToken,\\n                isNativeCurrency: false,\\n                priceOracle: self.priceOracle,\\n                stabilityFee: stabilityFee,\\n                stabilizationFee: stabilizationFee,\\n                exchangeFee: exchangeFee,\\n                developmentFee: developmentFee,\\n                principalAmount: principalAmount,\\n                collateralAmount: collateralAmount,\\n                lastDepositAt: block.timestamp,\\n                lastRepaymentAt: block.timestamp\\n            });\\n    }\\n\\n    function calculateLoanByCollateralAmount(Data memory self, uint256 collateralAmount)\\n        internal\\n        view\\n        returns (Loan.Data memory)\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        uint256 principalAmount = collateralAmount.mul(self.initialLoanToValueRatio).mul(collateralTokenPrice);\\n\\n        uint256 restOfIssuance = principalAmount.mul(ONE - self.initialLoanToValueRatio).div(\\n            self.initialLoanToValueRatio\\n        );\\n        uint256 stabilizationFee = restOfIssuance.mul(self.stabilizationFee);\\n        uint256 exchangeFee = restOfIssuance.mul(self.exchangeFee);\\n        uint256 developmentFee = restOfIssuance.mul(self.developmentFee);\\n\\n        uint256 stabilityFee = self.stabilityFee.mul(principalAmount).div(collateralTokenPrice);\\n\\n        return\\n            Loan.Data({\\n                id: 0,\\n                isActive: true,\\n                borrower: msg.sender,\\n                collateralToken: self.collateralToken,\\n                isNativeCurrency: false,\\n                priceOracle: self.priceOracle,\\n                stabilityFee: stabilityFee,\\n                stabilizationFee: stabilizationFee,\\n                exchangeFee: exchangeFee,\\n                developmentFee: developmentFee,\\n                principalAmount: principalAmount,\\n                collateralAmount: collateralAmount,\\n                lastDepositAt: block.timestamp,\\n                lastRepaymentAt: block.timestamp\\n            });\\n    }\\n\\n    function calculateLoanBySecurityAmount(Data memory self, uint256 securityAmount)\\n        internal\\n        view\\n        returns (Loan.Data memory)\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        uint256 c = self.stabilityFee.mul(self.initialLoanToValueRatio);\\n        uint256 principalAmount = securityAmount.mul(self.initialLoanToValueRatio).mul(collateralTokenPrice).div(\\n            c + ONE\\n        );\\n        return calculateLoanByPrincipalAmount(self, principalAmount);\\n    }\\n\\n    function getCollateralValue(Data memory self) internal view returns (uint256 collateralValue) {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        collateralValue = self.collateralAmount.mul(collateralTokenPrice);\\n    }\\n}\\n\",\"keccak256\":\"0x921813de1dbd50c3cbffa317aabc896750ac169f045bbcde019e219a96c26f1e\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/EnumerableAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary EnumerableAddressSet {\\n    struct Set {\\n        address[] elements;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    function add(Set storage self, address element) internal returns (bool) {\\n        if (contains(self, element)) {\\n            return false;\\n        }\\n\\n        self.elements.push(element);\\n        self.indexes[element] = self.elements.length;\\n\\n        return true;\\n    }\\n\\n    function remove(Set storage self, address element) internal returns (bool) {\\n        uint256 elementIndex = indexOf(self, element);\\n        if (elementIndex == 0) {\\n            return false;\\n        }\\n\\n        uint256 indexToRemove = elementIndex - 1;\\n        uint256 lastIndex = count(self) - 1;\\n        if (indexToRemove != lastIndex) {\\n            address lastElement = self.elements[lastIndex];\\n            self.elements[indexToRemove] = lastElement;\\n            self.indexes[lastElement] = elementIndex;\\n        }\\n        self.elements.pop();\\n        delete self.indexes[element];\\n\\n        return true;\\n    }\\n\\n    function indexOf(Set storage self, address element) internal view returns (uint256) {\\n        return self.indexes[element];\\n    }\\n\\n    function contains(Set storage self, address element) internal view returns (bool) {\\n        return indexOf(self, element) != 0;\\n    }\\n\\n    function count(Set storage self) internal view returns (uint256) {\\n        return self.elements.length;\\n    }\\n}\\n\",\"keccak256\":\"0xa1fa015d00e86c38628437f420fc58879e4b87e28ee7266616a1e3e9485a9467\",\"license\":\"MIT\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nerror FixedPointMathMulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @title Fixed point math implementation\\nlibrary FixedPointMath {\\n    uint256 internal constant SCALE = 1e18;\\n    /// @dev Largest power of two divisor of scale.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n    /// @dev Scale inverted mod 2**256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert FixedPointMathMulDivOverflow(prod1, SCALE);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(a, b, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := add(div(prod0, SCALE), roundUpUnit)\\n            }\\n            return result;\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        result = mulDiv(a, SCALE, b);\\n    }\\n\\n    /// @notice Calculates \\u230aa \\u00d7 b \\u00f7 denominator\\u230b with full precision.\\n    /// @dev Credit to Remco Bloemen under MIT license https://2\\u03c0.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= denominator) {\\n            revert FixedPointMathMulDivOverflow(prod1, denominator);\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        unchecked {\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                denominator := div(denominator, lpotdod)\\n                prod0 := div(prod0, lpotdod)\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n            prod0 |= prod1 * lpotdod;\\n\\n            uint256 inverse = (3 * denominator) ^ 2;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n\\n            result = prod0 * inverse;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d0813682bbe12845de0111298ec16fb9ebf5ac404cce4bee155a455fa547eb4\",\"license\":\"MIT\"},\"contracts/libraries/Loan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Loan {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        uint256 id;\\n        bool isActive;\\n        address borrower;\\n        IERC20 collateralToken;\\n        bool isNativeCurrency;\\n        IPriceOracle priceOracle;\\n        uint256 stabilityFee;\\n        uint256 stabilizationFee;\\n        uint256 exchangeFee;\\n        uint256 developmentFee;\\n        uint256 principalAmount;\\n        uint256 collateralAmount;\\n        uint256 lastDepositAt;\\n        uint256 lastRepaymentAt;\\n    }\\n\\n    function getCollateralValue(Data memory self) internal view returns (uint256 collateralValue) {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        collateralValue = self.collateralAmount.mul(collateralTokenPrice);\\n    }\\n\\n    function calculateLoanToValueRatio(Data memory self) internal view returns (uint256 loanToValueRatio) {\\n        if (self.principalAmount == 0) {\\n            return 0;\\n        }\\n        if (self.collateralAmount == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        loanToValueRatio = self.principalAmount.div(getCollateralValue(self));\\n    }\\n}\\n\",\"keccak256\":\"0x5e5699ef19abb157e88e56379c690230087ffcd9357808f68a9ec22f24833065\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Math {\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a >= 0 ? uint256(a) : uint256(-a);\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        uint256 xAux = x;\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        uint256 repeat = 7;\\n        while (repeat > 0) {\\n            result = (result + x / result) >> 1;\\n            repeat--;\\n        }\\n        uint256 roundedDownResult = x / result;\\n\\n        return result >= roundedDownResult ? roundedDownResult : result;\\n    }\\n\\n    function fpsqrt(uint256 a) internal pure returns (uint256 result) {\\n        if (a == 0) result = 0;\\n        else result = sqrt(a) * 1e9;\\n    }\\n}\\n\",\"keccak256\":\"0x78c7fb7bc84e5e2818fc929e8b5a6e7909d3f89f8186cd49558c82c96103126c\",\"license\":\"MIT\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nerror ReentrancyGuardReentrantCall();\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private status;\\n\\n    modifier nonReentrant() {\\n        if (status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        status = ENTERED;\\n\\n        _;\\n\\n        status = NOT_ENTERED;\\n    }\\n\\n    constructor() {\\n        status = NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0c49a9dd65f669ba3be9e175ef8c81bd8e99567765015d22e6e0488f3ecf8d81\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\nerror SafeERC20NoReturnData();\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, amount));\\n    }\\n\\n    function callWithOptionalReturn(IERC20 token, bytes memory data) internal {\\n        address tokenAddress = address(token);\\n\\n        bytes memory returnData = tokenAddress.functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returnData.length > 0) {\\n            if (!abi.decode(returnData, (bool))) {\\n                revert SafeERC20NoReturnData();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa34dc3bade0644994ac478921c14186097231de0dd0426d7d349c26e79224741\",\"license\":\"MIT\"},\"contracts/libraries/Upgradability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./Address.sol\\\";\\n\\nerror EIP1967ImplementationIsNotContract(address implementation);\\nerror ContractAlreadyInitialized();\\nerror OnlyProxyCallAllowed();\\nerror OnlyCurrentImplementationAllowed();\\n\\nlibrary EIP1967 {\\n    using Address for address;\\n\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    event Upgraded(address indexed newImplementation);\\n\\n    function upgradeTo(address newImplementation) internal {\\n        if (!newImplementation.isContract()) {\\n            revert EIP1967ImplementationIsNotContract(newImplementation);\\n        }\\n\\n        assembly {\\n            sstore(IMPLEMENTATION_SLOT, newImplementation)\\n        }\\n\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    function getImplementation() internal view returns (address implementation) {\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_SLOT)\\n        }\\n    }\\n}\\n\\ncontract Proxy {\\n    using Address for address;\\n\\n    constructor(address implementation, bytes memory data) {\\n        EIP1967.upgradeTo(implementation);\\n        implementation.delegateCall(data, \\\"Proxy: construction failed\\\");\\n    }\\n\\n    receive() external payable {\\n        delegateCall();\\n    }\\n\\n    fallback() external payable {\\n        delegateCall();\\n    }\\n\\n    function delegateCall() internal {\\n        address implementation = EIP1967.getImplementation();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Upgradeable {\\n    address private immutable self = address(this);\\n\\n    modifier onlyProxy() {\\n        if (address(this) == self) {\\n            revert OnlyProxyCallAllowed();\\n        }\\n        if (EIP1967.getImplementation() != self) {\\n            revert OnlyCurrentImplementationAllowed();\\n        }\\n        _;\\n    }\\n\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        EIP1967.upgradeTo(newImplementation);\\n    }\\n}\\n\\nabstract contract Initializable {\\n    bool private initializing;\\n    bool private initialized;\\n\\n    modifier initializer() {\\n        if (!initializing && initialized) {\\n            revert ContractAlreadyInitialized();\\n        }\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60f5d719243332028141aec4adf396d615df4fc5113fe4e80f21af3af9174d58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Andrey Gulitsky",
    "errors": {
      "BaksDAOBorrowBelowMinimumPrincipalAmount()": [
        {
          "details": "Thrown when trying to borrow below minimum principal amount."
        }
      ],
      "BaksDAOBorrowZeroAmount()": [
        {
          "details": "Thrown when borrowing a zero amount of stablecoin."
        }
      ],
      "BaksDAOCollateralTokenAlreadyListed(address)": [
        {
          "details": "Thrown when trying to list collateral token that's already listed.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOCollateralTokenNotListed(address)": [
        {
          "details": "Thrown when trying to unlist collateral token that's not listed.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOCollateralTokenTooLargeDecimals(address,uint8)": [
        {
          "details": "Thrown when trying to list collateral token that has too large decimals.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOCollateralTokenZeroDecimals(address)": [
        {
          "details": "Thrown when trying to list collateral token that has zero decimals.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAODepositZeroAmount()": [
        {
          "details": "Thrown when depositing a zero amount of collateral token."
        }
      ],
      "BaksDAOInactiveLoan(uint256)": [
        {
          "details": "Thrown when trying to interact with inactive loan with `id` id.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAOInitialLoanToValueRatioTooHigh(address,uint256)": [
        {
          "details": "Thrown when trying to set initial loan-to-value ratio that higher than margin call or liquidation ones.",
          "params": {
            "initialLoanToValueRatio": "The initial loan-to-value ratio that was tried to set.",
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOLoanIsSubjectToLiquidation(uint256)": [
        {
          "details": "Thrown when trying to interact with loan with `id` id that is subject to liquidation.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAOLoanNotSubjectToLiquidation(uint256)": [
        {
          "details": "Thrown when trying to liquidate healthy loan with `id` id.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAONativeCurrencyCollateralNotAllowed(uint256)": [
        {
          "details": "Thrown when trying to deposit native currency collateral to the non-wrapped native currency token loan with `id` id.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAONoNeedToRebalance()": [
        {
          "details": "Thrown when there's no need to rebalance the platform."
        }
      ],
      "BaksDAORepayZeroAmount()": [
        {
          "details": "Thrown when repaying a zero amount of stablecoin."
        }
      ],
      "BaksDAOStabilizationFundOutOfFunds(uint256)": [
        {
          "details": "Thrown when trying to rebalance the platform and there is a shortage of funds to burn.",
          "params": {
            "shortage": "Shoratge of funds to burn."
          }
        }
      ],
      "BaksDAOTokenNotAllowedAsCollateral(address)": [
        {
          "details": "Thrown when interacting with a token that's not allowed as collateral.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOTokenNotAllowedToBeSalvaged(address)": [
        {
          "details": "Thrown when trying to salvage one of allowed collateral tokens or stablecoin.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "borrow(address,uint256)": {
        "details": "The caller must have allowed this contract to spend a sufficient amount of collateral tokens to cover initial loan-to-value ratio.",
        "params": {
          "amount": "The amount of stablecoin to borrow and issue.",
          "collateralToken": "The address of the collateral token contract."
        }
      },
      "deposit(uint256,uint256)": {
        "details": "The caller must have allowed this contract to spend `amount` of collateral tokens.",
        "params": {
          "amount": "The amount of collateral token to deposit.",
          "loanId": "The loan id."
        }
      },
      "repay(uint256,uint256)": {
        "params": {
          "amount": "The amount of stablecoin to repay.",
          "loanId": "The loan id."
        }
      }
    },
    "title": "Core smart contract of BaksDAO platform",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(address,uint256)": {
        "notice": "Increases loan's principal on `collateralToken` collateral token and mints `amount` of stablecoin."
      },
      "borrowInNativeCurrency(uint256)": {
        "notice": "Increases loan's principal on wrapped native currency token and mints stablecoin."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposits `amount` of collateral token to loan with `id` id."
      },
      "depositInNativeCurrency(uint256)": {
        "notice": "Deposits wrapped native currency token to loan with `id` id."
      },
      "repay(uint256,uint256)": {
        "notice": "Decreases principal of loan with `id` id by `amount` of stablecoin."
      }
    },
    "notice": "You should use this contract to interact with the BaksDAO platform.Only this contract can issue stablecoins.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6644,
        "contract": "contracts/Bank.sol:Bank",
        "label": "initializing",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6646,
        "contract": "contracts/Bank.sol:Bank",
        "label": "initialized",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4646,
        "contract": "contracts/Bank.sol:Bank",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4648,
        "contract": "contracts/Bank.sol:Bank",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6362,
        "contract": "contracts/Bank.sol:Bank",
        "label": "status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 176,
        "contract": "contracts/Bank.sol:Bank",
        "label": "wrappedNativeCurrency",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWrappedNativeCurrency)4971"
      },
      {
        "astId": 179,
        "contract": "contracts/Bank.sol:Bank",
        "label": "core",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICore)2780"
      },
      {
        "astId": 182,
        "contract": "contracts/Bank.sol:Bank",
        "label": "stablecoin",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IMintableAndBurnableERC20)4883"
      },
      {
        "astId": 185,
        "contract": "contracts/Bank.sol:Bank",
        "label": "priceOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPriceOracle)4956"
      },
      {
        "astId": 187,
        "contract": "contracts/Bank.sol:Bank",
        "label": "operator",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 189,
        "contract": "contracts/Bank.sol:Bank",
        "label": "liquidator",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 191,
        "contract": "contracts/Bank.sol:Bank",
        "label": "exchangeFund",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 193,
        "contract": "contracts/Bank.sol:Bank",
        "label": "developmentFund",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 197,
        "contract": "contracts/Bank.sol:Bank",
        "label": "loans",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Data)6089_storage)dyn_storage"
      },
      {
        "astId": 202,
        "contract": "contracts/Bank.sol:Bank",
        "label": "loanIds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 208,
        "contract": "contracts/Bank.sol:Bank",
        "label": "collateralTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_contract(IERC20)4866,t_struct(Data)5375_storage)"
      },
      {
        "astId": 211,
        "contract": "contracts/Bank.sol:Bank",
        "label": "collateralTokensSet",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Set)5674_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Data)6089_storage)dyn_storage": {
        "base": "t_struct(Data)6089_storage",
        "encoding": "dynamic_array",
        "label": "struct Loan.Data[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)2780": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)4866": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableAndBurnableERC20)4883": {
        "encoding": "inplace",
        "label": "contract IMintableAndBurnableERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)4956": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IWrappedNativeCurrency)4971": {
        "encoding": "inplace",
        "label": "contract IWrappedNativeCurrency",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)4866,t_struct(Data)5375_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)4866",
        "label": "mapping(contract IERC20 => struct CollateralToken.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)5375_storage"
      },
      "t_struct(Data)5375_storage": {
        "encoding": "inplace",
        "label": "struct CollateralToken.Data",
        "members": [
          {
            "astId": 5355,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)4866"
          },
          {
            "astId": 5358,
            "contract": "contracts/Bank.sol:Bank",
            "label": "priceOracle",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPriceOracle)4956"
          },
          {
            "astId": 5360,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilityFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5362,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilizationFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5364,
            "contract": "contracts/Bank.sol:Bank",
            "label": "exchangeFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5366,
            "contract": "contracts/Bank.sol:Bank",
            "label": "developmentFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5368,
            "contract": "contracts/Bank.sol:Bank",
            "label": "initialLoanToValueRatio",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5370,
            "contract": "contracts/Bank.sol:Bank",
            "label": "marginCallLoanToValueRatio",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5372,
            "contract": "contracts/Bank.sol:Bank",
            "label": "liquidationLoanToValueRatio",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5374,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Data)6089_storage": {
        "encoding": "inplace",
        "label": "struct Loan.Data",
        "members": [
          {
            "astId": 6060,
            "contract": "contracts/Bank.sol:Bank",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6062,
            "contract": "contracts/Bank.sol:Bank",
            "label": "isActive",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6064,
            "contract": "contracts/Bank.sol:Bank",
            "label": "borrower",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6067,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)4866"
          },
          {
            "astId": 6069,
            "contract": "contracts/Bank.sol:Bank",
            "label": "isNativeCurrency",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 6072,
            "contract": "contracts/Bank.sol:Bank",
            "label": "priceOracle",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IPriceOracle)4956"
          },
          {
            "astId": 6074,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilityFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6076,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilizationFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6078,
            "contract": "contracts/Bank.sol:Bank",
            "label": "exchangeFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6080,
            "contract": "contracts/Bank.sol:Bank",
            "label": "developmentFee",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6082,
            "contract": "contracts/Bank.sol:Bank",
            "label": "principalAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6084,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6086,
            "contract": "contracts/Bank.sol:Bank",
            "label": "lastDepositAt",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 6088,
            "contract": "contracts/Bank.sol:Bank",
            "label": "lastRepaymentAt",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Set)5674_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableAddressSet.Set",
        "members": [
          {
            "astId": 5669,
            "contract": "contracts/Bank.sol:Bank",
            "label": "elements",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5673,
            "contract": "contracts/Bank.sol:Bank",
            "label": "indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}