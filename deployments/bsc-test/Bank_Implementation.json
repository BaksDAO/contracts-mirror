{
  "address": "0xA92996A22BF8D705283E6DfE25bB605C7e62eB11",
  "abi": [
    {
      "inputs": [],
      "name": "BaksDAOBorrowBelowMinimumPrincipalAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOBorrowZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOCollateralTokenAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOCollateralTokenNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "BaksDAOCollateralTokenTooLargeDecimals",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOCollateralTokenZeroDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAODepositZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOInactiveLoan",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOInitialLoanToValueRatioTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumRequiredSecurityAmount",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOInsufficientSecurityAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOLoanIsSubjectToLiquidation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOLoanNotSubjectToLiquidation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAONativeCurrencyCollateralNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAONativeCurrencyTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAONoNeedToRebalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOOnlyDepositaryAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOPlainNativeCurrencyTransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAORepayZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shortage",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOStabilizationFundOutOfFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOTokenNotAllowedAsCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOTokenNotAllowedToBeSalvaged",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "CallToNonContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "FixedPointMathMulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedCantGoverItself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedGovernorZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyPendingGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeERC20NoReturnData",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CollateralTokenListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CollateralTokenUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernanceTransited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInitialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "InitialLoanToValueRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceTransition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "delta",
          "type": "int256"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Repaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrowInNativeCurrency",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanByCollateralAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanByPrincipalAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "securityAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanBySecurityAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "checkHealth",
      "outputs": [
        {
          "internalType": "enum Bank.Health",
          "name": "health",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stabilizationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "developmentFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marginCallLoanToValueRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationLoanToValueRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "depositInNativeCurrency",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositary",
      "outputs": [
        {
          "internalType": "contract IDepositary",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developmentFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedCollateralTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marginCallLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CollateralToken.Data[]",
          "name": "allowedCollateralTokens",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanToValueRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanToValueRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "getLoans",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRepaymentAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data[]",
          "name": "_loans",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValueLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWrappedNativeCurrency",
          "name": "_wrappedNativeCurrency",
          "type": "address"
        },
        {
          "internalType": "contract ICore",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "contract IMintableAndBurnableERC20",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "contract IDepositary",
          "name": "_depositary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeFund",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_developmentFund",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "listCollateralToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loanIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isNativeCurrency",
          "type": "bool"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stabilizationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "developmentFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRepaymentAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onNewDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "salvage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDepositary",
          "name": "_depositary",
          "type": "address"
        }
      ],
      "name": "setDepositary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newInitialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "setInitialLoanToValueRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IMintableAndBurnableERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        }
      ],
      "name": "transitGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unlistCollateralToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeCurrency",
      "outputs": [
        {
          "internalType": "contract IWrappedNativeCurrency",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x98fff8f6fcf8c80bc57e47b11c1f6836c365864770fb491c6ef289bb13fb49cf",
  "receipt": {
    "to": null,
    "from": "0x21309DA9AD64eA82431758B27cbD63E5d53A556c",
    "contractAddress": "0xA92996A22BF8D705283E6DfE25bB605C7e62eB11",
    "transactionIndex": 4,
    "gasUsed": "4239016",
    "logsBloom": "0x
    "blockHash": "0x109f0edf595cc6fc8a7f8146bf7cc8af51dd8596b6666cb4cb67f7fec850b8af",
    "transactionHash": "0x98fff8f6fcf8c80bc57e47b11c1f6836c365864770fb491c6ef289bb13fb49cf",
    "logs": [],
    "blockNumber": 14441151,
    "cumulativeGasUsed": "9319341",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ec0af5b9c8d7f1e92f8b42cb7156d274",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaksDAOBorrowBelowMinimumPrincipalAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOBorrowZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOCollateralTokenAlreadyListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOCollateralTokenNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"BaksDAOCollateralTokenTooLargeDecimals\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOCollateralTokenZeroDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAODepositZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAOInactiveLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"BaksDAOInitialLoanToValueRatioTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumRequiredSecurityAmount\",\"type\":\"uint256\"}],\"name\":\"BaksDAOInsufficientSecurityAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAOLoanIsSubjectToLiquidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAOLoanNotSubjectToLiquidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAONativeCurrencyCollateralNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAONativeCurrencyTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAONoNeedToRebalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOOnlyDepositaryAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOPlainNativeCurrencyTransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAORepayZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shortage\",\"type\":\"uint256\"}],\"name\":\"BaksDAOStabilizationFundOutOfFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOTokenNotAllowedAsCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOTokenNotAllowedToBeSalvaged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"CallToNonContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FixedPointMathMulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedCantGoverItself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedGovernorZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyPendingGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeERC20NoReturnData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CollateralTokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CollateralTokenUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernanceTransited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInitialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"InitialLoanToValueRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernanceTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrowInNativeCurrency\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanByCollateralAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"loan\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanByPrincipalAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"loan\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"securityAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanBySecurityAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"loan\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"checkHealth\",\"outputs\":[{\"internalType\":\"enum Bank.Health\",\"name\":\"health\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginCallLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"depositInNativeCurrency\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositary\",\"outputs\":[{\"internalType\":\"contract IDepositary\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedCollateralTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginCallLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralToken.Data[]\",\"name\":\"allowedCollateralTokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanToValueRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanToValueRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getLoans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data[]\",\"name\":\"_loans\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWrappedNativeCurrency\",\"name\":\"_wrappedNativeCurrency\",\"type\":\"address\"},{\"internalType\":\"contract ICore\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IMintableAndBurnableERC20\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IDepositary\",\"name\":\"_depositary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developmentFund\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"listCollateralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRepaymentAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onNewDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDepositary\",\"name\":\"_depositary\",\"type\":\"address\"}],\"name\":\"setDepositary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newInitialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"setInitialLoanToValueRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IMintableAndBurnableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"transitGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unlistCollateralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeCurrency\",\"outputs\":[{\"internalType\":\"contract IWrappedNativeCurrency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Andrey Gulitsky\",\"errors\":{\"BaksDAOBorrowBelowMinimumPrincipalAmount()\":[{\"details\":\"Thrown when trying to borrow below minimum principal amount.\"}],\"BaksDAOBorrowZeroAmount()\":[{\"details\":\"Thrown when borrowing a zero amount of stablecoin.\"}],\"BaksDAOCollateralTokenAlreadyListed(address)\":[{\"details\":\"Thrown when trying to list collateral token that's already listed.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOCollateralTokenNotListed(address)\":[{\"details\":\"Thrown when trying to unlist collateral token that's not listed.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOCollateralTokenTooLargeDecimals(address,uint8)\":[{\"details\":\"Thrown when trying to list collateral token that has too large decimals.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOCollateralTokenZeroDecimals(address)\":[{\"details\":\"Thrown when trying to list collateral token that has zero decimals.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAODepositZeroAmount()\":[{\"details\":\"Thrown when depositing a zero amount of collateral token.\"}],\"BaksDAOInactiveLoan(uint256)\":[{\"details\":\"Thrown when trying to interact with inactive loan with `id` id.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAOInitialLoanToValueRatioTooHigh(address,uint256)\":[{\"details\":\"Thrown when trying to set initial loan-to-value ratio that higher than margin call or liquidation ones.\",\"params\":{\"initialLoanToValueRatio\":\"The initial loan-to-value ratio that was tried to set.\",\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOLoanIsSubjectToLiquidation(uint256)\":[{\"details\":\"Thrown when trying to interact with loan with `id` id that is subject to liquidation.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAOLoanNotSubjectToLiquidation(uint256)\":[{\"details\":\"Thrown when trying to liquidate healthy loan with `id` id.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAONativeCurrencyCollateralNotAllowed(uint256)\":[{\"details\":\"Thrown when trying to deposit native currency collateral to the non-wrapped native currency token loan with `id` id.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAONoNeedToRebalance()\":[{\"details\":\"Thrown when there's no need to rebalance the platform.\"}],\"BaksDAORepayZeroAmount()\":[{\"details\":\"Thrown when repaying a zero amount of stablecoin.\"}],\"BaksDAOStabilizationFundOutOfFunds(uint256)\":[{\"details\":\"Thrown when trying to rebalance the platform and there is a shortage of funds to burn.\",\"params\":{\"shortage\":\"Shoratge of funds to burn.\"}}],\"BaksDAOTokenNotAllowedAsCollateral(address)\":[{\"details\":\"Thrown when interacting with a token that's not allowed as collateral.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOTokenNotAllowedToBeSalvaged(address)\":[{\"details\":\"Thrown when trying to salvage one of allowed collateral tokens or stablecoin.\",\"params\":{\"token\":\"The address of the token contract.\"}}]},\"kind\":\"dev\",\"methods\":{\"borrow(address,uint256)\":{\"details\":\"The caller must have allowed this contract to spend a sufficient amount of collateral tokens to cover initial loan-to-value ratio.\",\"params\":{\"amount\":\"The amount of stablecoin to borrow and issue.\",\"collateralToken\":\"The address of the collateral token contract.\"}},\"deposit(uint256,uint256)\":{\"details\":\"The caller must have allowed this contract to spend `amount` of collateral tokens.\",\"params\":{\"amount\":\"The amount of collateral token to deposit.\",\"loanId\":\"The loan id.\"}},\"repay(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of stablecoin to repay.\",\"loanId\":\"The loan id.\"}}},\"title\":\"Core smart contract of BaksDAO platform\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(address,uint256)\":{\"notice\":\"Increases loan's principal on `collateralToken` collateral token and mints `amount` of stablecoin.\"},\"borrowInNativeCurrency(uint256)\":{\"notice\":\"Increases loan's principal on wrapped native currency token and mints stablecoin.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposits `amount` of collateral token to loan with `id` id.\"},\"depositInNativeCurrency(uint256)\":{\"notice\":\"Deposits wrapped native currency token to loan with `id` id.\"},\"repay(uint256,uint256)\":{\"notice\":\"Decreases principal of loan with `id` id by `amount` of stablecoin.\"}},\"notice\":\"You should use this contract to interact with the BaksDAO platform.Only this contract can issue stablecoins.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bank.sol\":\"Bank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IWrappedNativeCurrency.sol\\\";\\nimport \\\"./libraries/AmountNormalization.sol\\\";\\nimport \\\"./libraries/CollateralToken.sol\\\";\\nimport \\\"./libraries/EnumerableAddressSet.sol\\\";\\nimport \\\"./libraries/FixedPointMath.sol\\\";\\nimport \\\"./libraries/Loan.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\nimport {ICore} from \\\"./Core.sol\\\";\\nimport {IERC20, IMintableAndBurnableERC20} from \\\"./interfaces/ERC20.sol\\\";\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {IPriceOracle} from \\\"./interfaces/IPriceOracle.sol\\\";\\nimport {IDepositary} from \\\"./Depositary.sol\\\";\\n\\n/// @dev Thrown when trying to list collateral token that has zero decimals.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenZeroDecimals(IERC20 token);\\n\\n/// @dev Thrown when trying to list collateral token that has too large decimals.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenTooLargeDecimals(IERC20 token, uint8 decimals);\\n\\n/// @dev Thrown when trying to list collateral token that's already listed.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenAlreadyListed(IERC20 token);\\n\\n/// @dev Thrown when trying to unlist collateral token that's not listed.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenNotListed(IERC20 token);\\n\\n/// @dev Thrown when interacting with a token that's not allowed as collateral.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOTokenNotAllowedAsCollateral(IERC20 token);\\n\\n/// @dev Thrown when trying to set initial loan-to-value ratio that higher than margin call or liquidation ones.\\n/// @param token The address of the collateral token contract.\\n/// @param initialLoanToValueRatio The initial loan-to-value ratio that was tried to set.\\nerror BaksDAOInitialLoanToValueRatioTooHigh(IERC20 token, uint256 initialLoanToValueRatio);\\n\\n/// @dev Thrown when trying to interact with inactive loan with `id` id.\\n/// @param id The loan id.\\nerror BaksDAOInactiveLoan(uint256 id);\\n\\n/// @dev Thrown when trying to liquidate healthy loan with `id` id.\\n/// @param id The loan id.\\nerror BaksDAOLoanNotSubjectToLiquidation(uint256 id);\\n/// @dev Thrown when trying to interact with loan with `id` id that is subject to liquidation.\\n/// @param id The loan id.\\nerror BaksDAOLoanIsSubjectToLiquidation(uint256 id);\\n\\n/// @dev Thrown when borrowing a zero amount of stablecoin.\\nerror BaksDAOBorrowZeroAmount();\\n\\n/// @dev Thrown when trying to borrow below minimum principal amount.\\nerror BaksDAOBorrowBelowMinimumPrincipalAmount();\\n\\n/// @dev Thrown when depositing a zero amount of collateral token.\\nerror BaksDAODepositZeroAmount();\\n\\n/// @dev Thrown when repaying a zero amount of stablecoin.\\nerror BaksDAORepayZeroAmount();\\n\\n/// @dev Thrown when there's no need to rebalance the platform.\\nerror BaksDAONoNeedToRebalance();\\n\\n/// @dev Thrown when trying to rebalance the platform and there is a shortage of funds to burn.\\n/// @param shortage Shoratge of funds to burn.\\nerror BaksDAOStabilizationFundOutOfFunds(uint256 shortage);\\n\\n/// @dev Thrown when trying to salvage one of allowed collateral tokens or stablecoin.\\n/// @param token The address of the token contract.\\nerror BaksDAOTokenNotAllowedToBeSalvaged(IERC20 token);\\n\\n/// @dev Thrown when trying to deposit native currency collateral to the non-wrapped native currency token loan\\n/// with `id` id.\\n/// @param id The loan id.\\nerror BaksDAONativeCurrencyCollateralNotAllowed(uint256 id);\\n\\nerror BaksDAONativeCurrencyTransferFailed();\\n\\nerror BaksDAOPlainNativeCurrencyTransferNotAllowed();\\n\\nerror BaksDAOInsufficientSecurityAmount(uint256 minimumRequiredSecurityAmount);\\n\\nerror BaksDAOOnlyDepositaryAllowed();\\n\\n/// @title Core smart contract of BaksDAO platform\\n/// @author Andrey Gulitsky\\n/// @notice You should use this contract to interact with the BaksDAO platform.\\n/// @notice Only this contract can issue stablecoins.\\ncontract Bank is Initializable, Governed, ReentrancyGuard {\\n    using AmountNormalization for IERC20;\\n    using AmountNormalization for IWrappedNativeCurrency;\\n    using CollateralToken for CollateralToken.Data;\\n    using EnumerableAddressSet for EnumerableAddressSet.Set;\\n    using FixedPointMath for uint256;\\n    using Loan for Loan.Data;\\n    using SafeERC20 for IWrappedNativeCurrency;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IMintableAndBurnableERC20;\\n\\n    enum Health {\\n        Ok,\\n        MarginCall,\\n        Liquidation\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n    uint8 internal constant DECIMALS = 18;\\n\\n    IWrappedNativeCurrency public wrappedNativeCurrency;\\n    ICore public core;\\n    IMintableAndBurnableERC20 public stablecoin;\\n    IPriceOracle public priceOracle;\\n\\n    address public operator;\\n    address public liquidator;\\n    address public exchangeFund;\\n    address public developmentFund;\\n\\n    Loan.Data[] public loans;\\n    mapping(address => uint256[]) public loanIds;\\n\\n    mapping(IERC20 => CollateralToken.Data) public collateralTokens;\\n    EnumerableAddressSet.Set internal collateralTokensSet;\\n\\n    IDepositary public depositary;\\n\\n    event CollateralTokenListed(IERC20 indexed token);\\n    event CollateralTokenUnlisted(IERC20 indexed token);\\n\\n    event InitialLoanToValueRatioUpdated(\\n        IERC20 indexed token,\\n        uint256 initialLoanToValueRatio,\\n        uint256 newInitialLoanToValueRatio\\n    );\\n\\n    event Borrow(\\n        uint256 indexed id,\\n        address indexed borrower,\\n        IERC20 indexed token,\\n        uint256 principalAmount,\\n        uint256 collateralAmount,\\n        uint256 initialLoanToValueRatio\\n    );\\n    event Deposit(uint256 indexed id, uint256 collateralAmount);\\n    event Repay(uint256 indexed id, uint256 principalAmount);\\n    event Repaid(uint256 indexed id);\\n\\n    event Liquidated(uint256 indexed id);\\n\\n    event Rebalance(int256 delta);\\n\\n    modifier tokenAllowedAsCollateral(IERC20 token) {\\n        if (!collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOTokenNotAllowedAsCollateral(token);\\n        }\\n        _;\\n    }\\n\\n    modifier onActiveLoan(uint256 id) {\\n        if (id >= loans.length || !loans[id].isActive) {\\n            revert BaksDAOInactiveLoan(id);\\n        }\\n        _;\\n    }\\n\\n    modifier notOnSubjectToLiquidation(uint256 loanId) {\\n        if (checkHealth(loanId) == Health.Liquidation) {\\n            revert BaksDAOLoanIsSubjectToLiquidation(loanId);\\n        }\\n        _;\\n    }\\n\\n    modifier onSubjectToLiquidation(uint256 loanId) {\\n        if (checkHealth(loanId) != Health.Liquidation) {\\n            revert BaksDAOLoanNotSubjectToLiquidation(loanId);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyDepositary() {\\n        if (msg.sender != address(depositary)) {\\n            revert BaksDAOOnlyDepositaryAllowed();\\n        }\\n        _;\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != address(wrappedNativeCurrency)) {\\n            revert BaksDAOPlainNativeCurrencyTransferNotAllowed();\\n        }\\n    }\\n\\n    function initialize(\\n        IWrappedNativeCurrency _wrappedNativeCurrency,\\n        ICore _core,\\n        IMintableAndBurnableERC20 _stablecoin,\\n        IPriceOracle _priceOracle,\\n        IDepositary _depositary,\\n        address _operator,\\n        address _liquidator,\\n        address _exchangeFund,\\n        address _developmentFund\\n    ) external initializer {\\n        initializeReentrancyGuard();\\n        setGovernor(msg.sender);\\n\\n        wrappedNativeCurrency = _wrappedNativeCurrency;\\n        core = _core;\\n        stablecoin = _stablecoin;\\n        priceOracle = _priceOracle;\\n        depositary = _depositary;\\n        operator = _operator;\\n        liquidator = _liquidator;\\n        exchangeFund = _exchangeFund;\\n        developmentFund = _developmentFund;\\n    }\\n\\n    /// @notice Increases loan's principal on `collateralToken` collateral token and mints `amount` of stablecoin.\\n    /// @dev The caller must have allowed this contract to spend a sufficient amount of collateral tokens to cover\\n    /// initial loan-to-value ratio.\\n    /// @param collateralToken The address of the collateral token contract.\\n    /// @param amount The amount of stablecoin to borrow and issue.\\n    function borrow(IERC20 collateralToken, uint256 amount)\\n        external\\n        nonReentrant\\n        tokenAllowedAsCollateral(collateralToken)\\n        returns (Loan.Data memory)\\n    {\\n        Loan.Data memory loan = calculateLoanByPrincipalAmount(collateralToken, amount);\\n\\n        collateralToken.safeTransferFrom(msg.sender, operator, collateralToken.denormalizeAmount(loan.stabilityFee));\\n        collateralToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralToken.denormalizeAmount(loan.collateralAmount)\\n        );\\n\\n        return _createLoan(loan);\\n    }\\n\\n    /// @notice Increases loan's principal on wrapped native currency token and mints stablecoin.\\n    function borrowInNativeCurrency(uint256 amount) external payable nonReentrant returns (Loan.Data memory) {\\n        Loan.Data memory loan = calculateLoanByPrincipalAmount(wrappedNativeCurrency, amount);\\n        loan.isNativeCurrency = true;\\n\\n        uint256 securityAmount = loan.collateralAmount + loan.stabilityFee;\\n        if (msg.value < securityAmount) {\\n            revert BaksDAOInsufficientSecurityAmount(securityAmount);\\n        }\\n\\n        wrappedNativeCurrency.deposit{value: securityAmount}();\\n        wrappedNativeCurrency.safeTransfer(operator, wrappedNativeCurrency.denormalizeAmount(loan.stabilityFee));\\n\\n        uint256 change;\\n        unchecked {\\n            change = msg.value - securityAmount;\\n        }\\n        if (change > 0) {\\n            (bool success, ) = msg.sender.call{value: change}(\\\"\\\");\\n            if (!success) {\\n                revert BaksDAONativeCurrencyTransferFailed();\\n            }\\n        }\\n\\n        return _createLoan(loan);\\n    }\\n\\n    /// @notice Deposits `amount` of collateral token to loan with `id` id.\\n    /// @dev The caller must have allowed this contract to spend `amount` of collateral tokens.\\n    /// @param loanId The loan id.\\n    /// @param amount The amount of collateral token to deposit.\\n    function deposit(uint256 loanId, uint256 amount)\\n        external\\n        nonReentrant\\n        onActiveLoan(loanId)\\n        notOnSubjectToLiquidation(loanId)\\n    {\\n        loans[loanId].collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        _deposit(loanId, amount);\\n    }\\n\\n    /// @notice Deposits wrapped native currency token to loan with `id` id.\\n    function depositInNativeCurrency(uint256 loanId)\\n        external\\n        payable\\n        nonReentrant\\n        onActiveLoan(loanId)\\n        notOnSubjectToLiquidation(loanId)\\n    {\\n        if (loans[loanId].collateralToken != wrappedNativeCurrency) {\\n            revert BaksDAONativeCurrencyCollateralNotAllowed(loanId);\\n        }\\n        wrappedNativeCurrency.deposit{value: msg.value}();\\n        _deposit(loanId, msg.value);\\n    }\\n\\n    /// @notice Decreases principal of loan with `id` id by `amount` of stablecoin.\\n    /// @param loanId The loan id.\\n    /// @param amount The amount of stablecoin to repay.\\n    function repay(uint256 loanId, uint256 amount)\\n        external\\n        nonReentrant\\n        onActiveLoan(loanId)\\n        notOnSubjectToLiquidation(loanId)\\n    {\\n        if (amount == 0) {\\n            revert BaksDAORepayZeroAmount();\\n        }\\n        Loan.Data storage loan = loans[loanId];\\n        loan.principalAmount -= amount;\\n\\n        stablecoin.burn(msg.sender, amount);\\n        loan.lastRepaymentAt = block.timestamp;\\n        if (loan.principalAmount > 0) {\\n            emit Repay(loanId, amount);\\n        } else {\\n            uint256 denormalizedCollateralAmount = loan.collateralToken.denormalizeAmount(loan.collateralAmount);\\n            collateralTokens[loan.collateralToken].collateralAmount -= loan.collateralAmount;\\n\\n            loan.collateralAmount = 0;\\n\\n            stablecoin.burn(address(this), loan.stabilizationFee);\\n\\n            loan.isActive = false;\\n            emit Repaid(loanId);\\n\\n            if (!loan.isNativeCurrency) {\\n                loan.collateralToken.safeTransfer(loan.borrower, denormalizedCollateralAmount);\\n            } else {\\n                wrappedNativeCurrency.withdraw(denormalizedCollateralAmount);\\n                (bool success, ) = msg.sender.call{value: denormalizedCollateralAmount}(\\\"\\\");\\n                if (!success) {\\n                    revert BaksDAONativeCurrencyTransferFailed();\\n                }\\n            }\\n        }\\n    }\\n\\n    function liquidate(uint256 loanId) external nonReentrant onActiveLoan(loanId) onSubjectToLiquidation(loanId) {\\n        Loan.Data storage loan = loans[loanId];\\n\\n        collateralTokens[loan.collateralToken].collateralAmount -= loan.collateralAmount;\\n        loan.collateralToken.safeTransfer(liquidator, loan.collateralToken.denormalizeAmount(loan.collateralAmount));\\n\\n        uint256 collateralValue = loan.getCollateralValue();\\n        stablecoin.burn(liquidator, loan.principalAmount);\\n        stablecoin.burn(address(this), collateralValue - loan.principalAmount);\\n\\n        loan.isActive = false;\\n        emit Liquidated(loanId);\\n    }\\n\\n    function rebalance() external nonReentrant {\\n        uint256 totalValueLocked = getTotalValueLocked();\\n        uint256 totalSupply = stablecoin.totalSupply();\\n\\n        int256 delta = int256(totalSupply) - int256(totalValueLocked);\\n        uint256 absoluteDelta = Math.abs(delta);\\n        uint256 p = absoluteDelta.div(totalSupply);\\n        if (p < core.rebalancingThreshold()) {\\n            revert BaksDAONoNeedToRebalance();\\n        }\\n\\n        if (delta > 0) {\\n            try stablecoin.burn(address(this), absoluteDelta) {} catch {\\n                uint256 balance = stablecoin.balanceOf(address(this));\\n                revert BaksDAOStabilizationFundOutOfFunds(absoluteDelta - balance);\\n            }\\n        } else {\\n            stablecoin.mint(address(this), absoluteDelta);\\n        }\\n\\n        emit Rebalance(delta);\\n    }\\n\\n    function onNewDeposit(IERC20 token, uint256 amount) external onlyDepositary {\\n        if (token == stablecoin) {\\n            return;\\n        }\\n        amount = amount.mul(priceOracle.getNormalizedPrice(token));\\n\\n        stablecoin.mint(address(this), amount.mul(core.stabilizationFee()));\\n        stablecoin.mint(exchangeFund, amount.mul(core.exchangeFee()));\\n        stablecoin.mint(developmentFund, amount.mul(core.developmentFee()));\\n    }\\n\\n    function listCollateralToken(IERC20 token, uint256 initialLoanToValueRatio) external onlyGovernor {\\n        if (collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOCollateralTokenAlreadyListed(token);\\n        }\\n\\n        if (initialLoanToValueRatio >= core.marginCallLoanToValueRatio()) {\\n            revert BaksDAOInitialLoanToValueRatioTooHigh(token, initialLoanToValueRatio);\\n        }\\n\\n        uint8 decimals = token.decimals();\\n        if (decimals == 0) {\\n            revert BaksDAOCollateralTokenZeroDecimals(token);\\n        }\\n        if (decimals > DECIMALS) {\\n            revert BaksDAOCollateralTokenTooLargeDecimals(token, decimals);\\n        }\\n\\n        if (collateralTokensSet.add(address(token))) {\\n            collateralTokens[token] = CollateralToken.Data({\\n                collateralToken: token,\\n                priceOracle: priceOracle,\\n                stabilityFee: core.stabilityFee(),\\n                stabilizationFee: core.stabilizationFee(),\\n                exchangeFee: core.exchangeFee(),\\n                developmentFee: core.developmentFee(),\\n                initialLoanToValueRatio: initialLoanToValueRatio,\\n                marginCallLoanToValueRatio: core.marginCallLoanToValueRatio(),\\n                liquidationLoanToValueRatio: core.liquidationLoanToValueRatio(),\\n                collateralAmount: 0\\n            });\\n\\n            emit CollateralTokenListed(token);\\n            emit InitialLoanToValueRatioUpdated(token, 0, initialLoanToValueRatio);\\n        }\\n    }\\n\\n    function unlistCollateralToken(IERC20 token) external onlyGovernor {\\n        if (!collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOCollateralTokenNotListed(token);\\n        }\\n\\n        if (collateralTokensSet.remove(address(token))) {\\n            delete collateralTokens[token];\\n            emit CollateralTokenUnlisted(token);\\n        }\\n    }\\n\\n    function setInitialLoanToValueRatio(IERC20 token, uint256 newInitialLoanToValueRatio) external onlyGovernor {\\n        if (!collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOCollateralTokenNotListed(token);\\n        }\\n\\n        CollateralToken.Data storage collateralToken = collateralTokens[token];\\n        if (newInitialLoanToValueRatio >= collateralToken.marginCallLoanToValueRatio) {\\n            revert BaksDAOInitialLoanToValueRatioTooHigh(token, newInitialLoanToValueRatio);\\n        }\\n\\n        uint256 initialLoanToValueRatio = collateralToken.initialLoanToValueRatio;\\n        collateralToken.initialLoanToValueRatio = newInitialLoanToValueRatio;\\n\\n        emit InitialLoanToValueRatioUpdated(token, initialLoanToValueRatio, newInitialLoanToValueRatio);\\n    }\\n\\n    function setDepositary(IDepositary _depositary) external onlyGovernor {\\n        depositary = _depositary;\\n    }\\n\\n    function salvage(IERC20 token) external onlyGovernor {\\n        address tokenAddress = address(token);\\n        if (tokenAddress == address(stablecoin) || collateralTokensSet.contains(tokenAddress)) {\\n            revert BaksDAOTokenNotAllowedToBeSalvaged(token);\\n        }\\n        token.safeTransfer(operator, token.balanceOf(address(this)));\\n    }\\n\\n    function getLoans(address borrower) external view returns (Loan.Data[] memory _loans) {\\n        uint256 length = loanIds[borrower].length;\\n        _loans = new Loan.Data[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _loans[i] = loans[loanIds[borrower][i]];\\n        }\\n    }\\n\\n    function getAllowedCollateralTokens()\\n        external\\n        view\\n        returns (CollateralToken.Data[] memory allowedCollateralTokens)\\n    {\\n        uint256 length = collateralTokensSet.elements.length;\\n        allowedCollateralTokens = new CollateralToken.Data[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            allowedCollateralTokens[i] = collateralTokens[IERC20(collateralTokensSet.elements[i])];\\n        }\\n    }\\n\\n    function calculateLoanByPrincipalAmount(IERC20 collateralToken, uint256 principalAmount)\\n        public\\n        view\\n        returns (Loan.Data memory loan)\\n    {\\n        loan = collateralTokens[collateralToken].calculateLoanByPrincipalAmount(principalAmount);\\n    }\\n\\n    function calculateLoanByCollateralAmount(IERC20 collateralToken, uint256 collateralAmount)\\n        public\\n        view\\n        returns (Loan.Data memory loan)\\n    {\\n        loan = collateralTokens[collateralToken].calculateLoanByCollateralAmount(collateralAmount);\\n    }\\n\\n    function calculateLoanBySecurityAmount(IERC20 collateralToken, uint256 securityAmount)\\n        public\\n        view\\n        returns (Loan.Data memory loan)\\n    {\\n        loan = collateralTokens[collateralToken].calculateLoanBySecurityAmount(securityAmount);\\n    }\\n\\n    function getTotalValueLocked() public view returns (uint256 totalValueLocked) {\\n        for (uint256 i = 0; i < collateralTokensSet.elements.length; i++) {\\n            totalValueLocked += collateralTokens[IERC20(collateralTokensSet.elements[i])].getCollateralValue();\\n        }\\n        totalValueLocked += depositary.getTotalValueLocked();\\n    }\\n\\n    function getLoanToValueRatio(uint256 loanId) public view returns (uint256 loanToValueRatio) {\\n        Loan.Data memory loan = loans[loanId];\\n        loanToValueRatio = loan.calculateLoanToValueRatio();\\n    }\\n\\n    function checkHealth(uint256 loanId) public view returns (Health health) {\\n        uint256 loanToValueRatio = getLoanToValueRatio(loanId);\\n        health = loanToValueRatio >= core.liquidationLoanToValueRatio()\\n            ? Health.Liquidation\\n            : loanToValueRatio >= core.marginCallLoanToValueRatio()\\n            ? Health.MarginCall\\n            : Health.Ok;\\n    }\\n\\n    function _createLoan(Loan.Data memory loan) internal returns (Loan.Data memory) {\\n        if (loan.principalAmount == 0) {\\n            revert BaksDAOBorrowZeroAmount();\\n        }\\n        if (loan.principalAmount < core.minimumPrincipalAmount()) {\\n            revert BaksDAOBorrowBelowMinimumPrincipalAmount();\\n        }\\n\\n        stablecoin.mint(address(this), loan.stabilizationFee);\\n        stablecoin.mint(exchangeFund, loan.exchangeFee);\\n        stablecoin.mint(developmentFund, loan.developmentFee);\\n        stablecoin.mint(loan.borrower, loan.principalAmount);\\n\\n        uint256 id = loans.length;\\n        loan.id = id;\\n\\n        loans.push(loan);\\n        loanIds[loan.borrower].push(id);\\n\\n        collateralTokens[loan.collateralToken].collateralAmount += loan.collateralAmount;\\n\\n        emit Borrow(\\n            id,\\n            loan.borrower,\\n            loan.collateralToken,\\n            loan.principalAmount,\\n            loan.collateralAmount,\\n            collateralTokens[loan.collateralToken].initialLoanToValueRatio\\n        );\\n\\n        return loan;\\n    }\\n\\n    function _deposit(uint256 loanId, uint256 amount) internal {\\n        if (amount == 0) {\\n            revert BaksDAODepositZeroAmount();\\n        }\\n\\n        Loan.Data storage loan = loans[loanId];\\n\\n        uint256 normalizedCollateralAmount = loan.collateralToken.normalizeAmount(amount);\\n        loan.collateralAmount += normalizedCollateralAmount;\\n        loan.lastDepositAt = block.timestamp;\\n        collateralTokens[loan.collateralToken].collateralAmount += normalizedCollateralAmount;\\n\\n        emit Deposit(loanId, normalizedCollateralAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xc14473a26e0c9111311b7533ebeffc24dba8bf63e68df98476ee40e0e73198a4\",\"license\":\"BUSL-1.1\"},\"contracts/Core.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\n\\n/// @dev Thrown when trying to set platform fees that don't sum up to one.\\n/// @param stabilizationFee The stabilization fee that was tried to set.\\n/// @param exchangeFee The stabilization fee that was tried to set.\\n/// @param developmentFee The stabilization fee that was tried to set.\\nerror BaksDAOPlatformFeesDontSumUpToOne(uint256 stabilizationFee, uint256 exchangeFee, uint256 developmentFee);\\n\\ninterface ICore {\\n    event MinimumPrincipalAmountUpdated(uint256 minimumPrincipalAmount, uint256 newMinimumPrincipalAmount);\\n    event StabilityFeeUpdated(uint256 stabilityFee, uint256 newStabilityFee);\\n    event RebalancingThresholdUpdated(uint256 rebalancingThreshold, uint256 newRebalancingThreshold);\\n    event PlatformFeesUpdated(\\n        uint256 stabilizationFee,\\n        uint256 newStabilizationFee,\\n        uint256 exchangeFee,\\n        uint256 newExchangeFee,\\n        uint256 developmentFee,\\n        uint256 newDevelopmentFee\\n    );\\n    event MarginCallLoanToValueRatioUpdated(uint256 marginCallLoanToValueRatio, uint256 newMarginCallLoanToValueRatio);\\n    event LiquidationLoanToValueRatioUpdated(\\n        uint256 liqudationLoanToValueRatio,\\n        uint256 newLiquidationLoanToValueRatio\\n    );\\n\\n    event ServicingThresholdUpdated(uint256 servicingThreshold, uint256 newServicingThreshold);\\n    event MinimumLiquidityUpdated(uint256 minimumLiquidity, uint256 newMinimumLiquidity);\\n\\n    event PriceOracleUpdated(address priceOracle, address newPriceOracle);\\n    event BankUpdated(address bank, address newBank);\\n    event DepositaryUpdated(address depositary, address newDepositary);\\n    event ExchangeFundUpdated(address exchangeFund, address newExchangeFund);\\n    event DevelopmentFundUpdated(address developmentFund, address newDevelopmentFund);\\n\\n    function minimumPrincipalAmount() external view returns (uint256);\\n\\n    function stabilityFee() external view returns (uint256);\\n\\n    function stabilizationFee() external view returns (uint256);\\n\\n    function exchangeFee() external view returns (uint256);\\n\\n    function developmentFee() external view returns (uint256);\\n\\n    function marginCallLoanToValueRatio() external view returns (uint256);\\n\\n    function liquidationLoanToValueRatio() external view returns (uint256);\\n\\n    function rebalancingThreshold() external view returns (uint256);\\n\\n    function servicingThreshold() external view returns (uint256);\\n\\n    function minimumLiquidity() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function bank() external view returns (address);\\n\\n    function depositary() external view returns (address);\\n\\n    function exchangeFund() external view returns (address);\\n\\n    function developmentFund() external view returns (address);\\n}\\n\\ncontract Core is Initializable, Governed, ICore {\\n    uint256 internal constant ONE = 100e16;\\n\\n    uint256 public override minimumPrincipalAmount;\\n    uint256 public override stabilityFee;\\n    uint256 public override stabilizationFee;\\n    uint256 public override exchangeFee;\\n    uint256 public override developmentFee;\\n    uint256 public override marginCallLoanToValueRatio;\\n    uint256 public override liquidationLoanToValueRatio;\\n    uint256 public override rebalancingThreshold;\\n\\n    uint256 public override servicingThreshold;\\n    uint256 public override minimumLiquidity;\\n\\n    address public override priceOracle;\\n    address public override bank;\\n    address public override depositary;\\n    address public override exchangeFund;\\n    address public override developmentFund;\\n\\n    function initialize() external initializer {\\n        setGovernor(msg.sender);\\n\\n        minimumPrincipalAmount = 50e18; // 50 BAKS\\n        stabilityFee = 3e16; // 3 %\\n        stabilizationFee = 85e16; // 85 %\\n        exchangeFee = 15e16; // 15 %\\n        developmentFee = 0;\\n        marginCallLoanToValueRatio = 75e16; // 75 %\\n        liquidationLoanToValueRatio = 83e16; // 83 %\\n        rebalancingThreshold = 1e16; // 1 %\\n\\n        servicingThreshold = 1e16; // 1%\\n        minimumLiquidity = 50000e18; // 50000 BAKS\\n    }\\n\\n    function setMinimumPrincipalAmount(uint256 newMinimumPrincipalAmount) external onlyGovernor {\\n        emit StabilityFeeUpdated(minimumPrincipalAmount, newMinimumPrincipalAmount);\\n        minimumPrincipalAmount = newMinimumPrincipalAmount;\\n    }\\n\\n    function setStabilityFee(uint256 newStabilityFee) external onlyGovernor {\\n        emit StabilityFeeUpdated(stabilityFee, newStabilityFee);\\n        stabilityFee = newStabilityFee;\\n    }\\n\\n    function setPlatformFees(\\n        uint256 newStabilizationFee,\\n        uint256 newExchangeFee,\\n        uint256 newDevelopmentFee\\n    ) external onlyGovernor {\\n        if (newStabilizationFee + newExchangeFee + newDevelopmentFee != ONE) {\\n            revert BaksDAOPlatformFeesDontSumUpToOne(newStabilizationFee, newExchangeFee, newDevelopmentFee);\\n        }\\n        emit PlatformFeesUpdated(\\n            stabilizationFee,\\n            newStabilizationFee,\\n            exchangeFee,\\n            newExchangeFee,\\n            developmentFee,\\n            newDevelopmentFee\\n        );\\n        stabilizationFee = newStabilizationFee;\\n        exchangeFee = newExchangeFee;\\n        developmentFee = newDevelopmentFee;\\n    }\\n\\n    function setMarginCallLoanToValueRatio(uint256 newMarginCallLoanToValueRatio) external onlyGovernor {\\n        emit MarginCallLoanToValueRatioUpdated(marginCallLoanToValueRatio, newMarginCallLoanToValueRatio);\\n        marginCallLoanToValueRatio = newMarginCallLoanToValueRatio;\\n    }\\n\\n    function setLiquidationLoanToValueRatio(uint256 newLiquidationLoanToValueRatio) external onlyGovernor {\\n        emit LiquidationLoanToValueRatioUpdated(liquidationLoanToValueRatio, newLiquidationLoanToValueRatio);\\n        liquidationLoanToValueRatio = newLiquidationLoanToValueRatio;\\n    }\\n\\n    function setRebalancingThreshold(uint256 newRebalancingThreshold) external onlyGovernor {\\n        emit RebalancingThresholdUpdated(rebalancingThreshold, newRebalancingThreshold);\\n        rebalancingThreshold = newRebalancingThreshold;\\n    }\\n\\n    function setServicingThreshold(uint256 newServicingThreshold) external onlyGovernor {\\n        emit ServicingThresholdUpdated(servicingThreshold, newServicingThreshold);\\n        servicingThreshold = newServicingThreshold;\\n    }\\n\\n    function setMinimumLiquidity(uint256 newMinimumLiquidity) external onlyGovernor {\\n        emit MinimumLiquidityUpdated(minimumLiquidity, newMinimumLiquidity);\\n        minimumLiquidity = newMinimumLiquidity;\\n    }\\n\\n    function setBank(address newBank) external onlyGovernor {\\n        emit BankUpdated(bank, newBank);\\n        bank = newBank;\\n    }\\n}\\n\",\"keccak256\":\"0x5cdff14c6984bcccd37739dd3e519590a98c4197218fb1e093e4a1049f5c92f0\",\"license\":\"BUSL-1.1\"},\"contracts/Depositary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./libraries/AmountNormalization.sol\\\";\\nimport \\\"./libraries/Deposit.sol\\\";\\nimport \\\"./libraries/EnumerableAddressSet.sol\\\";\\nimport \\\"./libraries/FixedPointMath.sol\\\";\\nimport \\\"./libraries/Magister.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/Pool.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\nimport {IERC20} from \\\"./interfaces/ERC20.sol\\\";\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {IPriceOracle} from \\\"./interfaces/IPriceOracle.sol\\\";\\n\\nerror BaksDAOMagisterAlreadyWhitelisted(address magister);\\nerror BaksDAOMagisterBlacklisted(address magister);\\nerror BaksDAOOnlyDepositorOrMagisterAllowed();\\nerror BaksDAOWithdrawAmountExceedsPrincipal();\\n\\ninterface IBank {\\n    function onNewDeposit(IERC20 token, uint256 amount) external;\\n}\\n\\ninterface IDepositary {\\n    function getTotalValueLocked() external view returns (uint256 totalValueLocked);\\n}\\n\\ncontract Depositary is Initializable, Governed {\\n    using AmountNormalization for IERC20;\\n    using Deposit for Deposit.Data;\\n    using EnumerableAddressSet for EnumerableAddressSet.Set;\\n    using FixedPointMath for uint256;\\n    using Magister for Magister.Data;\\n    using Pool for Pool.Data;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant ONE = 100e16;\\n\\n    IPriceOracle public priceOracle;\\n    IERC20 public stablecoin;\\n    IERC20 public bonusToken;\\n\\n    // TODO: Add `set` functions and events\\n    uint256 public earlyWithdrawalPeriod;\\n    uint256 public earlyWithdrawalFee;\\n\\n    mapping(address => Magister.Data) public magisters;\\n    EnumerableAddressSet.Set internal magistersSet;\\n\\n    Pool.Data[] public pools;\\n\\n    Deposit.Data[] public deposits;\\n    mapping(uint256 => mapping(address => uint256)) public currentDepositIds;\\n\\n    // TODO: Add `set` functions and events\\n    uint256 public workFee;\\n\\n    IBank public bank;\\n\\n    event MagisterWhitelisted(address indexed magister);\\n    event MagisterBlacklisted(address indexed magister);\\n\\n    function initialize(\\n        IERC20 _stablecoin,\\n        IERC20 _bonusToken,\\n        IPriceOracle _priceOracle,\\n        IBank _bank\\n    ) external initializer {\\n        // initializeReentrancyGuard();\\n        setGovernor(msg.sender);\\n\\n        earlyWithdrawalPeriod = 72 hours;\\n        earlyWithdrawalFee = 1e15; // 0,1 %\\n\\n        workFee = 2e16; // 2 %\\n\\n        stablecoin = _stablecoin;\\n        bonusToken = _bonusToken;\\n        priceOracle = _priceOracle;\\n        bank = _bank;\\n\\n        // Add guard pool and deposit\\n        deposits.push(\\n            Deposit.Data({\\n                id: 0,\\n                isActive: false,\\n                depositor: address(0),\\n                magister: address(0),\\n                poolId: 0,\\n                principal: 0,\\n                depositorTotalAccruedRewards: 0,\\n                depositorWithdrawnRewards: 0,\\n                magisterTotalAccruedRewards: 0,\\n                magisterWithdrawnRewards: 0,\\n                createdAt: block.timestamp,\\n                lastDepositAt: block.timestamp,\\n                lastInteractionAt: block.timestamp,\\n                closedAt: block.timestamp\\n            })\\n        );\\n\\n        pools.push(\\n            Pool.Data({\\n                id: 0,\\n                depositToken: IERC20(address(0)),\\n                priceOracle: priceOracle,\\n                isCompounding: false,\\n                depositsAmount: 0,\\n                depositorApr: 0,\\n                magisterApr: 0,\\n                depositorBonusApr: 0,\\n                magisterBonusApr: 0\\n            })\\n        );\\n    }\\n\\n    function deposit(uint256 poolId, uint256 amount) external {\\n        deposit(poolId, amount, address(this));\\n    }\\n\\n    function withdraw(uint256 depositId, uint256 amount) external {\\n        Deposit.Data storage d = deposits[depositId];\\n        Pool.Data storage p = pools[d.poolId];\\n\\n        if (!(msg.sender == d.depositor || msg.sender == d.magister)) {\\n            revert BaksDAOOnlyDepositorOrMagisterAllowed();\\n        }\\n\\n        uint256 normalizedAmount = p.depositToken.normalizeAmount(amount);\\n        accrueRewards(d.id);\\n\\n        uint256 magisterAmount = Math.min(d.magisterTotalAccruedRewards - d.magisterWithdrawnRewards, normalizedAmount);\\n        (\\n            uint256 depositorReward,\\n            uint256 depositorBonusReward,\\n            uint256 magisterReward,\\n            uint256 magisterBonusReward\\n        ) = splitRewards(d.poolId, d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards, magisterAmount);\\n\\n        if (msg.sender == d.magister) {\\n            stablecoin.safeTransfer(d.magister, magisterReward);\\n            if (magisterBonusReward > 0) {\\n                bonusToken.safeTransfer(d.magister, magisterBonusReward);\\n            }\\n\\n            d.magisterWithdrawnRewards += magisterAmount;\\n        } else {\\n            if (normalizedAmount > d.principal) {\\n                revert BaksDAOWithdrawAmountExceedsPrincipal();\\n            }\\n\\n            uint256 fee;\\n            if (p.isCompounding) {\\n                fee = workFee;\\n\\n                if (block.timestamp < d.lastDepositAt + earlyWithdrawalPeriod) {\\n                    fee += earlyWithdrawalFee;\\n                }\\n\\n                depositorReward = depositorReward.mul(ONE - fee);\\n            }\\n\\n            if (p.depositToken != stablecoin) {\\n                p.depositToken.safeTransfer(d.depositor, normalizedAmount);\\n            }\\n            stablecoin.safeTransfer(\\n                d.depositor,\\n                p.depositToken == stablecoin ? normalizedAmount + depositorReward : depositorReward\\n            );\\n            if (depositorBonusReward > 0) {\\n                bonusToken.safeTransfer(d.depositor, depositorBonusReward);\\n            }\\n\\n            p.depositsAmount -= normalizedAmount;\\n            d.principal -= normalizedAmount;\\n            d.depositorWithdrawnRewards += d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards;\\n        }\\n\\n        d.lastInteractionAt = block.timestamp;\\n        if (d.principal == 0) {\\n            d.isActive = false;\\n            d.closedAt = block.timestamp;\\n            delete currentDepositIds[d.poolId][msg.sender];\\n        }\\n    }\\n\\n    function whitelistMagister(address magister) external onlyGovernor {\\n        if (magistersSet.contains(magister)) {\\n            revert BaksDAOMagisterAlreadyWhitelisted(magister);\\n        }\\n\\n        if (magistersSet.add(magister)) {\\n            Magister.Data storage m = magisters[magister];\\n            m.addr = magister;\\n            if (m.createdAt == 0) {\\n                m.createdAt = block.timestamp;\\n            }\\n            m.isActive = true;\\n\\n            emit MagisterWhitelisted(magister);\\n        }\\n    }\\n\\n    function blacklistMagister(address magister) external onlyGovernor {\\n        if (!magistersSet.contains(magister)) {\\n            revert BaksDAOMagisterBlacklisted(magister);\\n        }\\n\\n        if (magistersSet.remove(magister)) {\\n            magisters[magister].isActive = false;\\n            emit MagisterBlacklisted(magister);\\n        }\\n    }\\n\\n    function addPool(\\n        IERC20 depositToken,\\n        bool isCompounding,\\n        uint256 depositorApr,\\n        uint256 magisterApr,\\n        uint256 depositorBonusApr,\\n        uint256 magisterBonusApr\\n    ) external onlyGovernor {\\n        uint256 poolId = pools.length;\\n        pools.push(\\n            Pool.Data({\\n                id: poolId,\\n                depositToken: depositToken,\\n                priceOracle: priceOracle,\\n                isCompounding: isCompounding,\\n                depositsAmount: 0,\\n                depositorApr: depositorApr,\\n                magisterApr: magisterApr,\\n                depositorBonusApr: depositorBonusApr,\\n                magisterBonusApr: magisterBonusApr\\n            })\\n        );\\n    }\\n\\n    function updatePool(\\n        uint256 poolId,\\n        bool isCompounding,\\n        uint256 depositorApr,\\n        uint256 magisterApr,\\n        uint256 depositorBonusApr,\\n        uint256 magisterBonusApr\\n    ) external onlyGovernor {\\n        Pool.Data storage pool = pools[poolId];\\n        pool.isCompounding = isCompounding;\\n        pool.depositorApr = depositorApr;\\n        pool.magisterApr = magisterApr;\\n        pool.depositorBonusApr = depositorBonusApr;\\n        pool.magisterBonusApr = magisterBonusApr;\\n    }\\n\\n    function setBank(IBank _bank) external onlyGovernor {\\n        bank = _bank;\\n    }\\n\\n    function setWorkFee(uint256 _workFee) external onlyGovernor {\\n        workFee = _workFee;\\n    }\\n\\n    function getActiveMagisterAddresses() external view returns (address[] memory activeMagisterAddresses) {\\n        activeMagisterAddresses = magistersSet.elements;\\n    }\\n\\n    function getActiveMagisters() external view returns (Magister.Data[] memory activeMagisters) {\\n        uint256 length = magistersSet.elements.length;\\n        activeMagisters = new Magister.Data[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            activeMagisters[i] = magisters[magistersSet.elements[i]];\\n        }\\n    }\\n\\n    function getPoolsCount() external view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    function getPools() external view returns (Pool.Data[] memory) {\\n        return pools;\\n    }\\n\\n    function getMagisterDepositIds(address magister) external view returns (uint256[] memory) {\\n        return magisters[magister].depositIds;\\n    }\\n\\n    function getTotalValueLocked() external view returns (uint256 totalValueLocked) {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            totalValueLocked += pools[i].getDepositsValue();\\n        }\\n    }\\n\\n    function isMagister(uint256 depositId) external view returns (bool) {\\n        Deposit.Data storage d = deposits[depositId];\\n        return msg.sender == d.magister;\\n    }\\n\\n    function deposit(\\n        uint256 poolId,\\n        uint256 amount,\\n        address magister\\n    ) public {\\n        if (magister == msg.sender || !(magister == address(this) || magisters[magister].isActive)) {\\n            revert BaksDAOMagisterBlacklisted(magister);\\n        }\\n\\n        Pool.Data storage p = pools[poolId];\\n        p.depositToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 normalizedAmount = p.depositToken.normalizeAmount(amount);\\n        p.depositsAmount += normalizedAmount;\\n\\n        if (currentDepositIds[poolId][msg.sender] == 0) {\\n            uint256 id = deposits.length;\\n            deposits.push(\\n                Deposit.Data({\\n                    id: id,\\n                    isActive: true,\\n                    magister: magister,\\n                    depositor: msg.sender,\\n                    poolId: poolId,\\n                    principal: normalizedAmount,\\n                    depositorTotalAccruedRewards: 0,\\n                    depositorWithdrawnRewards: 0,\\n                    magisterTotalAccruedRewards: 0,\\n                    magisterWithdrawnRewards: 0,\\n                    createdAt: block.timestamp,\\n                    lastDepositAt: block.timestamp,\\n                    lastInteractionAt: block.timestamp,\\n                    closedAt: 0\\n                })\\n            );\\n\\n            currentDepositIds[poolId][msg.sender] = id;\\n            if (magister != address(this)) {\\n                magisters[magister].depositIds.push(id);\\n            }\\n            if (p.depositToken != stablecoin) {\\n                bank.onNewDeposit(p.depositToken, normalizedAmount);\\n            }\\n        } else {\\n            Deposit.Data storage d = deposits[currentDepositIds[poolId][msg.sender]];\\n            accrueRewards(d.id);\\n\\n            uint256 r = d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards;\\n            (uint256 depositorRewards, uint256 depositorBonusRewards, , ) = splitRewards(d.poolId, r, 0);\\n            stablecoin.safeTransfer(d.depositor, depositorRewards);\\n            if (depositorBonusRewards > 0) {\\n                bonusToken.safeTransfer(d.depositor, depositorBonusRewards);\\n            }\\n\\n            d.principal += normalizedAmount;\\n            d.depositorWithdrawnRewards += r;\\n            d.lastDepositAt = block.timestamp;\\n            d.lastInteractionAt = block.timestamp;\\n        }\\n    }\\n\\n    function getRewards(uint256 depositId) public view returns (uint256 depositorRewards, uint256 magisterRewards) {\\n        Deposit.Data memory d = deposits[depositId];\\n\\n        (uint256 dr, uint256 mr) = calculateRewards(depositId);\\n        depositorRewards = dr + d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards;\\n        magisterRewards = mr + d.magisterTotalAccruedRewards - d.magisterWithdrawnRewards;\\n    }\\n\\n    function accrueRewards(uint256 depositId) internal {\\n        (uint256 depositorRewards, uint256 magisterRewards) = calculateRewards(depositId);\\n\\n        Deposit.Data storage d = deposits[depositId];\\n        IERC20 depositToken = pools[d.poolId].depositToken;\\n        uint256 depositTokenPrice = depositToken == stablecoin ? ONE : priceOracle.getNormalizedPrice(depositToken);\\n        if (d.magister != address(this) && magisters[d.magister].isActive) {\\n            d.magisterTotalAccruedRewards += magisterRewards;\\n            magisters[d.magister].totalIncome += magisterRewards.mul(depositTokenPrice);\\n        }\\n\\n        d.depositorTotalAccruedRewards += depositorRewards;\\n        if (magisters[msg.sender].isActive) {\\n            magisters[d.magister].totalIncome += depositorRewards.mul(depositTokenPrice);\\n        }\\n    }\\n\\n    function calculateRewards(uint256 depositId)\\n        internal\\n        view\\n        returns (uint256 depositorRewards, uint256 magisterRewards)\\n    {\\n        Deposit.Data memory d = deposits[depositId];\\n        Pool.Data memory p = pools[d.poolId];\\n\\n        uint256 totalRewards = d.principal.mul(\\n            p.calculateMultiplier((block.timestamp - d.lastInteractionAt).mulDiv(ONE, 365 days))\\n        );\\n        uint256 totalApr = p.getTotalApr();\\n\\n        depositorRewards = totalRewards.mulDiv(p.getDepositorApr(), totalApr);\\n        magisterRewards = totalRewards.mulDiv(p.getMagisterApr(), totalApr);\\n    }\\n\\n    function splitRewards(\\n        uint256 poolId,\\n        uint256 _depositorRewards,\\n        uint256 _magisterRewards\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 depositorRewards,\\n            uint256 depositorBonusRewards,\\n            uint256 magisterRewards,\\n            uint256 magisterBonusRewards\\n        )\\n    {\\n        Pool.Data memory p = pools[poolId];\\n\\n        uint256 depositorTotalApr = p.getDepositorApr();\\n        uint256 magisterTotalApr = p.getMagisterApr();\\n        uint256 depositTokenPrice = p.depositToken == stablecoin ? ONE : priceOracle.getNormalizedPrice(p.depositToken);\\n\\n        depositorRewards = _depositorRewards.mul(depositTokenPrice);\\n        magisterRewards = _magisterRewards.mul(depositTokenPrice);\\n\\n        try priceOracle.getNormalizedPrice(bonusToken) returns (uint256 bonusTokenPrice) {\\n            if (bonusTokenPrice > 0) {\\n                depositorBonusRewards = depositorRewards.mulDiv(\\n                    p.depositorBonusApr.mul(bonusTokenPrice),\\n                    depositorTotalApr\\n                );\\n                magisterBonusRewards = magisterRewards.mulDiv(\\n                    p.magisterBonusApr.mul(bonusTokenPrice),\\n                    magisterTotalApr\\n                );\\n\\n                depositorRewards = depositorRewards.mulDiv(p.depositorApr, depositorTotalApr);\\n                magisterRewards = magisterRewards.mulDiv(p.magisterApr, magisterTotalApr);\\n            }\\n        } catch {}\\n    }\\n}\\n\",\"keccak256\":\"0x48a69443643eddfabc75a427c946c3afde65002276a39d03e7c792a5e6ccf3cd\",\"license\":\"BUSL-1.1\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nerror GovernedOnlyGovernorAllowedToCall();\\nerror GovernedOnlyPendingGovernorAllowedToCall();\\nerror GovernedGovernorZeroAddress();\\nerror GovernedCantGoverItself();\\n\\nabstract contract Governed {\\n    address public governor;\\n    address public pendingGovernor;\\n\\n    event PendingGovernanceTransition(address indexed governor, address indexed newGovernor);\\n    event GovernanceTransited(address indexed governor, address indexed newGovernor);\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor) {\\n            revert GovernedOnlyGovernorAllowedToCall();\\n        }\\n        _;\\n    }\\n\\n    function transitGovernance(address newGovernor, bool force) external onlyGovernor {\\n        if (newGovernor == address(0)) {\\n            revert GovernedGovernorZeroAddress();\\n        }\\n        if (newGovernor == address(this)) {\\n            revert GovernedCantGoverItself();\\n        }\\n\\n        pendingGovernor = newGovernor;\\n        if (!force) {\\n            emit PendingGovernanceTransition(governor, newGovernor);\\n        } else {\\n            setGovernor(newGovernor);\\n        }\\n    }\\n\\n    function acceptGovernance() external {\\n        if (msg.sender != pendingGovernor) {\\n            revert GovernedOnlyPendingGovernorAllowedToCall();\\n        }\\n\\n        governor = pendingGovernor;\\n        emit GovernanceTransited(governor, pendingGovernor);\\n    }\\n\\n    function setGovernor(address newGovernor) internal {\\n        governor = newGovernor;\\n        emit GovernanceTransited(governor, newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x39eb94fcb72876408caf31d462e821259a1a35a48f56fafb09b442283432dd71\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IMintableAndBurnableERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x88fd15d408cc6fc41f6aecff5e0722a8b3ec59bc306635524e43715b3e2bf5c1\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\nimport \\\"./../libraries/FixedPointMath.sol\\\";\\n\\n/// @notice Thrown when oracle doesn't provide price for `token` token.\\n/// @param token The address of the token contract.\\nerror PriceOracleTokenUnknown(IERC20 token);\\n/// @notice Thrown when oracle provide stale price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleStalePrice(IERC20 token, uint256 price);\\n/// @notice Thrown when oracle provide negative, zero or in other ways invalid price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleInvalidPrice(IERC20 token, int256 price);\\n\\ninterface IPriceOracle {\\n    /// @notice Gets normalized to 18 decimals price for the `token` token.\\n    /// @param token The address of the token contract.\\n    /// @return normalizedPrice Normalized price.\\n    function getNormalizedPrice(IERC20 token) external view returns (uint256 normalizedPrice);\\n}\\n\",\"keccak256\":\"0x3cfee478a9d2c5f5e7af40f2daedbce24d01ec3f552a21a9ac719fcef21d22c7\",\"license\":\"MIT\"},\"contracts/interfaces/IWrappedNativeCurrency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\n\\ninterface IWrappedNativeCurrency is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0f0c790fb745fa55bd6d0cac3bab3b76aab9e2622b266b89d89dc1595556dc97\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror CallToNonContract(address target);\\n\\nlibrary Address {\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.call(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function delegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.delegatecall(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(account)\\n        }\\n\\n        return codeSize > 0;\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returnData,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returnData;\\n        } else {\\n            if (returnData.length > 0) {\\n                assembly {\\n                    let returnDataSize := mload(returnData)\\n                    revert(add(returnData, 32), returnDataSize)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba7550b67e8e597fcbc05c61eb85d739d80547eb243b78dd1bfa933e8a3490f1\",\"license\":\"MIT\"},\"contracts/libraries/AmountNormalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\n\\nlibrary AmountNormalization {\\n    uint8 internal constant DECIMALS = 18;\\n\\n    function normalizeAmount(IERC20 self, uint256 denormalizedAmount) internal view returns (uint256 normalizedAmount) {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return denormalizedAmount * scale;\\n        }\\n        return denormalizedAmount;\\n    }\\n\\n    function denormalizeAmount(IERC20 self, uint256 normalizedAmount)\\n        internal\\n        view\\n        returns (uint256 denormalizedAmount)\\n    {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return normalizedAmount / scale;\\n        }\\n        return normalizedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x03e0ddb89c09023fd87f8af4db51bf903effbf488cbd28162f0bfb363f1c9058\",\"license\":\"MIT\"},\"contracts/libraries/CollateralToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport \\\"./Loan.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary CollateralToken {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        IERC20 collateralToken;\\n        IPriceOracle priceOracle;\\n        uint256 stabilityFee;\\n        uint256 stabilizationFee;\\n        uint256 exchangeFee;\\n        uint256 developmentFee;\\n        uint256 initialLoanToValueRatio;\\n        uint256 marginCallLoanToValueRatio;\\n        uint256 liquidationLoanToValueRatio;\\n        uint256 collateralAmount;\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n\\n    function calculateLoanByPrincipalAmount(Data memory self, uint256 principalAmount)\\n        internal\\n        view\\n        returns (Loan.Data memory)\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n\\n        uint256 restOfIssuance = principalAmount.mul(ONE - self.initialLoanToValueRatio).div(\\n            self.initialLoanToValueRatio\\n        );\\n        uint256 stabilizationFee = restOfIssuance.mul(self.stabilizationFee);\\n        uint256 exchangeFee = restOfIssuance.mul(self.exchangeFee);\\n        uint256 developmentFee = restOfIssuance.mul(self.developmentFee);\\n\\n        uint256 collateralAmount = principalAmount.div(self.initialLoanToValueRatio.mul(collateralTokenPrice));\\n        uint256 stabilityFee = self.stabilityFee.mul(principalAmount).div(collateralTokenPrice);\\n\\n        return\\n            Loan.Data({\\n                id: 0,\\n                isActive: true,\\n                borrower: msg.sender,\\n                collateralToken: self.collateralToken,\\n                isNativeCurrency: false,\\n                priceOracle: self.priceOracle,\\n                stabilityFee: stabilityFee,\\n                stabilizationFee: stabilizationFee,\\n                exchangeFee: exchangeFee,\\n                developmentFee: developmentFee,\\n                principalAmount: principalAmount,\\n                collateralAmount: collateralAmount,\\n                lastDepositAt: block.timestamp,\\n                lastRepaymentAt: block.timestamp\\n            });\\n    }\\n\\n    function calculateLoanByCollateralAmount(Data memory self, uint256 collateralAmount)\\n        internal\\n        view\\n        returns (Loan.Data memory)\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        uint256 principalAmount = collateralAmount.mul(self.initialLoanToValueRatio).mul(collateralTokenPrice);\\n\\n        uint256 restOfIssuance = principalAmount.mul(ONE - self.initialLoanToValueRatio).div(\\n            self.initialLoanToValueRatio\\n        );\\n        uint256 stabilizationFee = restOfIssuance.mul(self.stabilizationFee);\\n        uint256 exchangeFee = restOfIssuance.mul(self.exchangeFee);\\n        uint256 developmentFee = restOfIssuance.mul(self.developmentFee);\\n\\n        uint256 stabilityFee = self.stabilityFee.mul(principalAmount).div(collateralTokenPrice);\\n\\n        return\\n            Loan.Data({\\n                id: 0,\\n                isActive: true,\\n                borrower: msg.sender,\\n                collateralToken: self.collateralToken,\\n                isNativeCurrency: false,\\n                priceOracle: self.priceOracle,\\n                stabilityFee: stabilityFee,\\n                stabilizationFee: stabilizationFee,\\n                exchangeFee: exchangeFee,\\n                developmentFee: developmentFee,\\n                principalAmount: principalAmount,\\n                collateralAmount: collateralAmount,\\n                lastDepositAt: block.timestamp,\\n                lastRepaymentAt: block.timestamp\\n            });\\n    }\\n\\n    function calculateLoanBySecurityAmount(Data memory self, uint256 securityAmount)\\n        internal\\n        view\\n        returns (Loan.Data memory)\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        uint256 c = self.stabilityFee.mul(self.initialLoanToValueRatio);\\n        uint256 principalAmount = securityAmount.mul(self.initialLoanToValueRatio).mul(collateralTokenPrice).div(\\n            c + ONE\\n        );\\n        return calculateLoanByPrincipalAmount(self, principalAmount);\\n    }\\n\\n    function getCollateralValue(Data memory self) internal view returns (uint256 collateralValue) {\\n        if (self.collateralAmount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        collateralValue = self.collateralAmount.mul(collateralTokenPrice);\\n    }\\n}\\n\",\"keccak256\":\"0xb6f85f33b1e835bb4a1aba2e20cf24041438fa96014adcc00dd82557a8d73ca9\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Deposit {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        uint256 id;\\n        bool isActive;\\n        address depositor;\\n        address magister;\\n        uint256 poolId;\\n        uint256 principal;\\n        uint256 depositorTotalAccruedRewards;\\n        uint256 depositorWithdrawnRewards;\\n        uint256 magisterTotalAccruedRewards;\\n        uint256 magisterWithdrawnRewards;\\n        uint256 createdAt;\\n        uint256 lastDepositAt;\\n        uint256 lastInteractionAt;\\n        uint256 closedAt;\\n    }\\n}\\n\",\"keccak256\":\"0xea20fe116cc1d8c2d51be9ffde213a70217db2014d2a3eeea468b0cce6bbb1d1\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/EnumerableAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary EnumerableAddressSet {\\n    struct Set {\\n        address[] elements;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    function add(Set storage self, address element) internal returns (bool) {\\n        if (contains(self, element)) {\\n            return false;\\n        }\\n\\n        self.elements.push(element);\\n        self.indexes[element] = self.elements.length;\\n\\n        return true;\\n    }\\n\\n    function remove(Set storage self, address element) internal returns (bool) {\\n        uint256 elementIndex = indexOf(self, element);\\n        if (elementIndex == 0) {\\n            return false;\\n        }\\n\\n        uint256 indexToRemove = elementIndex - 1;\\n        uint256 lastIndex = count(self) - 1;\\n        if (indexToRemove != lastIndex) {\\n            address lastElement = self.elements[lastIndex];\\n            self.elements[indexToRemove] = lastElement;\\n            self.indexes[lastElement] = elementIndex;\\n        }\\n        self.elements.pop();\\n        delete self.indexes[element];\\n\\n        return true;\\n    }\\n\\n    function indexOf(Set storage self, address element) internal view returns (uint256) {\\n        return self.indexes[element];\\n    }\\n\\n    function contains(Set storage self, address element) internal view returns (bool) {\\n        return indexOf(self, element) != 0;\\n    }\\n\\n    function count(Set storage self) internal view returns (uint256) {\\n        return self.elements.length;\\n    }\\n}\\n\",\"keccak256\":\"0x5a89f77a4b785e811178f5043d48315fc0ec91b362cd08eca73309ddbff4a654\",\"license\":\"MIT\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror FixedPointMathMulDivOverflow(uint256 prod1, uint256 denominator);\\nerror FixedPointMathExpArgumentTooBig(uint256 a);\\nerror FixedPointMathExp2ArgumentTooBig(uint256 a);\\n\\n/// @title Fixed point math implementation\\nlibrary FixedPointMath {\\n    uint256 internal constant SCALE = 1e18;\\n    uint256 internal constant HALF_SCALE = 5e17;\\n    /// @dev Largest power of two divisor of scale.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n    /// @dev Scale inverted mod 2**256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert FixedPointMathMulDivOverflow(prod1, SCALE);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(a, b, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := add(div(prod0, SCALE), roundUpUnit)\\n            }\\n            return result;\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        result = mulDiv(a, SCALE, b);\\n    }\\n\\n    /// @notice Calculates \\u230aa \\u00d7 b \\u00f7 denominator\\u230b with full precision.\\n    /// @dev Credit to Remco Bloemen under MIT license https://2\\u03c0.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= denominator) {\\n            revert FixedPointMathMulDivOverflow(prod1, denominator);\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        unchecked {\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                denominator := div(denominator, lpotdod)\\n                prod0 := div(prod0, lpotdod)\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n            prod0 |= prod1 * lpotdod;\\n\\n            uint256 inverse = (3 * denominator) ^ 2;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n\\n            result = prod0 * inverse;\\n        }\\n    }\\n\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        if (x >= 133_084258667509499441) {\\n            revert FixedPointMathExpArgumentTooBig(x);\\n        }\\n\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        if (x >= 192e18) {\\n            revert FixedPointMathExp2ArgumentTooBig(x);\\n        }\\n\\n        unchecked {\\n            x = (x << 64) / SCALE;\\n\\n            result = 0x800000000000000000000000000000000000000000000000;\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcfa2898f1abbe679d9f13f2b85fd5c2cf5b011022460e0c5a9ffbb62875c0232\",\"license\":\"MIT\"},\"contracts/libraries/Loan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Loan {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        uint256 id;\\n        bool isActive;\\n        address borrower;\\n        IERC20 collateralToken;\\n        bool isNativeCurrency;\\n        IPriceOracle priceOracle;\\n        uint256 stabilityFee;\\n        uint256 stabilizationFee;\\n        uint256 exchangeFee;\\n        uint256 developmentFee;\\n        uint256 principalAmount;\\n        uint256 collateralAmount;\\n        uint256 lastDepositAt;\\n        uint256 lastRepaymentAt;\\n    }\\n\\n    function getCollateralValue(Data memory self) internal view returns (uint256 collateralValue) {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        collateralValue = self.collateralAmount.mul(collateralTokenPrice);\\n    }\\n\\n    function calculateLoanToValueRatio(Data memory self) internal view returns (uint256 loanToValueRatio) {\\n        if (self.principalAmount == 0) {\\n            return 0;\\n        }\\n        if (self.collateralAmount == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        loanToValueRatio = self.principalAmount.div(getCollateralValue(self));\\n    }\\n}\\n\",\"keccak256\":\"0xeb95529c4d3298f63fda9bf64fb9a2474f9607e7576f72d2cc65cf8bafea0c9b\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Magister.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Magister {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        bool isActive;\\n        uint256 createdAt;\\n        address addr;\\n        uint256 totalIncome;\\n        uint256[] depositIds;\\n    }\\n}\\n\",\"keccak256\":\"0x7026bf2388976af39a24b77c68b48759efefc66073885ec99c17a4dbe40ce53f\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Math {\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a >= 0 ? uint256(a) : uint256(-a);\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        uint256 xAux = x;\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        uint256 repeat = 7;\\n        while (repeat > 0) {\\n            result = (result + x / result) >> 1;\\n            repeat--;\\n        }\\n        uint256 roundedDownResult = x / result;\\n\\n        return result >= roundedDownResult ? roundedDownResult : result;\\n    }\\n\\n    function fpsqrt(uint256 a) internal pure returns (uint256 result) {\\n        if (a == 0) result = 0;\\n        else result = sqrt(a) * 1e9;\\n    }\\n}\\n\",\"keccak256\":\"0xcfcc7b98109ee926aad0fd0b90b018bfae27006bc923c361654c501347ffc8eb\",\"license\":\"MIT\"},\"contracts/libraries/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Pool {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        uint256 id;\\n        IERC20 depositToken;\\n        IPriceOracle priceOracle;\\n        bool isCompounding;\\n        uint256 depositsAmount;\\n        uint256 depositorApr;\\n        uint256 magisterApr;\\n        uint256 depositorBonusApr;\\n        uint256 magisterBonusApr;\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n\\n    function getDepositsValue(Data memory self) internal view returns (uint256 depositsValue) {\\n        if (self.depositsAmount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 depositTokenPrice = self.priceOracle.getNormalizedPrice(self.depositToken);\\n        depositsValue = self.depositsAmount.mul(depositTokenPrice);\\n    }\\n\\n    function calculateMultiplier(Data memory self, uint256 partOfYearDeposited)\\n        internal\\n        pure\\n        returns (uint256 multiplier)\\n    {\\n        uint256 totalApr = getTotalApr(self);\\n        if (!self.isCompounding) {\\n            multiplier = totalApr.mul(partOfYearDeposited);\\n        } else {\\n            multiplier = FixedPointMath.exp(totalApr.mul(partOfYearDeposited)) - ONE;\\n        }\\n    }\\n\\n    function getDepositorApr(Data memory self) internal pure returns (uint256 depositorApr) {\\n        depositorApr = self.depositorApr + self.depositorBonusApr;\\n    }\\n\\n    function getMagisterApr(Data memory self) internal pure returns (uint256 magisterApr) {\\n        magisterApr = self.magisterApr + self.magisterBonusApr;\\n    }\\n\\n    function getTotalApr(Data memory self) internal pure returns (uint256 totalApr) {\\n        totalApr = getDepositorApr(self) + getMagisterApr(self);\\n    }\\n}\\n\",\"keccak256\":\"0x9566414fd2d62274f8254f22a5c5aa4c10fb129f74ca9942c7ea9d7c30ae7075\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror ReentrancyGuardReentrantCall();\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private status;\\n\\n    modifier nonReentrant() {\\n        if (status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        status = ENTERED;\\n\\n        _;\\n\\n        status = NOT_ENTERED;\\n    }\\n\\n    function initializeReentrancyGuard() internal {\\n        status = NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x835209f9c4f205f63add0eef372bfec3798a89d40f83e70262128edc81a49115\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\nerror SafeERC20NoReturnData();\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, amount));\\n    }\\n\\n    function callWithOptionalReturn(IERC20 token, bytes memory data) internal {\\n        address tokenAddress = address(token);\\n\\n        bytes memory returnData = tokenAddress.functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returnData.length > 0) {\\n            if (!abi.decode(returnData, (bool))) {\\n                revert SafeERC20NoReturnData();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bf8463bfe7a7352ddc06faf7069e89e1028d1c6dc8d4b34f59fb7eb869b661c\",\"license\":\"MIT\"},\"contracts/libraries/Upgradability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./Address.sol\\\";\\n\\nerror EIP1967ImplementationIsNotContract(address implementation);\\nerror ContractAlreadyInitialized();\\nerror OnlyProxyCallAllowed();\\nerror OnlyCurrentImplementationAllowed();\\n\\nlibrary EIP1967 {\\n    using Address for address;\\n\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    event Upgraded(address indexed newImplementation);\\n\\n    function upgradeTo(address newImplementation) internal {\\n        if (!newImplementation.isContract()) {\\n            revert EIP1967ImplementationIsNotContract(newImplementation);\\n        }\\n\\n        assembly {\\n            sstore(IMPLEMENTATION_SLOT, newImplementation)\\n        }\\n\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    function getImplementation() internal view returns (address implementation) {\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_SLOT)\\n        }\\n    }\\n}\\n\\ncontract Proxy {\\n    using Address for address;\\n\\n    constructor(address implementation, bytes memory data) {\\n        EIP1967.upgradeTo(implementation);\\n        implementation.delegateCall(data, \\\"Proxy: construction failed\\\");\\n    }\\n\\n    receive() external payable {\\n        delegateCall();\\n    }\\n\\n    fallback() external payable {\\n        delegateCall();\\n    }\\n\\n    function delegateCall() internal {\\n        address implementation = EIP1967.getImplementation();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Upgradeable {\\n    address private immutable self = address(this);\\n\\n    modifier onlyProxy() {\\n        if (address(this) == self) {\\n            revert OnlyProxyCallAllowed();\\n        }\\n        if (EIP1967.getImplementation() != self) {\\n            revert OnlyCurrentImplementationAllowed();\\n        }\\n        _;\\n    }\\n\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        EIP1967.upgradeTo(newImplementation);\\n    }\\n}\\n\\nabstract contract Initializable {\\n    bool private initializing;\\n    bool private initialized;\\n\\n    modifier initializer() {\\n        if (!initializing && initialized) {\\n            revert ContractAlreadyInitialized();\\n        }\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3091e63c4fcc7642bcc850ec9c37030b6b7c0c210dcace49f8ba2b930211f88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Andrey Gulitsky",
    "errors": {
      "BaksDAOBorrowBelowMinimumPrincipalAmount()": [
        {
          "details": "Thrown when trying to borrow below minimum principal amount."
        }
      ],
      "BaksDAOBorrowZeroAmount()": [
        {
          "details": "Thrown when borrowing a zero amount of stablecoin."
        }
      ],
      "BaksDAOCollateralTokenAlreadyListed(address)": [
        {
          "details": "Thrown when trying to list collateral token that's already listed.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOCollateralTokenNotListed(address)": [
        {
          "details": "Thrown when trying to unlist collateral token that's not listed.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOCollateralTokenTooLargeDecimals(address,uint8)": [
        {
          "details": "Thrown when trying to list collateral token that has too large decimals.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOCollateralTokenZeroDecimals(address)": [
        {
          "details": "Thrown when trying to list collateral token that has zero decimals.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAODepositZeroAmount()": [
        {
          "details": "Thrown when depositing a zero amount of collateral token."
        }
      ],
      "BaksDAOInactiveLoan(uint256)": [
        {
          "details": "Thrown when trying to interact with inactive loan with `id` id.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAOInitialLoanToValueRatioTooHigh(address,uint256)": [
        {
          "details": "Thrown when trying to set initial loan-to-value ratio that higher than margin call or liquidation ones.",
          "params": {
            "initialLoanToValueRatio": "The initial loan-to-value ratio that was tried to set.",
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOLoanIsSubjectToLiquidation(uint256)": [
        {
          "details": "Thrown when trying to interact with loan with `id` id that is subject to liquidation.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAOLoanNotSubjectToLiquidation(uint256)": [
        {
          "details": "Thrown when trying to liquidate healthy loan with `id` id.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAONativeCurrencyCollateralNotAllowed(uint256)": [
        {
          "details": "Thrown when trying to deposit native currency collateral to the non-wrapped native currency token loan with `id` id.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAONoNeedToRebalance()": [
        {
          "details": "Thrown when there's no need to rebalance the platform."
        }
      ],
      "BaksDAORepayZeroAmount()": [
        {
          "details": "Thrown when repaying a zero amount of stablecoin."
        }
      ],
      "BaksDAOStabilizationFundOutOfFunds(uint256)": [
        {
          "details": "Thrown when trying to rebalance the platform and there is a shortage of funds to burn.",
          "params": {
            "shortage": "Shoratge of funds to burn."
          }
        }
      ],
      "BaksDAOTokenNotAllowedAsCollateral(address)": [
        {
          "details": "Thrown when interacting with a token that's not allowed as collateral.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOTokenNotAllowedToBeSalvaged(address)": [
        {
          "details": "Thrown when trying to salvage one of allowed collateral tokens or stablecoin.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "borrow(address,uint256)": {
        "details": "The caller must have allowed this contract to spend a sufficient amount of collateral tokens to cover initial loan-to-value ratio.",
        "params": {
          "amount": "The amount of stablecoin to borrow and issue.",
          "collateralToken": "The address of the collateral token contract."
        }
      },
      "deposit(uint256,uint256)": {
        "details": "The caller must have allowed this contract to spend `amount` of collateral tokens.",
        "params": {
          "amount": "The amount of collateral token to deposit.",
          "loanId": "The loan id."
        }
      },
      "repay(uint256,uint256)": {
        "params": {
          "amount": "The amount of stablecoin to repay.",
          "loanId": "The loan id."
        }
      }
    },
    "title": "Core smart contract of BaksDAO platform",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(address,uint256)": {
        "notice": "Increases loan's principal on `collateralToken` collateral token and mints `amount` of stablecoin."
      },
      "borrowInNativeCurrency(uint256)": {
        "notice": "Increases loan's principal on wrapped native currency token and mints stablecoin."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposits `amount` of collateral token to loan with `id` id."
      },
      "depositInNativeCurrency(uint256)": {
        "notice": "Deposits wrapped native currency token to loan with `id` id."
      },
      "repay(uint256,uint256)": {
        "notice": "Decreases principal of loan with `id` id by `amount` of stablecoin."
      }
    },
    "notice": "You should use this contract to interact with the BaksDAO platform.Only this contract can issue stablecoins.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9711,
        "contract": "contracts/Bank.sol:Bank",
        "label": "initializing",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9713,
        "contract": "contracts/Bank.sol:Bank",
        "label": "initialized",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6325,
        "contract": "contracts/Bank.sol:Bank",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6327,
        "contract": "contracts/Bank.sol:Bank",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9429,
        "contract": "contracts/Bank.sol:Bank",
        "label": "status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 186,
        "contract": "contracts/Bank.sol:Bank",
        "label": "wrappedNativeCurrency",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWrappedNativeCurrency)6650"
      },
      {
        "astId": 189,
        "contract": "contracts/Bank.sol:Bank",
        "label": "core",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICore)2959"
      },
      {
        "astId": 192,
        "contract": "contracts/Bank.sol:Bank",
        "label": "stablecoin",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IMintableAndBurnableERC20)6562"
      },
      {
        "astId": 195,
        "contract": "contracts/Bank.sol:Bank",
        "label": "priceOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPriceOracle)6635"
      },
      {
        "astId": 197,
        "contract": "contracts/Bank.sol:Bank",
        "label": "operator",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 199,
        "contract": "contracts/Bank.sol:Bank",
        "label": "liquidator",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 201,
        "contract": "contracts/Bank.sol:Bank",
        "label": "exchangeFund",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 203,
        "contract": "contracts/Bank.sol:Bank",
        "label": "developmentFund",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 207,
        "contract": "contracts/Bank.sol:Bank",
        "label": "loans",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Data)8934_storage)dyn_storage"
      },
      {
        "astId": 212,
        "contract": "contracts/Bank.sol:Bank",
        "label": "loanIds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 218,
        "contract": "contracts/Bank.sol:Bank",
        "label": "collateralTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_contract(IERC20)6545,t_struct(Data)7054_storage)"
      },
      {
        "astId": 221,
        "contract": "contracts/Bank.sol:Bank",
        "label": "collateralTokensSet",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Set)7401_storage"
      },
      {
        "astId": 224,
        "contract": "contracts/Bank.sol:Bank",
        "label": "depositary",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IDepositary)3294"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Data)8934_storage)dyn_storage": {
        "base": "t_struct(Data)8934_storage",
        "encoding": "dynamic_array",
        "label": "struct Loan.Data[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)2959": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_contract(IDepositary)3294": {
        "encoding": "inplace",
        "label": "contract IDepositary",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)6545": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableAndBurnableERC20)6562": {
        "encoding": "inplace",
        "label": "contract IMintableAndBurnableERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)6635": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IWrappedNativeCurrency)6650": {
        "encoding": "inplace",
        "label": "contract IWrappedNativeCurrency",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)6545,t_struct(Data)7054_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)6545",
        "label": "mapping(contract IERC20 => struct CollateralToken.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)7054_storage"
      },
      "t_struct(Data)7054_storage": {
        "encoding": "inplace",
        "label": "struct CollateralToken.Data",
        "members": [
          {
            "astId": 7034,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)6545"
          },
          {
            "astId": 7037,
            "contract": "contracts/Bank.sol:Bank",
            "label": "priceOracle",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPriceOracle)6635"
          },
          {
            "astId": 7039,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilityFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7041,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilizationFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7043,
            "contract": "contracts/Bank.sol:Bank",
            "label": "exchangeFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7045,
            "contract": "contracts/Bank.sol:Bank",
            "label": "developmentFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7047,
            "contract": "contracts/Bank.sol:Bank",
            "label": "initialLoanToValueRatio",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7049,
            "contract": "contracts/Bank.sol:Bank",
            "label": "marginCallLoanToValueRatio",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7051,
            "contract": "contracts/Bank.sol:Bank",
            "label": "liquidationLoanToValueRatio",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 7053,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Data)8934_storage": {
        "encoding": "inplace",
        "label": "struct Loan.Data",
        "members": [
          {
            "astId": 8905,
            "contract": "contracts/Bank.sol:Bank",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8907,
            "contract": "contracts/Bank.sol:Bank",
            "label": "isActive",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8909,
            "contract": "contracts/Bank.sol:Bank",
            "label": "borrower",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8912,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)6545"
          },
          {
            "astId": 8914,
            "contract": "contracts/Bank.sol:Bank",
            "label": "isNativeCurrency",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 8917,
            "contract": "contracts/Bank.sol:Bank",
            "label": "priceOracle",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IPriceOracle)6635"
          },
          {
            "astId": 8919,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilityFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8921,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilizationFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8923,
            "contract": "contracts/Bank.sol:Bank",
            "label": "exchangeFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8925,
            "contract": "contracts/Bank.sol:Bank",
            "label": "developmentFee",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8927,
            "contract": "contracts/Bank.sol:Bank",
            "label": "principalAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8929,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 8931,
            "contract": "contracts/Bank.sol:Bank",
            "label": "lastDepositAt",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8933,
            "contract": "contracts/Bank.sol:Bank",
            "label": "lastRepaymentAt",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Set)7401_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableAddressSet.Set",
        "members": [
          {
            "astId": 7396,
            "contract": "contracts/Bank.sol:Bank",
            "label": "elements",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7400,
            "contract": "contracts/Bank.sol:Bank",
            "label": "indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}