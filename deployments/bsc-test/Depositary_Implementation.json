{
  "address": "0xC510bE9C28c7b71aEfd3A55121B9a8135Df97519",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "magister",
          "type": "address"
        }
      ],
      "name": "BaksDAOMagisterAlreadyWhitelisted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "magister",
          "type": "address"
        }
      ],
      "name": "BaksDAOMagisterBlacklisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOOnlyDepositorOrMagisterAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOWithdrawAmountExceedsPrincipal",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "CallToNonContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "name": "FixedPointMathExp2ArgumentTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "name": "FixedPointMathExpArgumentTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "FixedPointMathMulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedCantGoverItself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedGovernorZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyPendingGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeERC20NoReturnData",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernanceTransited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "magister",
          "type": "address"
        }
      ],
      "name": "MagisterBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "magister",
          "type": "address"
        }
      ],
      "name": "MagisterWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceTransition",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isCompounding",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "depositorApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "magisterApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorBonusApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "magisterBonusApr",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "contract IBank",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "magister",
          "type": "address"
        }
      ],
      "name": "blacklistMagister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentDepositIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "magister",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "magister",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorTotalAccruedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorWithdrawnRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "magisterTotalAccruedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "magisterWithdrawnRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastInteractionAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyWithdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyWithdrawalPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveMagisterAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "activeMagisterAddresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveMagisters",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalIncome",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "depositIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Magister.Data[]",
          "name": "activeMagisters",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "magister",
          "type": "address"
        }
      ],
      "name": "getMagisterDepositIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isCompounding",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "depositsAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositorApr",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "magisterApr",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositorBonusApr",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "magisterBonusApr",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.Data[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositorRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "magisterRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValueLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_bonusToken",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "contract IBank",
          "name": "_bank",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "isMagister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "magisters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalIncome",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isCompounding",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "depositsAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "magisterApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorBonusApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "magisterBonusApr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBank",
          "name": "_bank",
          "type": "address"
        }
      ],
      "name": "setBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_workFee",
          "type": "uint256"
        }
      ],
      "name": "setWorkFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        }
      ],
      "name": "transitGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isCompounding",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "depositorApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "magisterApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorBonusApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "magisterBonusApr",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "magister",
          "type": "address"
        }
      ],
      "name": "whitelistMagister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeff38a9c6ba135154d99940ebd8f0bc3730c308fa37fc58be75be761c558c71c",
  "receipt": {
    "to": null,
    "from": "0x21309DA9AD64eA82431758B27cbD63E5d53A556c",
    "contractAddress": "0xC510bE9C28c7b71aEfd3A55121B9a8135Df97519",
    "transactionIndex": 1,
    "gasUsed": "3374080",
    "logsBloom": "0x
    "blockHash": "0x01dd385b0a5fe1db5d8366f15ea449e7e676d19313cb474fe6217bf9751deb8e",
    "transactionHash": "0xeff38a9c6ba135154d99940ebd8f0bc3730c308fa37fc58be75be761c558c71c",
    "logs": [],
    "blockNumber": 14441170,
    "cumulativeGasUsed": "3856800",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ec0af5b9c8d7f1e92f8b42cb7156d274",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"magister\",\"type\":\"address\"}],\"name\":\"BaksDAOMagisterAlreadyWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"magister\",\"type\":\"address\"}],\"name\":\"BaksDAOMagisterBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOOnlyDepositorOrMagisterAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOWithdrawAmountExceedsPrincipal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"CallToNonContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"FixedPointMathExp2ArgumentTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"FixedPointMathExpArgumentTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FixedPointMathMulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedCantGoverItself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedGovernorZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyPendingGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeERC20NoReturnData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernanceTransited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"magister\",\"type\":\"address\"}],\"name\":\"MagisterBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"magister\",\"type\":\"address\"}],\"name\":\"MagisterWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernanceTransition\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCompounding\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositorApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorBonusApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterBonusApr\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract IBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"magister\",\"type\":\"address\"}],\"name\":\"blacklistMagister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentDepositIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"magister\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"magister\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorTotalAccruedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorWithdrawnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterTotalAccruedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterWithdrawnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteractionAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawalPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveMagisterAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"activeMagisterAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveMagisters\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Magister.Data[]\",\"name\":\"activeMagisters\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"magister\",\"type\":\"address\"}],\"name\":\"getMagisterDepositIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCompounding\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorBonusApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterBonusApr\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.Data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositorRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_bonusToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IBank\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"isMagister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"magisters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalIncome\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCompounding\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorBonusApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterBonusApr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBank\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workFee\",\"type\":\"uint256\"}],\"name\":\"setWorkFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"transitGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCompounding\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositorApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorBonusApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magisterBonusApr\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"magister\",\"type\":\"address\"}],\"name\":\"whitelistMagister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Depositary.sol\":\"Depositary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/Depositary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./libraries/AmountNormalization.sol\\\";\\nimport \\\"./libraries/Deposit.sol\\\";\\nimport \\\"./libraries/EnumerableAddressSet.sol\\\";\\nimport \\\"./libraries/FixedPointMath.sol\\\";\\nimport \\\"./libraries/Magister.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/Pool.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\nimport {IERC20} from \\\"./interfaces/ERC20.sol\\\";\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {IPriceOracle} from \\\"./interfaces/IPriceOracle.sol\\\";\\n\\nerror BaksDAOMagisterAlreadyWhitelisted(address magister);\\nerror BaksDAOMagisterBlacklisted(address magister);\\nerror BaksDAOOnlyDepositorOrMagisterAllowed();\\nerror BaksDAOWithdrawAmountExceedsPrincipal();\\n\\ninterface IBank {\\n    function onNewDeposit(IERC20 token, uint256 amount) external;\\n}\\n\\ninterface IDepositary {\\n    function getTotalValueLocked() external view returns (uint256 totalValueLocked);\\n}\\n\\ncontract Depositary is Initializable, Governed {\\n    using AmountNormalization for IERC20;\\n    using Deposit for Deposit.Data;\\n    using EnumerableAddressSet for EnumerableAddressSet.Set;\\n    using FixedPointMath for uint256;\\n    using Magister for Magister.Data;\\n    using Pool for Pool.Data;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant ONE = 100e16;\\n\\n    IPriceOracle public priceOracle;\\n    IERC20 public stablecoin;\\n    IERC20 public bonusToken;\\n\\n    // TODO: Add `set` functions and events\\n    uint256 public earlyWithdrawalPeriod;\\n    uint256 public earlyWithdrawalFee;\\n\\n    mapping(address => Magister.Data) public magisters;\\n    EnumerableAddressSet.Set internal magistersSet;\\n\\n    Pool.Data[] public pools;\\n\\n    Deposit.Data[] public deposits;\\n    mapping(uint256 => mapping(address => uint256)) public currentDepositIds;\\n\\n    // TODO: Add `set` functions and events\\n    uint256 public workFee;\\n\\n    IBank public bank;\\n\\n    event MagisterWhitelisted(address indexed magister);\\n    event MagisterBlacklisted(address indexed magister);\\n\\n    function initialize(\\n        IERC20 _stablecoin,\\n        IERC20 _bonusToken,\\n        IPriceOracle _priceOracle,\\n        IBank _bank\\n    ) external initializer {\\n        // initializeReentrancyGuard();\\n        setGovernor(msg.sender);\\n\\n        earlyWithdrawalPeriod = 72 hours;\\n        earlyWithdrawalFee = 1e15; // 0,1 %\\n\\n        workFee = 2e16; // 2 %\\n\\n        stablecoin = _stablecoin;\\n        bonusToken = _bonusToken;\\n        priceOracle = _priceOracle;\\n        bank = _bank;\\n\\n        // Add guard pool and deposit\\n        deposits.push(\\n            Deposit.Data({\\n                id: 0,\\n                isActive: false,\\n                depositor: address(0),\\n                magister: address(0),\\n                poolId: 0,\\n                principal: 0,\\n                depositorTotalAccruedRewards: 0,\\n                depositorWithdrawnRewards: 0,\\n                magisterTotalAccruedRewards: 0,\\n                magisterWithdrawnRewards: 0,\\n                createdAt: block.timestamp,\\n                lastDepositAt: block.timestamp,\\n                lastInteractionAt: block.timestamp,\\n                closedAt: block.timestamp\\n            })\\n        );\\n\\n        pools.push(\\n            Pool.Data({\\n                id: 0,\\n                depositToken: IERC20(address(0)),\\n                priceOracle: priceOracle,\\n                isCompounding: false,\\n                depositsAmount: 0,\\n                depositorApr: 0,\\n                magisterApr: 0,\\n                depositorBonusApr: 0,\\n                magisterBonusApr: 0\\n            })\\n        );\\n    }\\n\\n    function deposit(uint256 poolId, uint256 amount) external {\\n        deposit(poolId, amount, address(this));\\n    }\\n\\n    function withdraw(uint256 depositId, uint256 amount) external {\\n        Deposit.Data storage d = deposits[depositId];\\n        Pool.Data storage p = pools[d.poolId];\\n\\n        if (!(msg.sender == d.depositor || msg.sender == d.magister)) {\\n            revert BaksDAOOnlyDepositorOrMagisterAllowed();\\n        }\\n\\n        uint256 normalizedAmount = p.depositToken.normalizeAmount(amount);\\n        accrueRewards(d.id);\\n\\n        uint256 magisterAmount = Math.min(d.magisterTotalAccruedRewards - d.magisterWithdrawnRewards, normalizedAmount);\\n        (\\n            uint256 depositorReward,\\n            uint256 depositorBonusReward,\\n            uint256 magisterReward,\\n            uint256 magisterBonusReward\\n        ) = splitRewards(d.poolId, d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards, magisterAmount);\\n\\n        if (msg.sender == d.magister) {\\n            stablecoin.safeTransfer(d.magister, magisterReward);\\n            if (magisterBonusReward > 0) {\\n                bonusToken.safeTransfer(d.magister, magisterBonusReward);\\n            }\\n\\n            d.magisterWithdrawnRewards += magisterAmount;\\n        } else {\\n            if (normalizedAmount > d.principal) {\\n                revert BaksDAOWithdrawAmountExceedsPrincipal();\\n            }\\n\\n            uint256 fee;\\n            if (p.isCompounding) {\\n                fee = workFee;\\n\\n                if (block.timestamp < d.lastDepositAt + earlyWithdrawalPeriod) {\\n                    fee += earlyWithdrawalFee;\\n                }\\n\\n                depositorReward = depositorReward.mul(ONE - fee);\\n            }\\n\\n            if (p.depositToken != stablecoin) {\\n                p.depositToken.safeTransfer(d.depositor, normalizedAmount);\\n            }\\n            stablecoin.safeTransfer(\\n                d.depositor,\\n                p.depositToken == stablecoin ? normalizedAmount + depositorReward : depositorReward\\n            );\\n            if (depositorBonusReward > 0) {\\n                bonusToken.safeTransfer(d.depositor, depositorBonusReward);\\n            }\\n\\n            p.depositsAmount -= normalizedAmount;\\n            d.principal -= normalizedAmount;\\n            d.depositorWithdrawnRewards += d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards;\\n        }\\n\\n        d.lastInteractionAt = block.timestamp;\\n        if (d.principal == 0) {\\n            d.isActive = false;\\n            d.closedAt = block.timestamp;\\n            delete currentDepositIds[d.poolId][msg.sender];\\n        }\\n    }\\n\\n    function whitelistMagister(address magister) external onlyGovernor {\\n        if (magistersSet.contains(magister)) {\\n            revert BaksDAOMagisterAlreadyWhitelisted(magister);\\n        }\\n\\n        if (magistersSet.add(magister)) {\\n            Magister.Data storage m = magisters[magister];\\n            m.addr = magister;\\n            if (m.createdAt == 0) {\\n                m.createdAt = block.timestamp;\\n            }\\n            m.isActive = true;\\n\\n            emit MagisterWhitelisted(magister);\\n        }\\n    }\\n\\n    function blacklistMagister(address magister) external onlyGovernor {\\n        if (!magistersSet.contains(magister)) {\\n            revert BaksDAOMagisterBlacklisted(magister);\\n        }\\n\\n        if (magistersSet.remove(magister)) {\\n            magisters[magister].isActive = false;\\n            emit MagisterBlacklisted(magister);\\n        }\\n    }\\n\\n    function addPool(\\n        IERC20 depositToken,\\n        bool isCompounding,\\n        uint256 depositorApr,\\n        uint256 magisterApr,\\n        uint256 depositorBonusApr,\\n        uint256 magisterBonusApr\\n    ) external onlyGovernor {\\n        uint256 poolId = pools.length;\\n        pools.push(\\n            Pool.Data({\\n                id: poolId,\\n                depositToken: depositToken,\\n                priceOracle: priceOracle,\\n                isCompounding: isCompounding,\\n                depositsAmount: 0,\\n                depositorApr: depositorApr,\\n                magisterApr: magisterApr,\\n                depositorBonusApr: depositorBonusApr,\\n                magisterBonusApr: magisterBonusApr\\n            })\\n        );\\n    }\\n\\n    function updatePool(\\n        uint256 poolId,\\n        bool isCompounding,\\n        uint256 depositorApr,\\n        uint256 magisterApr,\\n        uint256 depositorBonusApr,\\n        uint256 magisterBonusApr\\n    ) external onlyGovernor {\\n        Pool.Data storage pool = pools[poolId];\\n        pool.isCompounding = isCompounding;\\n        pool.depositorApr = depositorApr;\\n        pool.magisterApr = magisterApr;\\n        pool.depositorBonusApr = depositorBonusApr;\\n        pool.magisterBonusApr = magisterBonusApr;\\n    }\\n\\n    function setBank(IBank _bank) external onlyGovernor {\\n        bank = _bank;\\n    }\\n\\n    function setWorkFee(uint256 _workFee) external onlyGovernor {\\n        workFee = _workFee;\\n    }\\n\\n    function getActiveMagisterAddresses() external view returns (address[] memory activeMagisterAddresses) {\\n        activeMagisterAddresses = magistersSet.elements;\\n    }\\n\\n    function getActiveMagisters() external view returns (Magister.Data[] memory activeMagisters) {\\n        uint256 length = magistersSet.elements.length;\\n        activeMagisters = new Magister.Data[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            activeMagisters[i] = magisters[magistersSet.elements[i]];\\n        }\\n    }\\n\\n    function getPoolsCount() external view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    function getPools() external view returns (Pool.Data[] memory) {\\n        return pools;\\n    }\\n\\n    function getMagisterDepositIds(address magister) external view returns (uint256[] memory) {\\n        return magisters[magister].depositIds;\\n    }\\n\\n    function getTotalValueLocked() external view returns (uint256 totalValueLocked) {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            totalValueLocked += pools[i].getDepositsValue();\\n        }\\n    }\\n\\n    function isMagister(uint256 depositId) external view returns (bool) {\\n        Deposit.Data storage d = deposits[depositId];\\n        return msg.sender == d.magister;\\n    }\\n\\n    function deposit(\\n        uint256 poolId,\\n        uint256 amount,\\n        address magister\\n    ) public {\\n        if (magister == msg.sender || !(magister == address(this) || magisters[magister].isActive)) {\\n            revert BaksDAOMagisterBlacklisted(magister);\\n        }\\n\\n        Pool.Data storage p = pools[poolId];\\n        p.depositToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 normalizedAmount = p.depositToken.normalizeAmount(amount);\\n        p.depositsAmount += normalizedAmount;\\n\\n        if (currentDepositIds[poolId][msg.sender] == 0) {\\n            uint256 id = deposits.length;\\n            deposits.push(\\n                Deposit.Data({\\n                    id: id,\\n                    isActive: true,\\n                    magister: magister,\\n                    depositor: msg.sender,\\n                    poolId: poolId,\\n                    principal: normalizedAmount,\\n                    depositorTotalAccruedRewards: 0,\\n                    depositorWithdrawnRewards: 0,\\n                    magisterTotalAccruedRewards: 0,\\n                    magisterWithdrawnRewards: 0,\\n                    createdAt: block.timestamp,\\n                    lastDepositAt: block.timestamp,\\n                    lastInteractionAt: block.timestamp,\\n                    closedAt: 0\\n                })\\n            );\\n\\n            currentDepositIds[poolId][msg.sender] = id;\\n            if (magister != address(this)) {\\n                magisters[magister].depositIds.push(id);\\n            }\\n            if (p.depositToken != stablecoin) {\\n                bank.onNewDeposit(p.depositToken, normalizedAmount);\\n            }\\n        } else {\\n            Deposit.Data storage d = deposits[currentDepositIds[poolId][msg.sender]];\\n            accrueRewards(d.id);\\n\\n            uint256 r = d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards;\\n            (uint256 depositorRewards, uint256 depositorBonusRewards, , ) = splitRewards(d.poolId, r, 0);\\n            stablecoin.safeTransfer(d.depositor, depositorRewards);\\n            if (depositorBonusRewards > 0) {\\n                bonusToken.safeTransfer(d.depositor, depositorBonusRewards);\\n            }\\n\\n            d.principal += normalizedAmount;\\n            d.depositorWithdrawnRewards += r;\\n            d.lastDepositAt = block.timestamp;\\n            d.lastInteractionAt = block.timestamp;\\n        }\\n    }\\n\\n    function getRewards(uint256 depositId) public view returns (uint256 depositorRewards, uint256 magisterRewards) {\\n        Deposit.Data memory d = deposits[depositId];\\n\\n        (uint256 dr, uint256 mr) = calculateRewards(depositId);\\n        depositorRewards = dr + d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards;\\n        magisterRewards = mr + d.magisterTotalAccruedRewards - d.magisterWithdrawnRewards;\\n    }\\n\\n    function accrueRewards(uint256 depositId) internal {\\n        (uint256 depositorRewards, uint256 magisterRewards) = calculateRewards(depositId);\\n\\n        Deposit.Data storage d = deposits[depositId];\\n        IERC20 depositToken = pools[d.poolId].depositToken;\\n        uint256 depositTokenPrice = depositToken == stablecoin ? ONE : priceOracle.getNormalizedPrice(depositToken);\\n        if (d.magister != address(this) && magisters[d.magister].isActive) {\\n            d.magisterTotalAccruedRewards += magisterRewards;\\n            magisters[d.magister].totalIncome += magisterRewards.mul(depositTokenPrice);\\n        }\\n\\n        d.depositorTotalAccruedRewards += depositorRewards;\\n        if (magisters[msg.sender].isActive) {\\n            magisters[d.magister].totalIncome += depositorRewards.mul(depositTokenPrice);\\n        }\\n    }\\n\\n    function calculateRewards(uint256 depositId)\\n        internal\\n        view\\n        returns (uint256 depositorRewards, uint256 magisterRewards)\\n    {\\n        Deposit.Data memory d = deposits[depositId];\\n        Pool.Data memory p = pools[d.poolId];\\n\\n        uint256 totalRewards = d.principal.mul(\\n            p.calculateMultiplier((block.timestamp - d.lastInteractionAt).mulDiv(ONE, 365 days))\\n        );\\n        uint256 totalApr = p.getTotalApr();\\n\\n        depositorRewards = totalRewards.mulDiv(p.getDepositorApr(), totalApr);\\n        magisterRewards = totalRewards.mulDiv(p.getMagisterApr(), totalApr);\\n    }\\n\\n    function splitRewards(\\n        uint256 poolId,\\n        uint256 _depositorRewards,\\n        uint256 _magisterRewards\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 depositorRewards,\\n            uint256 depositorBonusRewards,\\n            uint256 magisterRewards,\\n            uint256 magisterBonusRewards\\n        )\\n    {\\n        Pool.Data memory p = pools[poolId];\\n\\n        uint256 depositorTotalApr = p.getDepositorApr();\\n        uint256 magisterTotalApr = p.getMagisterApr();\\n        uint256 depositTokenPrice = p.depositToken == stablecoin ? ONE : priceOracle.getNormalizedPrice(p.depositToken);\\n\\n        depositorRewards = _depositorRewards.mul(depositTokenPrice);\\n        magisterRewards = _magisterRewards.mul(depositTokenPrice);\\n\\n        try priceOracle.getNormalizedPrice(bonusToken) returns (uint256 bonusTokenPrice) {\\n            if (bonusTokenPrice > 0) {\\n                depositorBonusRewards = depositorRewards.mulDiv(\\n                    p.depositorBonusApr.mul(bonusTokenPrice),\\n                    depositorTotalApr\\n                );\\n                magisterBonusRewards = magisterRewards.mulDiv(\\n                    p.magisterBonusApr.mul(bonusTokenPrice),\\n                    magisterTotalApr\\n                );\\n\\n                depositorRewards = depositorRewards.mulDiv(p.depositorApr, depositorTotalApr);\\n                magisterRewards = magisterRewards.mulDiv(p.magisterApr, magisterTotalApr);\\n            }\\n        } catch {}\\n    }\\n}\\n\",\"keccak256\":\"0x48a69443643eddfabc75a427c946c3afde65002276a39d03e7c792a5e6ccf3cd\",\"license\":\"BUSL-1.1\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nerror GovernedOnlyGovernorAllowedToCall();\\nerror GovernedOnlyPendingGovernorAllowedToCall();\\nerror GovernedGovernorZeroAddress();\\nerror GovernedCantGoverItself();\\n\\nabstract contract Governed {\\n    address public governor;\\n    address public pendingGovernor;\\n\\n    event PendingGovernanceTransition(address indexed governor, address indexed newGovernor);\\n    event GovernanceTransited(address indexed governor, address indexed newGovernor);\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor) {\\n            revert GovernedOnlyGovernorAllowedToCall();\\n        }\\n        _;\\n    }\\n\\n    function transitGovernance(address newGovernor, bool force) external onlyGovernor {\\n        if (newGovernor == address(0)) {\\n            revert GovernedGovernorZeroAddress();\\n        }\\n        if (newGovernor == address(this)) {\\n            revert GovernedCantGoverItself();\\n        }\\n\\n        pendingGovernor = newGovernor;\\n        if (!force) {\\n            emit PendingGovernanceTransition(governor, newGovernor);\\n        } else {\\n            setGovernor(newGovernor);\\n        }\\n    }\\n\\n    function acceptGovernance() external {\\n        if (msg.sender != pendingGovernor) {\\n            revert GovernedOnlyPendingGovernorAllowedToCall();\\n        }\\n\\n        governor = pendingGovernor;\\n        emit GovernanceTransited(governor, pendingGovernor);\\n    }\\n\\n    function setGovernor(address newGovernor) internal {\\n        governor = newGovernor;\\n        emit GovernanceTransited(governor, newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x39eb94fcb72876408caf31d462e821259a1a35a48f56fafb09b442283432dd71\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IMintableAndBurnableERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x88fd15d408cc6fc41f6aecff5e0722a8b3ec59bc306635524e43715b3e2bf5c1\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\nimport \\\"./../libraries/FixedPointMath.sol\\\";\\n\\n/// @notice Thrown when oracle doesn't provide price for `token` token.\\n/// @param token The address of the token contract.\\nerror PriceOracleTokenUnknown(IERC20 token);\\n/// @notice Thrown when oracle provide stale price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleStalePrice(IERC20 token, uint256 price);\\n/// @notice Thrown when oracle provide negative, zero or in other ways invalid price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleInvalidPrice(IERC20 token, int256 price);\\n\\ninterface IPriceOracle {\\n    /// @notice Gets normalized to 18 decimals price for the `token` token.\\n    /// @param token The address of the token contract.\\n    /// @return normalizedPrice Normalized price.\\n    function getNormalizedPrice(IERC20 token) external view returns (uint256 normalizedPrice);\\n}\\n\",\"keccak256\":\"0x3cfee478a9d2c5f5e7af40f2daedbce24d01ec3f552a21a9ac719fcef21d22c7\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror CallToNonContract(address target);\\n\\nlibrary Address {\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.call(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function delegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.delegatecall(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(account)\\n        }\\n\\n        return codeSize > 0;\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returnData,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returnData;\\n        } else {\\n            if (returnData.length > 0) {\\n                assembly {\\n                    let returnDataSize := mload(returnData)\\n                    revert(add(returnData, 32), returnDataSize)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba7550b67e8e597fcbc05c61eb85d739d80547eb243b78dd1bfa933e8a3490f1\",\"license\":\"MIT\"},\"contracts/libraries/AmountNormalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\n\\nlibrary AmountNormalization {\\n    uint8 internal constant DECIMALS = 18;\\n\\n    function normalizeAmount(IERC20 self, uint256 denormalizedAmount) internal view returns (uint256 normalizedAmount) {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return denormalizedAmount * scale;\\n        }\\n        return denormalizedAmount;\\n    }\\n\\n    function denormalizeAmount(IERC20 self, uint256 normalizedAmount)\\n        internal\\n        view\\n        returns (uint256 denormalizedAmount)\\n    {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return normalizedAmount / scale;\\n        }\\n        return normalizedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x03e0ddb89c09023fd87f8af4db51bf903effbf488cbd28162f0bfb363f1c9058\",\"license\":\"MIT\"},\"contracts/libraries/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Deposit {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        uint256 id;\\n        bool isActive;\\n        address depositor;\\n        address magister;\\n        uint256 poolId;\\n        uint256 principal;\\n        uint256 depositorTotalAccruedRewards;\\n        uint256 depositorWithdrawnRewards;\\n        uint256 magisterTotalAccruedRewards;\\n        uint256 magisterWithdrawnRewards;\\n        uint256 createdAt;\\n        uint256 lastDepositAt;\\n        uint256 lastInteractionAt;\\n        uint256 closedAt;\\n    }\\n}\\n\",\"keccak256\":\"0xea20fe116cc1d8c2d51be9ffde213a70217db2014d2a3eeea468b0cce6bbb1d1\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/EnumerableAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary EnumerableAddressSet {\\n    struct Set {\\n        address[] elements;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    function add(Set storage self, address element) internal returns (bool) {\\n        if (contains(self, element)) {\\n            return false;\\n        }\\n\\n        self.elements.push(element);\\n        self.indexes[element] = self.elements.length;\\n\\n        return true;\\n    }\\n\\n    function remove(Set storage self, address element) internal returns (bool) {\\n        uint256 elementIndex = indexOf(self, element);\\n        if (elementIndex == 0) {\\n            return false;\\n        }\\n\\n        uint256 indexToRemove = elementIndex - 1;\\n        uint256 lastIndex = count(self) - 1;\\n        if (indexToRemove != lastIndex) {\\n            address lastElement = self.elements[lastIndex];\\n            self.elements[indexToRemove] = lastElement;\\n            self.indexes[lastElement] = elementIndex;\\n        }\\n        self.elements.pop();\\n        delete self.indexes[element];\\n\\n        return true;\\n    }\\n\\n    function indexOf(Set storage self, address element) internal view returns (uint256) {\\n        return self.indexes[element];\\n    }\\n\\n    function contains(Set storage self, address element) internal view returns (bool) {\\n        return indexOf(self, element) != 0;\\n    }\\n\\n    function count(Set storage self) internal view returns (uint256) {\\n        return self.elements.length;\\n    }\\n}\\n\",\"keccak256\":\"0x5a89f77a4b785e811178f5043d48315fc0ec91b362cd08eca73309ddbff4a654\",\"license\":\"MIT\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror FixedPointMathMulDivOverflow(uint256 prod1, uint256 denominator);\\nerror FixedPointMathExpArgumentTooBig(uint256 a);\\nerror FixedPointMathExp2ArgumentTooBig(uint256 a);\\n\\n/// @title Fixed point math implementation\\nlibrary FixedPointMath {\\n    uint256 internal constant SCALE = 1e18;\\n    uint256 internal constant HALF_SCALE = 5e17;\\n    /// @dev Largest power of two divisor of scale.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n    /// @dev Scale inverted mod 2**256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert FixedPointMathMulDivOverflow(prod1, SCALE);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(a, b, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := add(div(prod0, SCALE), roundUpUnit)\\n            }\\n            return result;\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        result = mulDiv(a, SCALE, b);\\n    }\\n\\n    /// @notice Calculates \\u230aa \\u00d7 b \\u00f7 denominator\\u230b with full precision.\\n    /// @dev Credit to Remco Bloemen under MIT license https://2\\u03c0.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= denominator) {\\n            revert FixedPointMathMulDivOverflow(prod1, denominator);\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        unchecked {\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                denominator := div(denominator, lpotdod)\\n                prod0 := div(prod0, lpotdod)\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n            prod0 |= prod1 * lpotdod;\\n\\n            uint256 inverse = (3 * denominator) ^ 2;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n\\n            result = prod0 * inverse;\\n        }\\n    }\\n\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        if (x >= 133_084258667509499441) {\\n            revert FixedPointMathExpArgumentTooBig(x);\\n        }\\n\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        if (x >= 192e18) {\\n            revert FixedPointMathExp2ArgumentTooBig(x);\\n        }\\n\\n        unchecked {\\n            x = (x << 64) / SCALE;\\n\\n            result = 0x800000000000000000000000000000000000000000000000;\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcfa2898f1abbe679d9f13f2b85fd5c2cf5b011022460e0c5a9ffbb62875c0232\",\"license\":\"MIT\"},\"contracts/libraries/Magister.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Magister {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        bool isActive;\\n        uint256 createdAt;\\n        address addr;\\n        uint256 totalIncome;\\n        uint256[] depositIds;\\n    }\\n}\\n\",\"keccak256\":\"0x7026bf2388976af39a24b77c68b48759efefc66073885ec99c17a4dbe40ce53f\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Math {\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a >= 0 ? uint256(a) : uint256(-a);\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        uint256 xAux = x;\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        uint256 repeat = 7;\\n        while (repeat > 0) {\\n            result = (result + x / result) >> 1;\\n            repeat--;\\n        }\\n        uint256 roundedDownResult = x / result;\\n\\n        return result >= roundedDownResult ? roundedDownResult : result;\\n    }\\n\\n    function fpsqrt(uint256 a) internal pure returns (uint256 result) {\\n        if (a == 0) result = 0;\\n        else result = sqrt(a) * 1e9;\\n    }\\n}\\n\",\"keccak256\":\"0xcfcc7b98109ee926aad0fd0b90b018bfae27006bc923c361654c501347ffc8eb\",\"license\":\"MIT\"},\"contracts/libraries/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Pool {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        uint256 id;\\n        IERC20 depositToken;\\n        IPriceOracle priceOracle;\\n        bool isCompounding;\\n        uint256 depositsAmount;\\n        uint256 depositorApr;\\n        uint256 magisterApr;\\n        uint256 depositorBonusApr;\\n        uint256 magisterBonusApr;\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n\\n    function getDepositsValue(Data memory self) internal view returns (uint256 depositsValue) {\\n        if (self.depositsAmount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 depositTokenPrice = self.priceOracle.getNormalizedPrice(self.depositToken);\\n        depositsValue = self.depositsAmount.mul(depositTokenPrice);\\n    }\\n\\n    function calculateMultiplier(Data memory self, uint256 partOfYearDeposited)\\n        internal\\n        pure\\n        returns (uint256 multiplier)\\n    {\\n        uint256 totalApr = getTotalApr(self);\\n        if (!self.isCompounding) {\\n            multiplier = totalApr.mul(partOfYearDeposited);\\n        } else {\\n            multiplier = FixedPointMath.exp(totalApr.mul(partOfYearDeposited)) - ONE;\\n        }\\n    }\\n\\n    function getDepositorApr(Data memory self) internal pure returns (uint256 depositorApr) {\\n        depositorApr = self.depositorApr + self.depositorBonusApr;\\n    }\\n\\n    function getMagisterApr(Data memory self) internal pure returns (uint256 magisterApr) {\\n        magisterApr = self.magisterApr + self.magisterBonusApr;\\n    }\\n\\n    function getTotalApr(Data memory self) internal pure returns (uint256 totalApr) {\\n        totalApr = getDepositorApr(self) + getMagisterApr(self);\\n    }\\n}\\n\",\"keccak256\":\"0x9566414fd2d62274f8254f22a5c5aa4c10fb129f74ca9942c7ea9d7c30ae7075\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\nerror SafeERC20NoReturnData();\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, amount));\\n    }\\n\\n    function callWithOptionalReturn(IERC20 token, bytes memory data) internal {\\n        address tokenAddress = address(token);\\n\\n        bytes memory returnData = tokenAddress.functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returnData.length > 0) {\\n            if (!abi.decode(returnData, (bool))) {\\n                revert SafeERC20NoReturnData();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bf8463bfe7a7352ddc06faf7069e89e1028d1c6dc8d4b34f59fb7eb869b661c\",\"license\":\"MIT\"},\"contracts/libraries/Upgradability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./Address.sol\\\";\\n\\nerror EIP1967ImplementationIsNotContract(address implementation);\\nerror ContractAlreadyInitialized();\\nerror OnlyProxyCallAllowed();\\nerror OnlyCurrentImplementationAllowed();\\n\\nlibrary EIP1967 {\\n    using Address for address;\\n\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    event Upgraded(address indexed newImplementation);\\n\\n    function upgradeTo(address newImplementation) internal {\\n        if (!newImplementation.isContract()) {\\n            revert EIP1967ImplementationIsNotContract(newImplementation);\\n        }\\n\\n        assembly {\\n            sstore(IMPLEMENTATION_SLOT, newImplementation)\\n        }\\n\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    function getImplementation() internal view returns (address implementation) {\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_SLOT)\\n        }\\n    }\\n}\\n\\ncontract Proxy {\\n    using Address for address;\\n\\n    constructor(address implementation, bytes memory data) {\\n        EIP1967.upgradeTo(implementation);\\n        implementation.delegateCall(data, \\\"Proxy: construction failed\\\");\\n    }\\n\\n    receive() external payable {\\n        delegateCall();\\n    }\\n\\n    fallback() external payable {\\n        delegateCall();\\n    }\\n\\n    function delegateCall() internal {\\n        address implementation = EIP1967.getImplementation();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Upgradeable {\\n    address private immutable self = address(this);\\n\\n    modifier onlyProxy() {\\n        if (address(this) == self) {\\n            revert OnlyProxyCallAllowed();\\n        }\\n        if (EIP1967.getImplementation() != self) {\\n            revert OnlyCurrentImplementationAllowed();\\n        }\\n        _;\\n    }\\n\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        EIP1967.upgradeTo(newImplementation);\\n    }\\n}\\n\\nabstract contract Initializable {\\n    bool private initializing;\\n    bool private initialized;\\n\\n    modifier initializer() {\\n        if (!initializing && initialized) {\\n            revert ContractAlreadyInitialized();\\n        }\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3091e63c4fcc7642bcc850ec9c37030b6b7c0c210dcace49f8ba2b930211f88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613c31806100206000396000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c806383b116521161012a578063c0d8012c116100bd578063e9cbd8221161008c578063f119821a11610071578063f119821a1461059f578063f3a4a6f6146105b4578063f8c8765e146105df57600080fd5b8063e9cbd82214610579578063eb907b221461058c57600080fd5b8063c0d8012c14610518578063ddc1252614610540578063e2bbb15814610553578063e3056a341461056657600080fd5b8063ac4afa38116100f9578063ac4afa381461041e578063b02c43d014610481578063b26025aa14610508578063b4ac68601461051057600080fd5b806383b11652146103625780638dbdbe6d14610375578063a2b4f32514610388578063a47b4410146103fe57600080fd5b806343853ae3116101a25780635a59a1b2116101715780635a59a1b214610314578063610f347b14610327578063673a2a1f1461033a57806376cdb03b1461034f57600080fd5b806343853ae3146102c2578063441a3e70146102e5578063493310a4146102f857806351adfe491461030b57600080fd5b8063238efcbc116101de578063238efcbc1461028b5780632630c12f146102935780633a5017b4146102a657806341d4a1ab146102af57600080fd5b8063017b5f2e14610210578063090d23b91461022e5780630c340a241461024357806316330d4014610274575b600080fd5b6102186105f2565b6040516102259190613598565b60405180910390f35b61024161023c3660046135fa565b610657565b005b60005461025c906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610225565b61027d60065481565b604051908152602001610225565b6102416106aa565b60025461025c906001600160a01b031681565b61027d600d5481565b60045461025c906001600160a01b031681565b6102d56102d0366004613617565b61073f565b6040519015158152602001610225565b6102416102f3366004613630565b61077b565b610241610306366004613660565b610afe565b61027d60055481565b6102416103223660046135fa565b610bae565b6102416103353660046135fa565b610c7f565b610342610d83565b60405161022591906136b0565b600e5461025c906001600160a01b031681565b610241610370366004613764565b610e4e565b610241610383366004613798565b611070565b6103cd6103963660046135fa565b600760205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b039091169084565b6040516102259493929190931515845260208401929092526001600160a01b03166040830152606082015260800190565b61041161040c3660046135fa565b61153b565b604051610225919061380c565b61043161042c366004613617565b6115aa565b60408051998a526001600160a01b0398891660208b015296909716958801959095529215156060870152608086019190915260a085015260c084015260e083015261010082015261012001610225565b61049461048f366004613617565b611618565b604080519e8f529c151560208f01526001600160a01b039b8c169c8e019c909c529990981660608c015260808b019690965260a08a019490945260c089019290925260e08801526101008701526101208601526101408501526101608401526101808301526101a08201526101c001610225565b61027d6116a8565b600a5461027d565b61052b610526366004613617565b611782565b60408051928352602083019190915201610225565b61024161054e36600461381f565b6118b8565b610241610561366004613630565b6119aa565b60015461025c906001600160a01b031681565b60035461025c906001600160a01b031681565b61024161059a366004613617565b6119b5565b6105a76119eb565b6040516102259190613858565b61027d6105c23660046138f8565b600c60209081526000928352604080842090915290825290205481565b6102416105ed36600461391d565b611b86565b6060600860000180548060200260200160405190810160405280929190818152602001828054801561064d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161062f575b5050505050905090565b6000546201000090046001600160a01b03163314610688576040516305e7700560e51b815260040160405180910390fd5b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146106d55760405163aec80d4b60e01b815260040160405180910390fd5b60015460008054620100006001600160a01b0393841681810275ffffffffffffffffffffffffffffffffffffffff00001990931692909217808455604051929491900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e91a3565b600080600b838154811061075557610755613979565b60009182526020909120600d90910201600201546001600160a01b031633149392505050565b6000600b838154811061079057610790613979565b90600052602060002090600d020190506000600a8260030154815481106107b9576107b9613979565b600091825260209091206001840154600890920201915061010090046001600160a01b03163314806107f7575060028201546001600160a01b031633145b61081457604051633b382fcd60e21b815260040160405180910390fd5b600181015460009061082f906001600160a01b031685611fa9565b905061083e836000015461204b565b600061085d8460080154856007015461085791906139a5565b83612252565b9050600080600080610887886003015489600601548a6005015461088191906139a5565b8761226a565b60028c0154939750919550935091506001600160a01b03163314156109095760028801546003546108c5916001600160a01b039182169116846124d9565b80156108ea5760028801546004546108ea916001600160a01b039182169116836124d9565b848860080160008282546108fe91906139bc565b90915550610aae9050565b876004015486111561092e57604051630e0e9e5d60e31b815260040160405180910390fd5b6002870154600090600160a01b900460ff16156109915750600d54600554600a8a015461095b91906139bc565b4210156109725760065461096f90826139bc565b90505b61098e61098782670de0b6b3a76400006139a5565b869061256e565b94505b60035460018901546001600160a01b039081169116146109d2576001808a0154908901546109d2916001600160a01b039182169161010090910416896124d9565b6001808a0154600354918a0154610a21926001600160a01b03610100909304831692918216911614610a045786610a0e565b610a0e878a6139bc565b6003546001600160a01b031691906124d9565b8315610a4c576001890154600454610a4c916001600160a01b039182169161010090910416866124d9565b86886003016000828254610a6091906139a5565b9250508190555086896004016000828254610a7b91906139a5565b9091555050600689015460058a0154610a9491906139a5565b896006016000828254610aa791906139bc565b9091555050505b42600b8901556004880154610af25760018801805460ff1916905542600c808a01919091556003890154600090815260209182526040808220338352909252908120555b50505050505050505050565b6000546201000090046001600160a01b03163314610b2f576040516305e7700560e51b815260040160405180910390fd5b6000600a8781548110610b4457610b44613979565b6000918252602090912060026008909202019081018054971515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909816979097179096555060048501939093556005840191909155600683015560079091015550565b6000546201000090046001600160a01b03163314610bdf576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b038116600090815260096020526040902054610c255760405163c3a9f00560e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610c3060088261263e565b15610c7c576001600160a01b038116600081815260076020526040808220805460ff19169055517feac1eada73853c49d4c41fc681d6ac5332005e489babcae0b54f4024150601d79190a25b50565b6000546201000090046001600160a01b03163314610cb0576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b03811660009081526009602052604090205415610cf257604051630a0e5acf60e21b81526001600160a01b0382166004820152602401610c1c565b610cfd600882612777565b15610c7c576001600160a01b03811660008181526007602052604090206002810180546001600160a01b0319169092179091556001810154610d40574260018201555b805460ff191660011781556040516001600160a01b038316907fb41dc55c7c8ff45cc4ee01390b83d63e2c93edf7952c5ef3f4ba55a4af6b6a9690600090a25050565b6060600a805480602002602001604051908101604052809291908181526020016000905b82821015610e45576000848152602090819020604080516101208101825260088602909201805483526001808201546001600160a01b0390811685870152600283015490811693850193909352600160a01b90920460ff161515606084015260038101546080840152600481015460a0840152600581015460c0840152600681015460e0840152600701546101008301529083529092019101610da7565b50505050905090565b6000546201000090046001600160a01b03163314610e7f576040516305e7700560e51b815260040160405180910390fd5b600a805460408051610120810182528281526001600160a01b03998a16602082019081526002548b169282019283529815156060820190815260006080830181815260a084019a8b5260c08401998a5260e084019889526101008401978852600186018755959052905160089093027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a881019390935597517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a983018054918b166001600160a01b0319909216919091179055517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa8201805498511515600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090991691909916179690961790965594517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ab85015591517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ac840155517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ad830155517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ae82015590517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2af90910155565b6001600160a01b0381163314806110b357506001600160a01b0381163014806110b157506001600160a01b03811660009081526007602052604090205460ff165b155b156110dc5760405163c3a9f00560e01b81526001600160a01b0382166004820152602401610c1c565b6000600a84815481106110f1576110f1613979565b60009182526020909120600890910201600181015490915061111e906001600160a01b03163330866127e7565b6001810154600090611139906001600160a01b031685611fa9565b90508082600301600082825461114f91906139bc565b90915550506000858152600c6020908152604080832033845290915290205461141d576000600b805490509050600b604051806101c00160405280838152602001600115158152602001336001600160a01b03168152602001866001600160a01b0316815260200188815260200184815260200160008152602001600081526020016000815260200160008152602001428152602001428152602001428152602001600081525090806001815401808255809150506001900390600052602060002090600d02016000909190919091506000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816003015560a0820151816004015560c0820151816005015560e0820151816006015561010082015181600701556101208201518160080155610140820151816009015561016082015181600a015561018082015181600b01556101a082015181600c0155505080600c60008881526020019081526020016000206000336001600160a01b03166001600160a01b0316815260200190815260200160002081905550306001600160a01b0316846001600160a01b031614611392576001600160a01b0384166000908152600760209081526040822060040180546001810182559083529120018190555b60035460018401546001600160a01b0390811691161461141757600e546001840154604051638e877d9960e01b81526001600160a01b03918216600482015260248101859052911690638e877d9990604401600060405180830381600087803b1580156113fe57600080fd5b505af1158015611412573d6000803e3d6000fd5b505050505b50611534565b6000858152600c60209081526040808320338452909152812054600b8054909190811061144c5761144c613979565b90600052602060002090600d02019050611469816000015461204b565b60008160060154826005015461147f91906139a5565b9050600080611494846003015484600061226a565b505060018601546003549294509092506114c0916001600160a01b0390811691610100900416846124d9565b80156114eb5760018401546004546114eb916001600160a01b039182169161010090910416836124d9565b848460040160008282546114ff91906139bc565b925050819055508284600601600082825461151a91906139bc565b909155505042600a8501819055600b909401939093555050505b5050505050565b6001600160a01b03811660009081526007602090815260409182902060040180548351818402810184019094528084526060939283018282801561159e57602002820191906000526020600020905b81548152602001906001019080831161158a575b50505050509050919050565b600a81815481106115ba57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549597506001600160a01b039485169694841695600160a01b90940460ff169492939192909189565b600b818154811061162857600080fd5b60009182526020909120600d9091020180546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c909c01549a9c5060ff8a169b610100909a046001600160a01b039081169b99169997989697959694959394929391929091908e565b6000805b600a5481101561177e57611760600a82815481106116cc576116cc613979565b600091825260209182902060408051610120810182526008939093029091018054835260018101546001600160a01b0390811694840194909452600281015493841691830191909152600160a01b90920460ff161515606082015260038201546080820152600482015460a0820152600582015460c0820152600682015460e0820152600790910154610100820152612825565b61176a90836139bc565b915080611776816139d4565b9150506116ac565b5090565b6000806000600b848154811061179a5761179a613979565b60009182526020808320604080516101c081018252600d90940290910180548452600181015460ff81161515938501939093526001600160a01b03610100938490048116928501929092526002810154909116606084015260038101546080840152600481015460a0840152600581015460c0840152600681015460e084015260078101549183019190915260088101546101208301526009810154610140830152600a810154610160830152600b810154610180830152600c01546101a0820152915080611868866128c6565b915091508260e001518360c001518361188191906139bc565b61188b91906139a5565b9450826101200151836101000151826118a491906139bc565b6118ae91906139a5565b9350505050915091565b6000546201000090046001600160a01b031633146118e9576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b0382166119105760405163604b48b960e11b815260040160405180910390fd5b6001600160a01b03821630141561193a576040516306b3e95d60e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0384161790558061199d57600080546040516001600160a01b03808616936201000090930416917fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb191a35050565b6119a682612ac9565b5050565b6119a6828230611070565b6000546201000090046001600160a01b031633146119e6576040516305e7700560e51b815260040160405180910390fd5b600d55565b6008546060908067ffffffffffffffff811115611a0a57611a0a6139ef565b604051908082528060200260200182016040528015611a7857816020015b611a656040518060a001604052806000151581526020016000815260200160006001600160a01b0316815260200160008152602001606081525090565b815260200190600190039081611a285790505b50915060005b81811015611b81576007600060086000018381548110611aa057611aa0613979565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160a081018452815460ff16151581526001820154818401526002820154909416848401526003810154606085015260048101805484518185028101850190955280855291936080860193909290830182828015611b4857602002820191906000526020600020905b815481526020019060010190808311611b34575b505050505081525050838281518110611b6357611b63613979565b60200260200101819052508080611b79906139d4565b915050611a7e565b505090565b60005460ff16158015611ba05750600054610100900460ff165b15611bbe57604051631ee1e30360e21b815260040160405180910390fd5b60005460ff16158015611bdb576000805461ffff19166101011790555b611be433612ac9565b6203f48060058190555066038d7ea4c6800060068190555066470de4df820000600d8190555084600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600e60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600b604051806101c001604052806000815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020014281526020014281526020014281526020014281525090806001815401808255809150506001900390600052602060002090600d02016000909190919091506000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816003015560a0820151816004015560c0820151816005015560e0820151816006015561010082015181600701556101208201518160080155610140820151816009015561016082015181600a015561018082015181600b01556101a082015181600c01555050600a6040518061012001604052806000815260200160006001600160a01b03168152602001600260009054906101000a90046001600160a01b03166001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090806001815401808255809150506001900390600052602060002090600802016000909190919091506000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003015560a0820151816004015560c0820151816005015560e08201518160060155610100820151816007015550508015611534576000805460ff191690555050505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200e9190613a05565b612019906012613a28565b61202490600a613b2f565b905080600114612040576120388184613b3e565b915050612045565b829150505b92915050565b600080612057836128c6565b915091506000600b848154811061207057612070613979565b90600052602060002090600d020190506000600a82600301548154811061209957612099613979565b600091825260208220600160089092020101546003546001600160a01b03918216935016821461213657600254604051630787c49960e21b81526001600160a01b03848116600483015290911690631e1f126490602401602060405180830381865afa15801561210d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121319190613b5d565b612140565b670de0b6b3a76400005b60028401549091506001600160a01b0316301480159061217c575060028301546001600160a01b031660009081526007602052604090205460ff165b156121da578383600701600082825461219591906139bc565b909155506121a59050848261256e565b60028401546001600160a01b0316600090815260076020526040812060030180549091906121d49084906139bc565b90915550505b848360050160008282546121ee91906139bc565b90915550503360009081526007602052604090205460ff161561224a57612215858261256e565b60028401546001600160a01b0316600090815260076020526040812060030180549091906122449084906139bc565b90915550505b505050505050565b60008183106122615781612263565b825b9392505050565b6000806000806000600a888154811061228557612285613979565b6000918252602080832060408051610120810182526008949094029091018054845260018101546001600160a01b0390811693850193909352600281015492831691840191909152600160a01b90910460ff161515606083015260038101546080830152600481015460a0830152600581015460c0830152600681015460e083015260070154610100820152915061231c82612b30565b9050600061232983612b46565b60035460208501519192506000916001600160a01b039081169116146123c0576002546020850151604051630787c49960e21b81526001600160a01b039182166004820152911690631e1f126490602401602060405180830381865afa158015612397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bb9190613b5d565b6123ca565b670de0b6b3a76400005b90506123d68a8261256e565b97506123e2898261256e565b60025460048054604051630787c49960e21b81526001600160a01b0391821692810192909252929850911690631e1f126490602401602060405180830381865afa925050508015612450575060408051601f3d908101601f1916820190925261244d91810190613b5d565b60015b612459576124cc565b80156124ca5760e085015161247a90612472908361256e565b8a9086612b5d565b975061249f6124978287610100015161256e90919063ffffffff16565b889085612b5d565b60a08601519096506124b3908a9086612b5d565b60c08601519099506124c790889085612b5d565b96505b505b5050505093509350935093565b6040516001600160a01b03831660248201526044810182905261256990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612c18565b505050565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106125c05760405163072fa3c960e31b815260048101829052670de0b6b3a76400006024820152604401610c1c565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826125fa5780670de0b6b3a7640000850401945050505050612045565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6001600160a01b038116600090815260018301602052604081205480612668576000915050612045565b60006126756001836139a5565b905060006001612683875490565b61268d91906139a5565b90508082146127195760008660000182815481106126ad576126ad613979565b60009182526020909120015487546001600160a01b03909116915081908890859081106126dc576126dc613979565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018801909152604090208390555b855486908061272a5761272a613b76565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260018881019091526040822091909155935050505092915050565b6001600160a01b03811660009081526001830160205260408120541561279f57506000612045565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6040516001600160a01b038085166024830152831660448201526064810182905261281f9085906323b872dd60e01b90608401612505565b50505050565b600081608001516000141561283c57506000919050565b60408083015160208401519151630787c49960e21b81526001600160a01b03928316600482015260009290911690631e1f126490602401602060405180830381865afa158015612890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b49190613b5d565b6080840151909150612263908261256e565b6000806000600b84815481106128de576128de613979565b60009182526020808320604080516101c081018252600d90940290910180548452600181015460ff81161515938501939093526001600160a01b036101009384900481169285019290925260028101549091166060840152600381015460808401819052600482015460a0850152600582015460c0850152600682015460e085015260078201549284019290925260088101546101208401526009810154610140840152600a80820154610160850152600b820154610180850152600c909101546101a084015280549294509181106129b9576129b9613979565b6000918252602080832060408051610120810182526008949094029091018054845260018101546001600160a01b0390811693850193909352600281015492831691840191909152600160a01b90910460ff161515606083015260038101546080830152600481015460a0830152600581015460c0830152600681015460e083015260070154610100820152610180840151909250612a8d90612a8290612a7b90670de0b6b3a7640000906301e1338090612a7490426139a5565b9190612b5d565b8490612ca2565b60a08501519061256e565b90506000612a9a83612cf9565b9050612ab0612aa884612b30565b839083612b5d565b9550612abe612aa884612b46565b945050505050915091565b6000805475ffffffffffffffffffffffffffffffffffffffff00001916620100006001600160a01b0384811682810293909317808555604051939492900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e9190a350565b60008160e001518260a0015161204591906139bc565b60008161010001518260c0015161204591906139bc565b60008080600019858709858702925082811083820303915050838110612ba05760405163072fa3c960e31b81526004810182905260248101859052604401610c1c565b80612bb057508290049050612263565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201528290600090612c67906001600160a01b038416908590612d17565b80519091501561281f5780806020019051810190612c859190613b8c565b61281f57604051639b8d506160e01b815260040160405180910390fd5b600080612cae84612cf9565b90508360600151612cca57612cc3818461256e565b9150612cf2565b670de0b6b3a7640000612ce5612ce0838661256e565b612dba565b612cef91906139a5565b91505b5092915050565b6000612d0482612b46565b612d0d83612b30565b61204591906139bc565b6060833b612d435760405163dc5dd7fd60e01b81526001600160a01b0385166004820152602401610c1c565b600080856001600160a01b031685604051612d5e9190613bd5565b6000604051808303816000865af19150503d8060008114612d9b576040519150601f19603f3d011682016040523d82523d6000602084013e612da0565b606091505b5091509150612db0828286612e10565b9695505050505050565b6000680736ea4425c11ac6318210612de857604051632864fd0160e11b815260048101839052602401610c1c565b6714057b7ef767814f8202612263670de0b6b3a76400006706f05b59d3b20000830104612e49565b60608315612e1f575081612263565b825115612e2f5782518060208501fd5b8160405162461bcd60e51b8152600401610c1c9190613bf1565b6000680a688906bd8b0000008210612e7757604051632132de2160e01b815260048101839052602401610c1c565b50670de0b6b3a764000060409190911b0477800000000000000000000000000000000000000000000000678000000000000000821615612ec05768016a09e667f3bcc9090260401c5b674000000000000000821615612edf576801306fe0a31b7152df0260401c5b672000000000000000821615612efe576801172b83c7d517adce0260401c5b671000000000000000821615612f1d5768010b5586cf9890f62a0260401c5b670800000000000000821615612f3c576801059b0d31585743ae0260401c5b670400000000000000821615612f5b57680102c9a3e778060ee70260401c5b670200000000000000821615612f7a5768010163da9fb33356d80260401c5b670100000000000000821615612f9957680100b1afa5abcbed610260401c5b6680000000000000821615612fb75768010058c86da1c09ea20260401c5b6640000000000000821615612fd5576801002c605e2e8cec500260401c5b6620000000000000821615612ff357680100162f3904051fa10260401c5b6610000000000000821615613011576801000b175effdc76ba0260401c5b660800000000000082161561302f57680100058ba01fb9f96d0260401c5b660400000000000082161561304d5768010002c5cc37da94920260401c5b660200000000000082161561306b576801000162e525ee05470260401c5b66010000000000008216156130895768010000b17255775c040260401c5b658000000000008216156130a6576801000058b91b5bc9ae0260401c5b654000000000008216156130c357680100002c5c89d5ec6d0260401c5b652000000000008216156130e05768010000162e43f4f8310260401c5b651000000000008216156130fd57680100000b1721bcfc9a0260401c5b6508000000000082161561311a5768010000058b90cf1e6e0260401c5b65040000000000821615613137576801000002c5c863b73f0260401c5b6502000000000082161561315457680100000162e430e5a20260401c5b65010000000000821615613171576801000000b1721835510260401c5b64800000000082161561318d57680100000058b90c0b490260401c5b6440000000008216156131a95768010000002c5c8601cc0260401c5b6420000000008216156131c5576801000000162e42fff00260401c5b6410000000008216156131e15768010000000b17217fbb0260401c5b6408000000008216156131fd576801000000058b90bfce0260401c5b64040000000082161561321957680100000002c5c85fe30260401c5b6402000000008216156132355768010000000162e42ff10260401c5b64010000000082161561325157680100000000b17217f80260401c5b638000000082161561326c5768010000000058b90bfc0260401c5b6340000000821615613287576801000000002c5c85fe0260401c5b63200000008216156132a257680100000000162e42ff0260401c5b63100000008216156132bd576801000000000b17217f0260401c5b63080000008216156132d857680100000000058b90c00260401c5b63040000008216156132f35768010000000002c5c8600260401c5b630200000082161561330e576801000000000162e4300260401c5b63010000008216156133295768010000000000b172180260401c5b62800000821615613343576801000000000058b90c0260401c5b6240000082161561335d57680100000000002c5c860260401c5b622000008216156133775768010000000000162e430260401c5b6210000082161561339157680100000000000b17210260401c5b620800008216156133ab5768010000000000058b910260401c5b620400008216156133c5576801000000000002c5c80260401c5b620200008216156133df57680100000000000162e40260401c5b620100008216156133f9576801000000000000b1720260401c5b61800082161561341257680100000000000058b90260401c5b61400082161561342b5768010000000000002c5d0260401c5b612000821615613444576801000000000000162e0260401c5b61100082161561345d5768010000000000000b170260401c5b610800821615613476576801000000000000058c0260401c5b61040082161561348f57680100000000000002c60260401c5b6102008216156134a857680100000000000001630260401c5b6101008216156134c157680100000000000000b10260401c5b60808216156134d957680100000000000000590260401c5b60408216156134f1576801000000000000002c0260401c5b602082161561350957680100000000000000160260401c5b6010821615613521576801000000000000000b0260401c5b600882161561353957680100000000000000060260401c5b600482161561355157680100000000000000030260401c5b600282161561356957680100000000000000010260401c5b600182161561358157680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b6020808252825182820181905260009190848201906040850190845b818110156135d95783516001600160a01b0316835292840192918401916001016135b4565b50909695505050505050565b6001600160a01b0381168114610c7c57600080fd5b60006020828403121561360c57600080fd5b8135612263816135e5565b60006020828403121561362957600080fd5b5035919050565b6000806040838503121561364357600080fd5b50508035926020909101359150565b8015158114610c7c57600080fd5b60008060008060008060c0878903121561367957600080fd5b86359550602087013561368b81613652565b95989597505050506040840135936060810135936080820135935060a0909101359150565b602080825282518282018190526000919060409081850190868401855b82811015613757578151805185526001600160a01b0387820151168786015285810151613704878701826001600160a01b03169052565b506060818101511515908601526080808201519086015260a0808201519086015260c0808201519086015260e08082015190860152610100908101519085015261012090930192908501906001016136cd565b5091979650505050505050565b60008060008060008060c0878903121561377d57600080fd5b8635613788816135e5565b9550602087013561368b81613652565b6000806000606084860312156137ad57600080fd5b833592506020840135915060408401356137c6816135e5565b809150509250925092565b600081518084526020808501945080840160005b83811015613801578151875295820195908201906001016137e5565b509495945050505050565b60208152600061226360208301846137d1565b6000806040838503121561383257600080fd5b823561383d816135e5565b9150602083013561384d81613652565b809150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156138ea57888303603f1901855281518051151584528781015188850152868101516001600160a01b0316878501526060808201519085015260809081015160a0918501829052906138d6818601836137d1565b96890196945050509086019060010161387f565b509098975050505050505050565b6000806040838503121561390b57600080fd5b82359150602083013561384d816135e5565b6000806000806080858703121561393357600080fd5b843561393e816135e5565b9350602085013561394e816135e5565b9250604085013561395e816135e5565b9150606085013561396e816135e5565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156139b7576139b761398f565b500390565b600082198211156139cf576139cf61398f565b500190565b60006000198214156139e8576139e861398f565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613a1757600080fd5b815160ff8116811461226357600080fd5b600060ff821660ff841680821015613a4257613a4261398f565b90039392505050565b600181815b80851115613a86578160001904821115613a6c57613a6c61398f565b80851615613a7957918102915b93841c9390800290613a50565b509250929050565b600082613a9d57506001612045565b81613aaa57506000612045565b8160018114613ac05760028114613aca57613ae6565b6001915050612045565b60ff841115613adb57613adb61398f565b50506001821b612045565b5060208310610133831016604e8410600b8410161715613b09575081810a612045565b613b138383613a4b565b8060001904821115613b2757613b2761398f565b029392505050565b600061226360ff841683613a8e565b6000816000190483118215151615613b5857613b5861398f565b500290565b600060208284031215613b6f57600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613b9e57600080fd5b815161226381613652565b60005b83811015613bc4578181015183820152602001613bac565b8381111561281f5750506000910152565b60008251613be7818460208701613ba9565b9190910192915050565b6020815260008251806020840152613c10816040850160208701613ba9565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020b5760003560e01c806383b116521161012a578063c0d8012c116100bd578063e9cbd8221161008c578063f119821a11610071578063f119821a1461059f578063f3a4a6f6146105b4578063f8c8765e146105df57600080fd5b8063e9cbd82214610579578063eb907b221461058c57600080fd5b8063c0d8012c14610518578063ddc1252614610540578063e2bbb15814610553578063e3056a341461056657600080fd5b8063ac4afa38116100f9578063ac4afa381461041e578063b02c43d014610481578063b26025aa14610508578063b4ac68601461051057600080fd5b806383b11652146103625780638dbdbe6d14610375578063a2b4f32514610388578063a47b4410146103fe57600080fd5b806343853ae3116101a25780635a59a1b2116101715780635a59a1b214610314578063610f347b14610327578063673a2a1f1461033a57806376cdb03b1461034f57600080fd5b806343853ae3146102c2578063441a3e70146102e5578063493310a4146102f857806351adfe491461030b57600080fd5b8063238efcbc116101de578063238efcbc1461028b5780632630c12f146102935780633a5017b4146102a657806341d4a1ab146102af57600080fd5b8063017b5f2e14610210578063090d23b91461022e5780630c340a241461024357806316330d4014610274575b600080fd5b6102186105f2565b6040516102259190613598565b60405180910390f35b61024161023c3660046135fa565b610657565b005b60005461025c906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610225565b61027d60065481565b604051908152602001610225565b6102416106aa565b60025461025c906001600160a01b031681565b61027d600d5481565b60045461025c906001600160a01b031681565b6102d56102d0366004613617565b61073f565b6040519015158152602001610225565b6102416102f3366004613630565b61077b565b610241610306366004613660565b610afe565b61027d60055481565b6102416103223660046135fa565b610bae565b6102416103353660046135fa565b610c7f565b610342610d83565b60405161022591906136b0565b600e5461025c906001600160a01b031681565b610241610370366004613764565b610e4e565b610241610383366004613798565b611070565b6103cd6103963660046135fa565b600760205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b039091169084565b6040516102259493929190931515845260208401929092526001600160a01b03166040830152606082015260800190565b61041161040c3660046135fa565b61153b565b604051610225919061380c565b61043161042c366004613617565b6115aa565b60408051998a526001600160a01b0398891660208b015296909716958801959095529215156060870152608086019190915260a085015260c084015260e083015261010082015261012001610225565b61049461048f366004613617565b611618565b604080519e8f529c151560208f01526001600160a01b039b8c169c8e019c909c529990981660608c015260808b019690965260a08a019490945260c089019290925260e08801526101008701526101208601526101408501526101608401526101808301526101a08201526101c001610225565b61027d6116a8565b600a5461027d565b61052b610526366004613617565b611782565b60408051928352602083019190915201610225565b61024161054e36600461381f565b6118b8565b610241610561366004613630565b6119aa565b60015461025c906001600160a01b031681565b60035461025c906001600160a01b031681565b61024161059a366004613617565b6119b5565b6105a76119eb565b6040516102259190613858565b61027d6105c23660046138f8565b600c60209081526000928352604080842090915290825290205481565b6102416105ed36600461391d565b611b86565b6060600860000180548060200260200160405190810160405280929190818152602001828054801561064d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161062f575b5050505050905090565b6000546201000090046001600160a01b03163314610688576040516305e7700560e51b815260040160405180910390fd5b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146106d55760405163aec80d4b60e01b815260040160405180910390fd5b60015460008054620100006001600160a01b0393841681810275ffffffffffffffffffffffffffffffffffffffff00001990931692909217808455604051929491900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e91a3565b600080600b838154811061075557610755613979565b60009182526020909120600d90910201600201546001600160a01b031633149392505050565b6000600b838154811061079057610790613979565b90600052602060002090600d020190506000600a8260030154815481106107b9576107b9613979565b600091825260209091206001840154600890920201915061010090046001600160a01b03163314806107f7575060028201546001600160a01b031633145b61081457604051633b382fcd60e21b815260040160405180910390fd5b600181015460009061082f906001600160a01b031685611fa9565b905061083e836000015461204b565b600061085d8460080154856007015461085791906139a5565b83612252565b9050600080600080610887886003015489600601548a6005015461088191906139a5565b8761226a565b60028c0154939750919550935091506001600160a01b03163314156109095760028801546003546108c5916001600160a01b039182169116846124d9565b80156108ea5760028801546004546108ea916001600160a01b039182169116836124d9565b848860080160008282546108fe91906139bc565b90915550610aae9050565b876004015486111561092e57604051630e0e9e5d60e31b815260040160405180910390fd5b6002870154600090600160a01b900460ff16156109915750600d54600554600a8a015461095b91906139bc565b4210156109725760065461096f90826139bc565b90505b61098e61098782670de0b6b3a76400006139a5565b869061256e565b94505b60035460018901546001600160a01b039081169116146109d2576001808a0154908901546109d2916001600160a01b039182169161010090910416896124d9565b6001808a0154600354918a0154610a21926001600160a01b03610100909304831692918216911614610a045786610a0e565b610a0e878a6139bc565b6003546001600160a01b031691906124d9565b8315610a4c576001890154600454610a4c916001600160a01b039182169161010090910416866124d9565b86886003016000828254610a6091906139a5565b9250508190555086896004016000828254610a7b91906139a5565b9091555050600689015460058a0154610a9491906139a5565b896006016000828254610aa791906139bc565b9091555050505b42600b8901556004880154610af25760018801805460ff1916905542600c808a01919091556003890154600090815260209182526040808220338352909252908120555b50505050505050505050565b6000546201000090046001600160a01b03163314610b2f576040516305e7700560e51b815260040160405180910390fd5b6000600a8781548110610b4457610b44613979565b6000918252602090912060026008909202019081018054971515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909816979097179096555060048501939093556005840191909155600683015560079091015550565b6000546201000090046001600160a01b03163314610bdf576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b038116600090815260096020526040902054610c255760405163c3a9f00560e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610c3060088261263e565b15610c7c576001600160a01b038116600081815260076020526040808220805460ff19169055517feac1eada73853c49d4c41fc681d6ac5332005e489babcae0b54f4024150601d79190a25b50565b6000546201000090046001600160a01b03163314610cb0576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b03811660009081526009602052604090205415610cf257604051630a0e5acf60e21b81526001600160a01b0382166004820152602401610c1c565b610cfd600882612777565b15610c7c576001600160a01b03811660008181526007602052604090206002810180546001600160a01b0319169092179091556001810154610d40574260018201555b805460ff191660011781556040516001600160a01b038316907fb41dc55c7c8ff45cc4ee01390b83d63e2c93edf7952c5ef3f4ba55a4af6b6a9690600090a25050565b6060600a805480602002602001604051908101604052809291908181526020016000905b82821015610e45576000848152602090819020604080516101208101825260088602909201805483526001808201546001600160a01b0390811685870152600283015490811693850193909352600160a01b90920460ff161515606084015260038101546080840152600481015460a0840152600581015460c0840152600681015460e0840152600701546101008301529083529092019101610da7565b50505050905090565b6000546201000090046001600160a01b03163314610e7f576040516305e7700560e51b815260040160405180910390fd5b600a805460408051610120810182528281526001600160a01b03998a16602082019081526002548b169282019283529815156060820190815260006080830181815260a084019a8b5260c08401998a5260e084019889526101008401978852600186018755959052905160089093027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a881019390935597517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a983018054918b166001600160a01b0319909216919091179055517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa8201805498511515600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090991691909916179690961790965594517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ab85015591517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ac840155517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ad830155517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ae82015590517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2af90910155565b6001600160a01b0381163314806110b357506001600160a01b0381163014806110b157506001600160a01b03811660009081526007602052604090205460ff165b155b156110dc5760405163c3a9f00560e01b81526001600160a01b0382166004820152602401610c1c565b6000600a84815481106110f1576110f1613979565b60009182526020909120600890910201600181015490915061111e906001600160a01b03163330866127e7565b6001810154600090611139906001600160a01b031685611fa9565b90508082600301600082825461114f91906139bc565b90915550506000858152600c6020908152604080832033845290915290205461141d576000600b805490509050600b604051806101c00160405280838152602001600115158152602001336001600160a01b03168152602001866001600160a01b0316815260200188815260200184815260200160008152602001600081526020016000815260200160008152602001428152602001428152602001428152602001600081525090806001815401808255809150506001900390600052602060002090600d02016000909190919091506000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816003015560a0820151816004015560c0820151816005015560e0820151816006015561010082015181600701556101208201518160080155610140820151816009015561016082015181600a015561018082015181600b01556101a082015181600c0155505080600c60008881526020019081526020016000206000336001600160a01b03166001600160a01b0316815260200190815260200160002081905550306001600160a01b0316846001600160a01b031614611392576001600160a01b0384166000908152600760209081526040822060040180546001810182559083529120018190555b60035460018401546001600160a01b0390811691161461141757600e546001840154604051638e877d9960e01b81526001600160a01b03918216600482015260248101859052911690638e877d9990604401600060405180830381600087803b1580156113fe57600080fd5b505af1158015611412573d6000803e3d6000fd5b505050505b50611534565b6000858152600c60209081526040808320338452909152812054600b8054909190811061144c5761144c613979565b90600052602060002090600d02019050611469816000015461204b565b60008160060154826005015461147f91906139a5565b9050600080611494846003015484600061226a565b505060018601546003549294509092506114c0916001600160a01b0390811691610100900416846124d9565b80156114eb5760018401546004546114eb916001600160a01b039182169161010090910416836124d9565b848460040160008282546114ff91906139bc565b925050819055508284600601600082825461151a91906139bc565b909155505042600a8501819055600b909401939093555050505b5050505050565b6001600160a01b03811660009081526007602090815260409182902060040180548351818402810184019094528084526060939283018282801561159e57602002820191906000526020600020905b81548152602001906001019080831161158a575b50505050509050919050565b600a81815481106115ba57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549597506001600160a01b039485169694841695600160a01b90940460ff169492939192909189565b600b818154811061162857600080fd5b60009182526020909120600d9091020180546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c909c01549a9c5060ff8a169b610100909a046001600160a01b039081169b99169997989697959694959394929391929091908e565b6000805b600a5481101561177e57611760600a82815481106116cc576116cc613979565b600091825260209182902060408051610120810182526008939093029091018054835260018101546001600160a01b0390811694840194909452600281015493841691830191909152600160a01b90920460ff161515606082015260038201546080820152600482015460a0820152600582015460c0820152600682015460e0820152600790910154610100820152612825565b61176a90836139bc565b915080611776816139d4565b9150506116ac565b5090565b6000806000600b848154811061179a5761179a613979565b60009182526020808320604080516101c081018252600d90940290910180548452600181015460ff81161515938501939093526001600160a01b03610100938490048116928501929092526002810154909116606084015260038101546080840152600481015460a0840152600581015460c0840152600681015460e084015260078101549183019190915260088101546101208301526009810154610140830152600a810154610160830152600b810154610180830152600c01546101a0820152915080611868866128c6565b915091508260e001518360c001518361188191906139bc565b61188b91906139a5565b9450826101200151836101000151826118a491906139bc565b6118ae91906139a5565b9350505050915091565b6000546201000090046001600160a01b031633146118e9576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b0382166119105760405163604b48b960e11b815260040160405180910390fd5b6001600160a01b03821630141561193a576040516306b3e95d60e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0384161790558061199d57600080546040516001600160a01b03808616936201000090930416917fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb191a35050565b6119a682612ac9565b5050565b6119a6828230611070565b6000546201000090046001600160a01b031633146119e6576040516305e7700560e51b815260040160405180910390fd5b600d55565b6008546060908067ffffffffffffffff811115611a0a57611a0a6139ef565b604051908082528060200260200182016040528015611a7857816020015b611a656040518060a001604052806000151581526020016000815260200160006001600160a01b0316815260200160008152602001606081525090565b815260200190600190039081611a285790505b50915060005b81811015611b81576007600060086000018381548110611aa057611aa0613979565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160a081018452815460ff16151581526001820154818401526002820154909416848401526003810154606085015260048101805484518185028101850190955280855291936080860193909290830182828015611b4857602002820191906000526020600020905b815481526020019060010190808311611b34575b505050505081525050838281518110611b6357611b63613979565b60200260200101819052508080611b79906139d4565b915050611a7e565b505090565b60005460ff16158015611ba05750600054610100900460ff165b15611bbe57604051631ee1e30360e21b815260040160405180910390fd5b60005460ff16158015611bdb576000805461ffff19166101011790555b611be433612ac9565b6203f48060058190555066038d7ea4c6800060068190555066470de4df820000600d8190555084600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600e60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600b604051806101c001604052806000815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020014281526020014281526020014281526020014281525090806001815401808255809150506001900390600052602060002090600d02016000909190919091506000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816003015560a0820151816004015560c0820151816005015560e0820151816006015561010082015181600701556101208201518160080155610140820151816009015561016082015181600a015561018082015181600b01556101a082015181600c01555050600a6040518061012001604052806000815260200160006001600160a01b03168152602001600260009054906101000a90046001600160a01b03166001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090806001815401808255809150506001900390600052602060002090600802016000909190919091506000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003015560a0820151816004015560c0820151816005015560e08201518160060155610100820151816007015550508015611534576000805460ff191690555050505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200e9190613a05565b612019906012613a28565b61202490600a613b2f565b905080600114612040576120388184613b3e565b915050612045565b829150505b92915050565b600080612057836128c6565b915091506000600b848154811061207057612070613979565b90600052602060002090600d020190506000600a82600301548154811061209957612099613979565b600091825260208220600160089092020101546003546001600160a01b03918216935016821461213657600254604051630787c49960e21b81526001600160a01b03848116600483015290911690631e1f126490602401602060405180830381865afa15801561210d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121319190613b5d565b612140565b670de0b6b3a76400005b60028401549091506001600160a01b0316301480159061217c575060028301546001600160a01b031660009081526007602052604090205460ff165b156121da578383600701600082825461219591906139bc565b909155506121a59050848261256e565b60028401546001600160a01b0316600090815260076020526040812060030180549091906121d49084906139bc565b90915550505b848360050160008282546121ee91906139bc565b90915550503360009081526007602052604090205460ff161561224a57612215858261256e565b60028401546001600160a01b0316600090815260076020526040812060030180549091906122449084906139bc565b90915550505b505050505050565b60008183106122615781612263565b825b9392505050565b6000806000806000600a888154811061228557612285613979565b6000918252602080832060408051610120810182526008949094029091018054845260018101546001600160a01b0390811693850193909352600281015492831691840191909152600160a01b90910460ff161515606083015260038101546080830152600481015460a0830152600581015460c0830152600681015460e083015260070154610100820152915061231c82612b30565b9050600061232983612b46565b60035460208501519192506000916001600160a01b039081169116146123c0576002546020850151604051630787c49960e21b81526001600160a01b039182166004820152911690631e1f126490602401602060405180830381865afa158015612397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bb9190613b5d565b6123ca565b670de0b6b3a76400005b90506123d68a8261256e565b97506123e2898261256e565b60025460048054604051630787c49960e21b81526001600160a01b0391821692810192909252929850911690631e1f126490602401602060405180830381865afa925050508015612450575060408051601f3d908101601f1916820190925261244d91810190613b5d565b60015b612459576124cc565b80156124ca5760e085015161247a90612472908361256e565b8a9086612b5d565b975061249f6124978287610100015161256e90919063ffffffff16565b889085612b5d565b60a08601519096506124b3908a9086612b5d565b60c08601519099506124c790889085612b5d565b96505b505b5050505093509350935093565b6040516001600160a01b03831660248201526044810182905261256990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612c18565b505050565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106125c05760405163072fa3c960e31b815260048101829052670de0b6b3a76400006024820152604401610c1c565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826125fa5780670de0b6b3a7640000850401945050505050612045565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6001600160a01b038116600090815260018301602052604081205480612668576000915050612045565b60006126756001836139a5565b905060006001612683875490565b61268d91906139a5565b90508082146127195760008660000182815481106126ad576126ad613979565b60009182526020909120015487546001600160a01b03909116915081908890859081106126dc576126dc613979565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018801909152604090208390555b855486908061272a5761272a613b76565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260018881019091526040822091909155935050505092915050565b6001600160a01b03811660009081526001830160205260408120541561279f57506000612045565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6040516001600160a01b038085166024830152831660448201526064810182905261281f9085906323b872dd60e01b90608401612505565b50505050565b600081608001516000141561283c57506000919050565b60408083015160208401519151630787c49960e21b81526001600160a01b03928316600482015260009290911690631e1f126490602401602060405180830381865afa158015612890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b49190613b5d565b6080840151909150612263908261256e565b6000806000600b84815481106128de576128de613979565b60009182526020808320604080516101c081018252600d90940290910180548452600181015460ff81161515938501939093526001600160a01b036101009384900481169285019290925260028101549091166060840152600381015460808401819052600482015460a0850152600582015460c0850152600682015460e085015260078201549284019290925260088101546101208401526009810154610140840152600a80820154610160850152600b820154610180850152600c909101546101a084015280549294509181106129b9576129b9613979565b6000918252602080832060408051610120810182526008949094029091018054845260018101546001600160a01b0390811693850193909352600281015492831691840191909152600160a01b90910460ff161515606083015260038101546080830152600481015460a0830152600581015460c0830152600681015460e083015260070154610100820152610180840151909250612a8d90612a8290612a7b90670de0b6b3a7640000906301e1338090612a7490426139a5565b9190612b5d565b8490612ca2565b60a08501519061256e565b90506000612a9a83612cf9565b9050612ab0612aa884612b30565b839083612b5d565b9550612abe612aa884612b46565b945050505050915091565b6000805475ffffffffffffffffffffffffffffffffffffffff00001916620100006001600160a01b0384811682810293909317808555604051939492900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e9190a350565b60008160e001518260a0015161204591906139bc565b60008161010001518260c0015161204591906139bc565b60008080600019858709858702925082811083820303915050838110612ba05760405163072fa3c960e31b81526004810182905260248101859052604401610c1c565b80612bb057508290049050612263565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201528290600090612c67906001600160a01b038416908590612d17565b80519091501561281f5780806020019051810190612c859190613b8c565b61281f57604051639b8d506160e01b815260040160405180910390fd5b600080612cae84612cf9565b90508360600151612cca57612cc3818461256e565b9150612cf2565b670de0b6b3a7640000612ce5612ce0838661256e565b612dba565b612cef91906139a5565b91505b5092915050565b6000612d0482612b46565b612d0d83612b30565b61204591906139bc565b6060833b612d435760405163dc5dd7fd60e01b81526001600160a01b0385166004820152602401610c1c565b600080856001600160a01b031685604051612d5e9190613bd5565b6000604051808303816000865af19150503d8060008114612d9b576040519150601f19603f3d011682016040523d82523d6000602084013e612da0565b606091505b5091509150612db0828286612e10565b9695505050505050565b6000680736ea4425c11ac6318210612de857604051632864fd0160e11b815260048101839052602401610c1c565b6714057b7ef767814f8202612263670de0b6b3a76400006706f05b59d3b20000830104612e49565b60608315612e1f575081612263565b825115612e2f5782518060208501fd5b8160405162461bcd60e51b8152600401610c1c9190613bf1565b6000680a688906bd8b0000008210612e7757604051632132de2160e01b815260048101839052602401610c1c565b50670de0b6b3a764000060409190911b0477800000000000000000000000000000000000000000000000678000000000000000821615612ec05768016a09e667f3bcc9090260401c5b674000000000000000821615612edf576801306fe0a31b7152df0260401c5b672000000000000000821615612efe576801172b83c7d517adce0260401c5b671000000000000000821615612f1d5768010b5586cf9890f62a0260401c5b670800000000000000821615612f3c576801059b0d31585743ae0260401c5b670400000000000000821615612f5b57680102c9a3e778060ee70260401c5b670200000000000000821615612f7a5768010163da9fb33356d80260401c5b670100000000000000821615612f9957680100b1afa5abcbed610260401c5b6680000000000000821615612fb75768010058c86da1c09ea20260401c5b6640000000000000821615612fd5576801002c605e2e8cec500260401c5b6620000000000000821615612ff357680100162f3904051fa10260401c5b6610000000000000821615613011576801000b175effdc76ba0260401c5b660800000000000082161561302f57680100058ba01fb9f96d0260401c5b660400000000000082161561304d5768010002c5cc37da94920260401c5b660200000000000082161561306b576801000162e525ee05470260401c5b66010000000000008216156130895768010000b17255775c040260401c5b658000000000008216156130a6576801000058b91b5bc9ae0260401c5b654000000000008216156130c357680100002c5c89d5ec6d0260401c5b652000000000008216156130e05768010000162e43f4f8310260401c5b651000000000008216156130fd57680100000b1721bcfc9a0260401c5b6508000000000082161561311a5768010000058b90cf1e6e0260401c5b65040000000000821615613137576801000002c5c863b73f0260401c5b6502000000000082161561315457680100000162e430e5a20260401c5b65010000000000821615613171576801000000b1721835510260401c5b64800000000082161561318d57680100000058b90c0b490260401c5b6440000000008216156131a95768010000002c5c8601cc0260401c5b6420000000008216156131c5576801000000162e42fff00260401c5b6410000000008216156131e15768010000000b17217fbb0260401c5b6408000000008216156131fd576801000000058b90bfce0260401c5b64040000000082161561321957680100000002c5c85fe30260401c5b6402000000008216156132355768010000000162e42ff10260401c5b64010000000082161561325157680100000000b17217f80260401c5b638000000082161561326c5768010000000058b90bfc0260401c5b6340000000821615613287576801000000002c5c85fe0260401c5b63200000008216156132a257680100000000162e42ff0260401c5b63100000008216156132bd576801000000000b17217f0260401c5b63080000008216156132d857680100000000058b90c00260401c5b63040000008216156132f35768010000000002c5c8600260401c5b630200000082161561330e576801000000000162e4300260401c5b63010000008216156133295768010000000000b172180260401c5b62800000821615613343576801000000000058b90c0260401c5b6240000082161561335d57680100000000002c5c860260401c5b622000008216156133775768010000000000162e430260401c5b6210000082161561339157680100000000000b17210260401c5b620800008216156133ab5768010000000000058b910260401c5b620400008216156133c5576801000000000002c5c80260401c5b620200008216156133df57680100000000000162e40260401c5b620100008216156133f9576801000000000000b1720260401c5b61800082161561341257680100000000000058b90260401c5b61400082161561342b5768010000000000002c5d0260401c5b612000821615613444576801000000000000162e0260401c5b61100082161561345d5768010000000000000b170260401c5b610800821615613476576801000000000000058c0260401c5b61040082161561348f57680100000000000002c60260401c5b6102008216156134a857680100000000000001630260401c5b6101008216156134c157680100000000000000b10260401c5b60808216156134d957680100000000000000590260401c5b60408216156134f1576801000000000000002c0260401c5b602082161561350957680100000000000000160260401c5b6010821615613521576801000000000000000b0260401c5b600882161561353957680100000000000000060260401c5b600482161561355157680100000000000000030260401c5b600282161561356957680100000000000000010260401c5b600182161561358157680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b6020808252825182820181905260009190848201906040850190845b818110156135d95783516001600160a01b0316835292840192918401916001016135b4565b50909695505050505050565b6001600160a01b0381168114610c7c57600080fd5b60006020828403121561360c57600080fd5b8135612263816135e5565b60006020828403121561362957600080fd5b5035919050565b6000806040838503121561364357600080fd5b50508035926020909101359150565b8015158114610c7c57600080fd5b60008060008060008060c0878903121561367957600080fd5b86359550602087013561368b81613652565b95989597505050506040840135936060810135936080820135935060a0909101359150565b602080825282518282018190526000919060409081850190868401855b82811015613757578151805185526001600160a01b0387820151168786015285810151613704878701826001600160a01b03169052565b506060818101511515908601526080808201519086015260a0808201519086015260c0808201519086015260e08082015190860152610100908101519085015261012090930192908501906001016136cd565b5091979650505050505050565b60008060008060008060c0878903121561377d57600080fd5b8635613788816135e5565b9550602087013561368b81613652565b6000806000606084860312156137ad57600080fd5b833592506020840135915060408401356137c6816135e5565b809150509250925092565b600081518084526020808501945080840160005b83811015613801578151875295820195908201906001016137e5565b509495945050505050565b60208152600061226360208301846137d1565b6000806040838503121561383257600080fd5b823561383d816135e5565b9150602083013561384d81613652565b809150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156138ea57888303603f1901855281518051151584528781015188850152868101516001600160a01b0316878501526060808201519085015260809081015160a0918501829052906138d6818601836137d1565b96890196945050509086019060010161387f565b509098975050505050505050565b6000806040838503121561390b57600080fd5b82359150602083013561384d816135e5565b6000806000806080858703121561393357600080fd5b843561393e816135e5565b9350602085013561394e816135e5565b9250604085013561395e816135e5565b9150606085013561396e816135e5565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156139b7576139b761398f565b500390565b600082198211156139cf576139cf61398f565b500190565b60006000198214156139e8576139e861398f565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613a1757600080fd5b815160ff8116811461226357600080fd5b600060ff821660ff841680821015613a4257613a4261398f565b90039392505050565b600181815b80851115613a86578160001904821115613a6c57613a6c61398f565b80851615613a7957918102915b93841c9390800290613a50565b509250929050565b600082613a9d57506001612045565b81613aaa57506000612045565b8160018114613ac05760028114613aca57613ae6565b6001915050612045565b60ff841115613adb57613adb61398f565b50506001821b612045565b5060208310610133831016604e8410600b8410161715613b09575081810a612045565b613b138383613a4b565b8060001904821115613b2757613b2761398f565b029392505050565b600061226360ff841683613a8e565b6000816000190483118215151615613b5857613b5861398f565b500290565b600060208284031215613b6f57600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613b9e57600080fd5b815161226381613652565b60005b83811015613bc4578181015183820152602001613bac565b8381111561281f5750506000910152565b60008251613be7818460208701613ba9565b9190910192915050565b6020815260008251806020840152613c10816040850160208701613ba9565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9711,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "initializing",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9713,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "initialized",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6325,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6327,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3331,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "priceOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceOracle)6635"
      },
      {
        "astId": 3334,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "stablecoin",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)6545"
      },
      {
        "astId": 3337,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "bonusToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)6545"
      },
      {
        "astId": 3339,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "earlyWithdrawalPeriod",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3341,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "earlyWithdrawalFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3346,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "magisters",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Data)9022_storage)"
      },
      {
        "astId": 3349,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "magistersSet",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Set)7401_storage"
      },
      {
        "astId": 3353,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "pools",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Data)9284_storage)dyn_storage"
      },
      {
        "astId": 3357,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "deposits",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Data)7390_storage)dyn_storage"
      },
      {
        "astId": 3363,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "currentDepositIds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3365,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "workFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3368,
        "contract": "contracts/Depositary.sol:Depositary",
        "label": "bank",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IBank)3288"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Data)7390_storage)dyn_storage": {
        "base": "t_struct(Data)7390_storage",
        "encoding": "dynamic_array",
        "label": "struct Deposit.Data[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Data)9284_storage)dyn_storage": {
        "base": "t_struct(Data)9284_storage",
        "encoding": "dynamic_array",
        "label": "struct Pool.Data[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBank)3288": {
        "encoding": "inplace",
        "label": "contract IBank",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)6545": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)6635": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Data)9022_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Magister.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)9022_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_struct(Data)7390_storage": {
        "encoding": "inplace",
        "label": "struct Deposit.Data",
        "members": [
          {
            "astId": 7363,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7365,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "isActive",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 7367,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "depositor",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7369,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "magister",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7371,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "poolId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7373,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "principal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7375,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "depositorTotalAccruedRewards",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7377,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "depositorWithdrawnRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7379,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "magisterTotalAccruedRewards",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7381,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "magisterWithdrawnRewards",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 7383,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "createdAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 7385,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "lastDepositAt",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 7387,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "lastInteractionAt",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 7389,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "closedAt",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Data)9022_storage": {
        "encoding": "inplace",
        "label": "struct Magister.Data",
        "members": [
          {
            "astId": 9012,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9014,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "createdAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9016,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "addr",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9018,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "totalIncome",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9021,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "depositIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Data)9284_storage": {
        "encoding": "inplace",
        "label": "struct Pool.Data",
        "members": [
          {
            "astId": 9265,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9268,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "depositToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)6545"
          },
          {
            "astId": 9271,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "priceOracle",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IPriceOracle)6635"
          },
          {
            "astId": 9273,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "isCompounding",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9275,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "depositsAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9277,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "depositorApr",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9279,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "magisterApr",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9281,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "depositorBonusApr",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9283,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "magisterBonusApr",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Set)7401_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableAddressSet.Set",
        "members": [
          {
            "astId": 7396,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "elements",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7400,
            "contract": "contracts/Depositary.sol:Depositary",
            "label": "indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}