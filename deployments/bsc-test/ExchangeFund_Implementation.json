{
  "address": "0x784ec6EbB1bD791401205B1376704854146B7ace",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "CallToNonContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundDepositableTokenAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundDepositableTokenNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "ExchangeFundDepositableTokenTooLargeDecimals",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundDepositableTokenZeroDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExchangeFundInsufficientDeposits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExchangeFundInsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundNoNeedToService",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundSameTokenSwap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundTokenNotAllowedToBeDeposited",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundTokenNotAllowedToBeSalvaged",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundTokenNotAllowedToBeSwapped",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundTokenNotAllowedToBeWithdrawn",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "FixedPointMathMulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedCantGoverItself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedGovernorZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyPendingGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeERC20NoReturnData",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "DepositableTokenListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "DepositableTokenUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Divest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernanceTransited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Invest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceTransition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Service",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippageTolerance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSlippageTolerance",
          "type": "uint256"
        }
      ],
      "name": "SlippageToleranceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapDeadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapDeadline",
          "type": "uint256"
        }
      ],
      "name": "SwapDeadlineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositableTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "divest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositableTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_wrappedNativeCurrency",
          "type": "address"
        },
        {
          "internalType": "contract ICore",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router",
          "name": "_uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "listDepositableToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "salvage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "service",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSlippageTolerance",
          "type": "uint256"
        }
      ],
      "name": "setSlippageTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapDeadline",
          "type": "uint256"
        }
      ],
      "name": "setSwapDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "useWrappedNativeCurrencyAsIntermediateToken",
          "type": "bool"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        }
      ],
      "name": "transitGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unlistDepositableToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeCurrency",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6dd1618ef9b9314653db033cde62da7b694dc395d3508fba6ec827bae424dd4e",
  "receipt": {
    "to": null,
    "from": "0x21309DA9AD64eA82431758B27cbD63E5d53A556c",
    "contractAddress": "0x784ec6EbB1bD791401205B1376704854146B7ace",
    "transactionIndex": 2,
    "gasUsed": "3247234",
    "logsBloom": "0x
    "blockHash": "0xadcdd3da0eac21314f8faa491121eb1cf92eda709a097835242ada10f5c4c98c",
    "transactionHash": "0x6dd1618ef9b9314653db033cde62da7b694dc395d3508fba6ec827bae424dd4e",
    "logs": [],
    "blockNumber": 13816251,
    "cumulativeGasUsed": "3471085",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e55ff2d5620125d078bf2822362bfb18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"CallToNonContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundDepositableTokenAlreadyListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundDepositableTokenNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"ExchangeFundDepositableTokenTooLargeDecimals\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundDepositableTokenZeroDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExchangeFundInsufficientDeposits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExchangeFundInsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundNoNeedToService\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundSameTokenSwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundTokenNotAllowedToBeDeposited\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundTokenNotAllowedToBeSalvaged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundTokenNotAllowedToBeSwapped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundTokenNotAllowedToBeWithdrawn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FixedPointMathMulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedCantGoverItself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedGovernorZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyPendingGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeERC20NoReturnData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"DepositableTokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DepositableTokenUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Divest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernanceTransited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernanceTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Service\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlippageTolerance\",\"type\":\"uint256\"}],\"name\":\"SlippageToleranceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapDeadline\",\"type\":\"uint256\"}],\"name\":\"SwapDeadlineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"divest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositableTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_wrappedNativeCurrency\",\"type\":\"address\"},{\"internalType\":\"contract ICore\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"listDepositableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"service\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSlippageTolerance\",\"type\":\"uint256\"}],\"name\":\"setSlippageTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapDeadline\",\"type\":\"uint256\"}],\"name\":\"setSwapDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useWrappedNativeCurrencyAsIntermediateToken\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"transitGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unlistDepositableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ExchangeFundDepositableTokenAlreadyListed(address)\":[{\"details\":\"Thrown when trying to list depositable token that's already listed.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundDepositableTokenNotListed(address)\":[{\"details\":\"Thrown when trying to unlist depositable token that's not listed.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundDepositableTokenTooLargeDecimals(address,uint8)\":[{\"details\":\"Thrown when trying to list depositable token that has too large decimals.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundDepositableTokenZeroDecimals(address)\":[{\"details\":\"Thrown when trying to list depositable token that has zero decimals.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundNoNeedToService(address)\":[{\"details\":\"Thrown when there's no need to service the `token`/stablecoin pair cause the difference between target and pair price does not exceed servicing threshold.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundTokenNotAllowedToBeDeposited(address)\":[{\"details\":\"Thrown when interacting with a token that's not allowed to be deposited.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundTokenNotAllowedToBeSalvaged(address)\":[{\"details\":\"Thrown when trying to salvage one of depositable tokens or stablecoin.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundTokenNotAllowedToBeSwapped(address)\":[{\"details\":\"Thrown when trying to swap token that's not allowed to be swapped.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundTokenNotAllowedToBeWithdrawn(address)\":[{\"details\":\"Thrown when interacting with a token that's not allowed to be withdrawn.\",\"params\":{\"token\":\"The address of the token contract.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExchangeFund.sol\":\"ExchangeFund\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/Core.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\n\\n/// @dev Thrown when trying to set platform fees that don't sum up to one.\\n/// @param stabilizationFee The stabilization fee that was tried to set.\\n/// @param exchangeFee The stabilization fee that was tried to set.\\n/// @param developmentFee The stabilization fee that was tried to set.\\nerror BaksDAOPlatformFeesDontSumUpToOne(uint256 stabilizationFee, uint256 exchangeFee, uint256 developmentFee);\\n\\ninterface ICore {\\n    event MinimumPrincipalAmountUpdated(uint256 minimumPrincipalAmount, uint256 newMinimumPrincipalAmount);\\n    event StabilityFeeUpdated(uint256 stabilityFee, uint256 newStabilityFee);\\n    event RebalancingThresholdUpdated(uint256 rebalancingThreshold, uint256 newRebalancingThreshold);\\n    event PlatformFeesUpdated(\\n        uint256 stabilizationFee,\\n        uint256 newStabilizationFee,\\n        uint256 exchangeFee,\\n        uint256 newExchangeFee,\\n        uint256 developmentFee,\\n        uint256 newDevelopmentFee\\n    );\\n    event MarginCallLoanToValueRatioUpdated(uint256 marginCallLoanToValueRatio, uint256 newMarginCallLoanToValueRatio);\\n    event LiquidationLoanToValueRatioUpdated(\\n        uint256 liqudationLoanToValueRatio,\\n        uint256 newLiquidationLoanToValueRatio\\n    );\\n\\n    event ServicingThresholdUpdated(uint256 servicingThreshold, uint256 newServicingThreshold);\\n    event MinimumLiquidityUpdated(uint256 minimumLiquidity, uint256 newMinimumLiquidity);\\n\\n    function minimumPrincipalAmount() external view returns (uint256);\\n\\n    function stabilityFee() external view returns (uint256);\\n\\n    function stabilizationFee() external view returns (uint256);\\n\\n    function exchangeFee() external view returns (uint256);\\n\\n    function developmentFee() external view returns (uint256);\\n\\n    function marginCallLoanToValueRatio() external view returns (uint256);\\n\\n    function liquidationLoanToValueRatio() external view returns (uint256);\\n\\n    function rebalancingThreshold() external view returns (uint256);\\n\\n    function servicingThreshold() external view returns (uint256);\\n\\n    function minimumLiquidity() external view returns (uint256);\\n}\\n\\ncontract Core is Initializable, Governed, ICore {\\n    uint256 internal constant ONE = 100e16;\\n\\n    uint256 public override minimumPrincipalAmount;\\n    uint256 public override stabilityFee;\\n    uint256 public override stabilizationFee;\\n    uint256 public override exchangeFee;\\n    uint256 public override developmentFee;\\n    uint256 public override marginCallLoanToValueRatio;\\n    uint256 public override liquidationLoanToValueRatio;\\n    uint256 public override rebalancingThreshold;\\n\\n    uint256 public override servicingThreshold;\\n    uint256 public override minimumLiquidity;\\n\\n    function initialize() external initializer {\\n        setGovernor(msg.sender);\\n\\n        minimumPrincipalAmount = 50e18; // 50 BAKS\\n        stabilityFee = 3e16; // 3 %\\n        stabilizationFee = 85e16; // 85 %\\n        exchangeFee = 15e16; // 15 %\\n        developmentFee = 0;\\n        marginCallLoanToValueRatio = 75e16; // 75 %\\n        liquidationLoanToValueRatio = 83e16; // 83 %\\n        rebalancingThreshold = 1e16; // 1 %\\n\\n        servicingThreshold = 1e16; // 1%\\n        minimumLiquidity = 50000e18; // 50000 BAKS\\n    }\\n\\n    function setMinimumPrincipalAmount(uint256 newMinimumPrincipalAmount) external onlyGovernor {\\n        emit StabilityFeeUpdated(minimumPrincipalAmount, newMinimumPrincipalAmount);\\n        minimumPrincipalAmount = newMinimumPrincipalAmount;\\n    }\\n\\n    function setStabilityFee(uint256 newStabilityFee) external onlyGovernor {\\n        emit StabilityFeeUpdated(stabilityFee, newStabilityFee);\\n        stabilityFee = newStabilityFee;\\n    }\\n\\n    function setPlatformFees(\\n        uint256 newStabilizationFee,\\n        uint256 newExchangeFee,\\n        uint256 newDevelopmentFee\\n    ) external onlyGovernor {\\n        if (newStabilizationFee + newExchangeFee + newDevelopmentFee != ONE) {\\n            revert BaksDAOPlatformFeesDontSumUpToOne(newStabilizationFee, newExchangeFee, newDevelopmentFee);\\n        }\\n        emit PlatformFeesUpdated(\\n            stabilizationFee,\\n            newStabilizationFee,\\n            exchangeFee,\\n            newExchangeFee,\\n            developmentFee,\\n            newDevelopmentFee\\n        );\\n        stabilizationFee = newStabilizationFee;\\n        exchangeFee = newExchangeFee;\\n        developmentFee = newDevelopmentFee;\\n    }\\n\\n    function setMarginCallLoanToValueRatio(uint256 newMarginCallLoanToValueRatio) external onlyGovernor {\\n        emit MarginCallLoanToValueRatioUpdated(marginCallLoanToValueRatio, newMarginCallLoanToValueRatio);\\n        marginCallLoanToValueRatio = newMarginCallLoanToValueRatio;\\n    }\\n\\n    function setLiquidationLoanToValueRatio(uint256 newLiquidationLoanToValueRatio) external onlyGovernor {\\n        emit LiquidationLoanToValueRatioUpdated(liquidationLoanToValueRatio, newLiquidationLoanToValueRatio);\\n        liquidationLoanToValueRatio = newLiquidationLoanToValueRatio;\\n    }\\n\\n    function setRebalancingThreshold(uint256 newRebalancingThreshold) external onlyGovernor {\\n        emit RebalancingThresholdUpdated(rebalancingThreshold, newRebalancingThreshold);\\n        rebalancingThreshold = newRebalancingThreshold;\\n    }\\n\\n    function setServicingThreshold(uint256 newServicingThreshold) external onlyGovernor {\\n        emit ServicingThresholdUpdated(servicingThreshold, newServicingThreshold);\\n        servicingThreshold = newServicingThreshold;\\n    }\\n\\n    function setMinimumLiquidity(uint256 newMinimumLiquidity) external onlyGovernor {\\n        emit MinimumLiquidityUpdated(minimumLiquidity, newMinimumLiquidity);\\n        minimumLiquidity = newMinimumLiquidity;\\n    }\\n}\\n\",\"keccak256\":\"0xbabf81c75977a58d01b9a8cc7dd83fe8c24b14be6c69ba25a74bf1c1d2202c77\",\"license\":\"BUSL-1.1\"},\"contracts/ExchangeFund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"./libraries/AmountNormalization.sol\\\";\\nimport \\\"./libraries/EnumerableAddressSet.sol\\\";\\nimport \\\"./libraries/FixedPointMath.sol\\\";\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\nimport {ICore} from \\\"./Core.sol\\\";\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {IERC20} from \\\"./interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./interfaces/IPriceOracle.sol\\\";\\nimport {IUniswapV2Factory, IUniswapV2Router, IUniswapV2Pair} from \\\"./interfaces/UniswapV2.sol\\\";\\n\\n/// @dev Thrown when trying to list depositable token that has zero decimals.\\n/// @param token The address of the token contract.\\nerror ExchangeFundDepositableTokenZeroDecimals(IERC20 token);\\n\\n/// @dev Thrown when trying to list depositable token that has too large decimals.\\n/// @param token The address of the token contract.\\nerror ExchangeFundDepositableTokenTooLargeDecimals(IERC20 token, uint8 decimals);\\n\\n/// @dev Thrown when trying to list depositable token that's already listed.\\n/// @param token The address of the token contract.\\nerror ExchangeFundDepositableTokenAlreadyListed(IERC20 token);\\n\\n/// @dev Thrown when trying to unlist depositable token that's not listed.\\n/// @param token The address of the token contract.\\nerror ExchangeFundDepositableTokenNotListed(IERC20 token);\\n\\n/// @dev Thrown when interacting with a token that's not allowed to be deposited.\\n/// @param token The address of the token contract.\\nerror ExchangeFundTokenNotAllowedToBeDeposited(IERC20 token);\\n\\n/// @dev Thrown when interacting with a token that's not allowed to be withdrawn.\\n/// @param token The address of the token contract.\\nerror ExchangeFundTokenNotAllowedToBeWithdrawn(IERC20 token);\\n\\n/// @dev Thrown when trying to salvage one of depositable tokens or stablecoin.\\n/// @param token The address of the token contract.\\nerror ExchangeFundTokenNotAllowedToBeSalvaged(IERC20 token);\\n\\nerror ExchangeFundInsufficientDeposits();\\n\\nerror ExchangeFundInsufficientLiquidity();\\n\\nerror ExchangeFundSameTokenSwap(IERC20 token);\\n\\n/// @dev Thrown when trying to swap token that's not allowed to be swapped.\\n/// @param token The address of the token contract.\\nerror ExchangeFundTokenNotAllowedToBeSwapped(IERC20 token);\\n\\n/// @dev Thrown when there's no need to service the `token`/stablecoin pair cause the difference between target and\\n/// pair price does not exceed servicing threshold.\\n/// @param token The address of the token contract.\\nerror ExchangeFundNoNeedToService(IERC20 token);\\n\\ncontract ExchangeFund is Initializable, Governed, ReentrancyGuard {\\n    using AmountNormalization for IERC20;\\n    using EnumerableAddressSet for EnumerableAddressSet.Set;\\n    using FixedPointMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant ONE = 100e16;\\n    uint8 internal constant DECIMALS = 18;\\n\\n    IERC20 public wrappedNativeCurrency;\\n    ICore public core;\\n    IERC20 public stablecoin;\\n    IPriceOracle public priceOracle;\\n    IUniswapV2Router public uniswapV2Router;\\n\\n    address public operator;\\n\\n    uint256 public slippageTolerance;\\n    uint256 public swapDeadline;\\n\\n    mapping(address => mapping(IERC20 => uint256)) public deposits;\\n    mapping(address => mapping(IERC20 => uint256)) public liquidity;\\n\\n    mapping(IERC20 => bool) public depositableTokens;\\n    EnumerableAddressSet.Set internal depositableTokensSet;\\n\\n    event DepositableTokenListed(IERC20 indexed token, IUniswapV2Pair pair);\\n    event DepositableTokenUnlisted(IERC20 indexed token);\\n\\n    event SlippageToleranceUpdated(uint256 slippageTolerance, uint256 newSlippageTolerance);\\n    event SwapDeadlineUpdated(uint256 swapDeadline, uint256 newSwapDeadline);\\n\\n    event Deposit(address indexed account, IERC20 indexed token, uint256 amount);\\n    event Swap(address indexed account, IERC20 indexed tokenA, IERC20 indexed tokenB, uint256 amountA, uint256 amountB);\\n    event Invest(address indexed account, IERC20 indexed token, uint256 amount);\\n    event Divest(address indexed account, IERC20 indexed token, uint256 amount);\\n    event Withdrawal(address indexed account, IERC20 indexed token, uint256 amount);\\n    event Service(address indexed account, IERC20 indexed token);\\n\\n    modifier tokenAllowedToBeDeposited(IERC20 token) {\\n        if (!depositableTokensSet.contains(address(token))) {\\n            revert ExchangeFundTokenNotAllowedToBeDeposited(token);\\n        }\\n        _;\\n    }\\n\\n    modifier tokenAllowedToBeSwapped(IERC20 token) {\\n        if (token != stablecoin && !depositableTokensSet.contains(address(token))) {\\n            revert ExchangeFundTokenNotAllowedToBeSwapped(token);\\n        }\\n        _;\\n    }\\n\\n    function initialize(\\n        IERC20 _wrappedNativeCurrency,\\n        ICore _core,\\n        IERC20 _stablecoin,\\n        IPriceOracle _priceOracle,\\n        IUniswapV2Router _uniswapV2Router,\\n        address _operator\\n    ) external initializer {\\n        setGovernor(msg.sender);\\n\\n        wrappedNativeCurrency = _wrappedNativeCurrency;\\n\\n        core = _core;\\n        stablecoin = _stablecoin;\\n        priceOracle = _priceOracle;\\n        uniswapV2Router = _uniswapV2Router;\\n        operator = _operator;\\n\\n        slippageTolerance = 5e15; // 0.5 %\\n        swapDeadline = 20 minutes;\\n\\n        _stablecoin.approve(address(_uniswapV2Router), type(uint256).max);\\n    }\\n\\n    function deposit(IERC20 token, uint256 amount) external nonReentrant tokenAllowedToBeDeposited(token) {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 normalizedAmount = token.normalizeAmount(amount);\\n        deposits[msg.sender][token] += normalizedAmount;\\n\\n        emit Deposit(msg.sender, token, normalizedAmount);\\n    }\\n\\n    function swap(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint256 amount,\\n        bool useWrappedNativeCurrencyAsIntermediateToken\\n    ) external nonReentrant tokenAllowedToBeSwapped(tokenA) tokenAllowedToBeSwapped(tokenB) {\\n        uint256 normalizedAmount = tokenA.normalizeAmount(amount);\\n        if (normalizedAmount > deposits[msg.sender][tokenA]) {\\n            revert ExchangeFundInsufficientDeposits();\\n        }\\n\\n        if (tokenA == tokenB) {\\n            revert ExchangeFundSameTokenSwap(tokenA);\\n        }\\n\\n        IERC20[] memory path = new IERC20[](useWrappedNativeCurrencyAsIntermediateToken ? 3 : 2);\\n        path[0] = tokenA;\\n        path[1] = useWrappedNativeCurrencyAsIntermediateToken ? wrappedNativeCurrency : tokenB;\\n        if (useWrappedNativeCurrencyAsIntermediateToken) {\\n            path[2] = tokenB;\\n        }\\n\\n        uint256[] memory amounts = uniswapV2Router.getAmountsOut(amount, path);\\n        uint256 normalizedAmountOut = tokenB.normalizeAmount(amounts[amounts.length - 1]);\\n\\n        amounts = uniswapV2Router.swapExactTokensForTokens(\\n            amount,\\n            tokenB.denormalizeAmount(normalizedAmountOut.mul(ONE - slippageTolerance)),\\n            path,\\n            address(this),\\n            block.timestamp + swapDeadline\\n        );\\n\\n        uint256 normalizedTokenAAmount = tokenA.normalizeAmount(amounts[0]);\\n        uint256 normalizedTokenBAmount = tokenB.normalizeAmount(amounts[amounts.length - 1]);\\n\\n        deposits[msg.sender][tokenA] -= normalizedTokenAAmount;\\n        deposits[msg.sender][tokenB] += normalizedTokenBAmount;\\n\\n        emit Swap(msg.sender, tokenA, tokenB, normalizedTokenAAmount, normalizedTokenBAmount);\\n    }\\n\\n    function invest(IERC20 token, uint256 amount) external nonReentrant {\\n        uint256 normalizedAmount = token.normalizeAmount(amount);\\n        if (normalizedAmount > deposits[msg.sender][token]) {\\n            revert ExchangeFundInsufficientDeposits();\\n        }\\n\\n        uint256 tokenValue = quote(token, amount);\\n        (, uint256 amountSent, uint256 liquidityMinted) = uniswapV2Router.addLiquidity(\\n            stablecoin,\\n            token,\\n            tokenValue,\\n            amount,\\n            tokenValue.mul(ONE - slippageTolerance),\\n            token.denormalizeAmount(normalizedAmount.mul(ONE - slippageTolerance)),\\n            address(this),\\n            block.timestamp + swapDeadline\\n        );\\n\\n        deposits[msg.sender][token] -= token.normalizeAmount(amountSent);\\n        liquidity[msg.sender][token] += liquidityMinted;\\n\\n        emit Invest(msg.sender, token, normalizedAmount);\\n    }\\n\\n    function divest(IERC20 token, uint256 amount) external nonReentrant {\\n        if (amount > liquidity[msg.sender][token]) {\\n            revert ExchangeFundInsufficientLiquidity();\\n        }\\n\\n        (, uint256 amountReceived) = uniswapV2Router.removeLiquidity(\\n            stablecoin,\\n            token,\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + swapDeadline\\n        );\\n\\n        deposits[msg.sender][token] += token.normalizeAmount(amountReceived);\\n        liquidity[msg.sender][token] -= amount;\\n\\n        emit Divest(msg.sender, token, amount);\\n    }\\n\\n    function withdraw(IERC20 token, uint256 amount) external nonReentrant {\\n        if (token == stablecoin) {\\n            revert ExchangeFundTokenNotAllowedToBeWithdrawn(token);\\n        }\\n\\n        uint256 normalizedAmount = token.normalizeAmount(amount);\\n        if (normalizedAmount > deposits[msg.sender][token]) {\\n            revert ExchangeFundInsufficientDeposits();\\n        }\\n\\n        deposits[msg.sender][token] -= normalizedAmount;\\n        token.safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawal(msg.sender, token, normalizedAmount);\\n    }\\n\\n    function listDepositableToken(IERC20 token) external onlyGovernor {\\n        if (depositableTokensSet.contains(address(token))) {\\n            revert ExchangeFundDepositableTokenAlreadyListed(token);\\n        }\\n\\n        uint8 decimals = token.decimals();\\n        if (decimals == 0) {\\n            revert ExchangeFundDepositableTokenZeroDecimals(token);\\n        }\\n        if (decimals > DECIMALS) {\\n            revert ExchangeFundDepositableTokenTooLargeDecimals(token, decimals);\\n        }\\n\\n        if (depositableTokensSet.add(address(token))) {\\n            token.approve(address(uniswapV2Router), type(uint256).max);\\n\\n            IUniswapV2Factory uniswapV2Factory = uniswapV2Router.factory();\\n            IUniswapV2Pair uniswapV2Pair = uniswapV2Factory.getPair(stablecoin, token);\\n            if (address(uniswapV2Pair) == address(0)) {\\n                uniswapV2Pair = uniswapV2Factory.createPair(stablecoin, token);\\n            }\\n            uniswapV2Pair.approve(address(uniswapV2Router), type(uint256).max);\\n\\n            depositableTokens[token] = true;\\n            emit DepositableTokenListed(token, uniswapV2Pair);\\n        }\\n    }\\n\\n    function unlistDepositableToken(IERC20 token) external onlyGovernor {\\n        if (!depositableTokensSet.contains(address(token))) {\\n            revert ExchangeFundDepositableTokenNotListed(token);\\n        }\\n\\n        if (depositableTokensSet.remove(address(token))) {\\n            token.approve(address(uniswapV2Router), 0);\\n\\n            IUniswapV2Factory uniswapV2Factory = uniswapV2Router.factory();\\n            IUniswapV2Pair uniswapV2Pair = uniswapV2Factory.getPair(stablecoin, token);\\n            if (address(uniswapV2Pair) != address(0)) {\\n                uniswapV2Pair.approve(address(uniswapV2Router), 0);\\n            }\\n\\n            delete depositableTokens[token];\\n            emit DepositableTokenUnlisted(token);\\n        }\\n    }\\n\\n    function setSlippageTolerance(uint256 newSlippageTolerance) external onlyGovernor {\\n        emit SlippageToleranceUpdated(slippageTolerance, newSlippageTolerance);\\n        slippageTolerance = newSlippageTolerance;\\n    }\\n\\n    function setSwapDeadline(uint256 newSwapDeadline) external onlyGovernor {\\n        emit SwapDeadlineUpdated(swapDeadline, newSwapDeadline);\\n        swapDeadline = newSwapDeadline;\\n    }\\n\\n    function salvage(IERC20 token) external onlyGovernor {\\n        address tokenAddress = address(token);\\n        if (token == stablecoin || depositableTokensSet.contains(tokenAddress)) {\\n            revert ExchangeFundTokenNotAllowedToBeSalvaged(token);\\n        }\\n        token.safeTransfer(operator, token.balanceOf(address(this)));\\n    }\\n\\n    function service(IERC20 token) external {\\n        (uint256 stablecoinReserve, uint256 tokenReserve) = getReserves(token);\\n        tokenReserve = token.normalizeAmount(tokenReserve);\\n\\n        uint256 targetPrice = priceOracle.getNormalizedPrice(token);\\n        uint256 price = stablecoinReserve.div(tokenReserve);\\n        int256 delta = int256(price.div(targetPrice)) - int256(ONE);\\n        if (Math.abs(delta) < core.servicingThreshold()) {\\n            revert ExchangeFundNoNeedToService(token);\\n        }\\n\\n        int256 amountOut;\\n        IERC20[] memory path = new IERC20[](2);\\n        if (price > targetPrice) {\\n            amountOut =\\n                int256(Math.fpsqrt(stablecoinReserve.mul(tokenReserve).mul(targetPrice))) -\\n                int256(stablecoinReserve);\\n            path[0] = token;\\n            path[1] = stablecoin;\\n        } else {\\n            amountOut = int256(Math.fpsqrt(stablecoinReserve.mulDiv(tokenReserve, targetPrice))) - int256(tokenReserve);\\n            path[0] = stablecoin;\\n            path[1] = token;\\n        }\\n\\n        // NOTE: using this instead of `swapExactTokensForTokens` to shift responsibility for calculating fees to  *swap\\n        // itself.\\n        uniswapV2Router.swapTokensForExactTokens(\\n            Math.abs(amountOut),\\n            type(uint256).max,\\n            path,\\n            address(this),\\n            block.timestamp + swapDeadline\\n        );\\n\\n        topUpLiquidity(token);\\n\\n        emit Service(msg.sender, token);\\n    }\\n\\n    function getDepositableTokens() external view returns (IERC20[] memory tokens) {\\n        uint256 length = depositableTokensSet.elements.length;\\n        tokens = new IERC20[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            tokens[i] = IERC20(depositableTokensSet.elements[i]);\\n        }\\n    }\\n\\n    function topUpLiquidity(IERC20 token) internal {\\n        (uint256 stablecoinReserve, uint256 tokenReserve) = getReserves(token);\\n        tokenReserve = token.normalizeAmount(tokenReserve);\\n\\n        if (core.minimumLiquidity() > stablecoinReserve) {\\n            uint256 amountADesired = core.minimumLiquidity() - stablecoinReserve;\\n            uint256 amountBDesired = token.denormalizeAmount(amountADesired.div(stablecoinReserve.div(tokenReserve)));\\n            uniswapV2Router.addLiquidity(\\n                stablecoin,\\n                token,\\n                amountADesired,\\n                amountBDesired,\\n                amountADesired.mul(ONE - slippageTolerance),\\n                token.denormalizeAmount(amountBDesired.mul(ONE - slippageTolerance)),\\n                address(this),\\n                block.timestamp + swapDeadline\\n            );\\n        }\\n    }\\n\\n    function quote(IERC20 token, uint256 amount) internal view returns (uint256 stablecoinAmount) {\\n        IUniswapV2Pair uniswapV2Pair = uniswapV2Router.factory().getPair(stablecoin, token);\\n\\n        (uint256 reserveA, uint256 reserveB, ) = uniswapV2Pair.getReserves();\\n        if (reserveA == 0 || reserveB == 0) {\\n            stablecoinAmount = token.normalizeAmount(amount).mul(priceOracle.getNormalizedPrice(token));\\n            return stablecoinAmount;\\n        }\\n\\n        stablecoinAmount = address(stablecoin) < address(token)\\n            ? uniswapV2Router.quote(amount, reserveB, reserveA)\\n            : uniswapV2Router.quote(amount, reserveA, reserveB);\\n    }\\n\\n    function getReserves(IERC20 token) internal view returns (uint256 stablecoinReserve, uint256 tokenReserve) {\\n        IUniswapV2Pair uniswapV2Pair = uniswapV2Router.factory().getPair(stablecoin, token);\\n\\n        (uint256 reserveA, uint256 reserveB, ) = uniswapV2Pair.getReserves();\\n        if (address(stablecoin) < address(token)) {\\n            stablecoinReserve = reserveA;\\n            tokenReserve = reserveB;\\n        } else {\\n            tokenReserve = reserveA;\\n            stablecoinReserve = reserveB;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42201223e59872d16ce37367fb8f9e96901395f7ff1c42096f7b2400d9befd76\",\"license\":\"BUSL-1.1\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nerror GovernedOnlyGovernorAllowedToCall();\\nerror GovernedOnlyPendingGovernorAllowedToCall();\\nerror GovernedGovernorZeroAddress();\\nerror GovernedCantGoverItself();\\n\\nabstract contract Governed {\\n    address public governor;\\n    address public pendingGovernor;\\n\\n    event PendingGovernanceTransition(address indexed governor, address indexed newGovernor);\\n    event GovernanceTransited(address indexed governor, address indexed newGovernor);\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor) {\\n            revert GovernedOnlyGovernorAllowedToCall();\\n        }\\n        _;\\n    }\\n\\n    function transitGovernance(address newGovernor, bool force) external onlyGovernor {\\n        if (newGovernor == address(0)) {\\n            revert GovernedGovernorZeroAddress();\\n        }\\n        if (newGovernor == address(this)) {\\n            revert GovernedCantGoverItself();\\n        }\\n\\n        pendingGovernor = newGovernor;\\n        if (!force) {\\n            emit PendingGovernanceTransition(governor, newGovernor);\\n        } else {\\n            setGovernor(newGovernor);\\n        }\\n    }\\n\\n    function acceptGovernance() external {\\n        if (msg.sender != pendingGovernor) {\\n            revert GovernedOnlyPendingGovernorAllowedToCall();\\n        }\\n\\n        governor = pendingGovernor;\\n        emit GovernanceTransited(governor, pendingGovernor);\\n    }\\n\\n    function setGovernor(address newGovernor) internal {\\n        governor = newGovernor;\\n        emit GovernanceTransited(governor, newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xe86e94a8fa51fb298c4152828f39bd32ceb0eed75717c70cc519528e7e448875\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IMintableAndBurnableERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x555b3bf9906cdd22fd702e227764b81c027180c0af11c48222ba6273441c63f3\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\nimport \\\"./../libraries/FixedPointMath.sol\\\";\\n\\n/// @notice Thrown when oracle doesn't provide price for `token` token.\\n/// @param token The address of the token contract.\\nerror PriceOracleTokenUnknown(IERC20 token);\\n/// @notice Thrown when oracle provide stale price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleStalePrice(IERC20 token, uint256 price);\\n/// @notice Thrown when oracle provide negative, zero or in other ways invalid price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleInvalidPrice(IERC20 token, int256 price);\\n\\ninterface IPriceOracle {\\n    /// @notice Gets normalized to 18 decimals price for the `token` token.\\n    /// @param token The address of the token contract.\\n    /// @return normalizedPrice Normalized price.\\n    function getNormalizedPrice(IERC20 token) external view returns (uint256 normalizedPrice);\\n}\\n\",\"keccak256\":\"0x2cfa58d491572f613703a352a2ca52ecea5299711852d190c3abed043d95028b\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IERC20 {\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(IERC20 tokenA, IERC20 tokenB) external returns (IUniswapV2Pair pair);\\n\\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Pair pair);\\n}\\n\\ninterface IUniswapV2Router {\\n    function addLiquidity(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, IERC20[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function factory() external view returns (IUniswapV2Factory);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n}\\n\",\"keccak256\":\"0x77266acbe544fe44353ed0a755bff53807e8ae0f124e8eb303c77c1ecb547b7d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nerror CallToNonContract(address target);\\n\\nlibrary Address {\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.call(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function delegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.delegatecall(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(account)\\n        }\\n\\n        return codeSize > 0;\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returnData,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returnData;\\n        } else {\\n            if (returnData.length > 0) {\\n                assembly {\\n                    let returnDataSize := mload(returnData)\\n                    revert(add(returnData, 32), returnDataSize)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0600a1e06b9ff00c4175ca0f55c0b85cbc9283a101cc0c2a0624c600c456c003\",\"license\":\"MIT\"},\"contracts/libraries/AmountNormalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\n\\nlibrary AmountNormalization {\\n    uint8 internal constant DECIMALS = 18;\\n\\n    function normalizeAmount(IERC20 self, uint256 denormalizedAmount) internal view returns (uint256 normalizedAmount) {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return denormalizedAmount * scale;\\n        }\\n        return denormalizedAmount;\\n    }\\n\\n    function denormalizeAmount(IERC20 self, uint256 normalizedAmount)\\n        internal\\n        view\\n        returns (uint256 denormalizedAmount)\\n    {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return normalizedAmount / scale;\\n        }\\n        return normalizedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x4db96164ff3f9388d3079863e78d773f0af7c9875d2987c22b2cb21cc815c0ff\",\"license\":\"MIT\"},\"contracts/libraries/EnumerableAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary EnumerableAddressSet {\\n    struct Set {\\n        address[] elements;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    function add(Set storage self, address element) internal returns (bool) {\\n        if (contains(self, element)) {\\n            return false;\\n        }\\n\\n        self.elements.push(element);\\n        self.indexes[element] = self.elements.length;\\n\\n        return true;\\n    }\\n\\n    function remove(Set storage self, address element) internal returns (bool) {\\n        uint256 elementIndex = indexOf(self, element);\\n        if (elementIndex == 0) {\\n            return false;\\n        }\\n\\n        uint256 indexToRemove = elementIndex - 1;\\n        uint256 lastIndex = count(self) - 1;\\n        if (indexToRemove != lastIndex) {\\n            address lastElement = self.elements[lastIndex];\\n            self.elements[indexToRemove] = lastElement;\\n            self.indexes[lastElement] = elementIndex;\\n        }\\n        self.elements.pop();\\n        delete self.indexes[element];\\n\\n        return true;\\n    }\\n\\n    function indexOf(Set storage self, address element) internal view returns (uint256) {\\n        return self.indexes[element];\\n    }\\n\\n    function contains(Set storage self, address element) internal view returns (bool) {\\n        return indexOf(self, element) != 0;\\n    }\\n\\n    function count(Set storage self) internal view returns (uint256) {\\n        return self.elements.length;\\n    }\\n}\\n\",\"keccak256\":\"0xa1fa015d00e86c38628437f420fc58879e4b87e28ee7266616a1e3e9485a9467\",\"license\":\"MIT\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nerror FixedPointMathMulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @title Fixed point math implementation\\nlibrary FixedPointMath {\\n    uint256 internal constant SCALE = 1e18;\\n    /// @dev Largest power of two divisor of scale.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n    /// @dev Scale inverted mod 2**256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert FixedPointMathMulDivOverflow(prod1, SCALE);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(a, b, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := add(div(prod0, SCALE), roundUpUnit)\\n            }\\n            return result;\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        result = mulDiv(a, SCALE, b);\\n    }\\n\\n    /// @notice Calculates \\u230aa \\u00d7 b \\u00f7 denominator\\u230b with full precision.\\n    /// @dev Credit to Remco Bloemen under MIT license https://2\\u03c0.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= denominator) {\\n            revert FixedPointMathMulDivOverflow(prod1, denominator);\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        unchecked {\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                denominator := div(denominator, lpotdod)\\n                prod0 := div(prod0, lpotdod)\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n            prod0 |= prod1 * lpotdod;\\n\\n            uint256 inverse = (3 * denominator) ^ 2;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n\\n            result = prod0 * inverse;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d0813682bbe12845de0111298ec16fb9ebf5ac404cce4bee155a455fa547eb4\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Math {\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a >= 0 ? uint256(a) : uint256(-a);\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        uint256 xAux = x;\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        uint256 repeat = 7;\\n        while (repeat > 0) {\\n            result = (result + x / result) >> 1;\\n            repeat--;\\n        }\\n        uint256 roundedDownResult = x / result;\\n\\n        return result >= roundedDownResult ? roundedDownResult : result;\\n    }\\n\\n    function fpsqrt(uint256 a) internal pure returns (uint256 result) {\\n        if (a == 0) result = 0;\\n        else result = sqrt(a) * 1e9;\\n    }\\n}\\n\",\"keccak256\":\"0x78c7fb7bc84e5e2818fc929e8b5a6e7909d3f89f8186cd49558c82c96103126c\",\"license\":\"MIT\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nerror ReentrancyGuardReentrantCall();\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private status;\\n\\n    modifier nonReentrant() {\\n        if (status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        status = ENTERED;\\n\\n        _;\\n\\n        status = NOT_ENTERED;\\n    }\\n\\n    constructor() {\\n        status = NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0c49a9dd65f669ba3be9e175ef8c81bd8e99567765015d22e6e0488f3ecf8d81\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\nerror SafeERC20NoReturnData();\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, amount));\\n    }\\n\\n    function callWithOptionalReturn(IERC20 token, bytes memory data) internal {\\n        address tokenAddress = address(token);\\n\\n        bytes memory returnData = tokenAddress.functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returnData.length > 0) {\\n            if (!abi.decode(returnData, (bool))) {\\n                revert SafeERC20NoReturnData();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa34dc3bade0644994ac478921c14186097231de0dd0426d7d349c26e79224741\",\"license\":\"MIT\"},\"contracts/libraries/Upgradability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./Address.sol\\\";\\n\\nerror EIP1967ImplementationIsNotContract(address implementation);\\nerror ContractAlreadyInitialized();\\nerror OnlyProxyCallAllowed();\\nerror OnlyCurrentImplementationAllowed();\\n\\nlibrary EIP1967 {\\n    using Address for address;\\n\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    event Upgraded(address indexed newImplementation);\\n\\n    function upgradeTo(address newImplementation) internal {\\n        if (!newImplementation.isContract()) {\\n            revert EIP1967ImplementationIsNotContract(newImplementation);\\n        }\\n\\n        assembly {\\n            sstore(IMPLEMENTATION_SLOT, newImplementation)\\n        }\\n\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    function getImplementation() internal view returns (address implementation) {\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_SLOT)\\n        }\\n    }\\n}\\n\\ncontract Proxy {\\n    using Address for address;\\n\\n    constructor(address implementation, bytes memory data) {\\n        EIP1967.upgradeTo(implementation);\\n        implementation.delegateCall(data, \\\"Proxy: construction failed\\\");\\n    }\\n\\n    receive() external payable {\\n        delegateCall();\\n    }\\n\\n    fallback() external payable {\\n        delegateCall();\\n    }\\n\\n    function delegateCall() internal {\\n        address implementation = EIP1967.getImplementation();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Upgradeable {\\n    address private immutable self = address(this);\\n\\n    modifier onlyProxy() {\\n        if (address(this) == self) {\\n            revert OnlyProxyCallAllowed();\\n        }\\n        if (EIP1967.getImplementation() != self) {\\n            revert OnlyCurrentImplementationAllowed();\\n        }\\n        _;\\n    }\\n\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        EIP1967.upgradeTo(newImplementation);\\n    }\\n}\\n\\nabstract contract Initializable {\\n    bool private initializing;\\n    bool private initialized;\\n\\n    modifier initializer() {\\n        if (!initializing && initialized) {\\n            revert ContractAlreadyInitialized();\\n        }\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60f5d719243332028141aec4adf396d615df4fc5113fe4e80f21af3af9174d58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160025561396e806100256000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806393ad9f17116100f9578063d03153aa11610097578063e7f3028c11610071578063e7f3028c146103f7578063e9cbd8221461040a578063f2f4eb261461041d578063f3fef3a31461043057600080fd5b8063d03153aa146103c8578063ddc12526146103d1578063e3056a34146103e457600080fd5b8063b9b8c246116100d3578063b9b8c2461461035c578063bb5043171461036f578063c14edd7914610382578063cc2a9a5b146103b557600080fd5b806393ad9f1714610315578063942dbff414610328578063b22172811461033157600080fd5b80634bd84701116101665780637e83f7d7116101405780637e83f7d7146102a357806385881e2a146102b6578063863a03e0146102c95780638f601f66146102dc57600080fd5b80634bd8470114610268578063570ca7351461027b5780635e6fdf431461028e57600080fd5b8063238efcbc116101a2578063238efcbc146102275780632630c12f1461022f57806347e7ef241461024257806348be77191461025557600080fd5b80630c340a24146101c9578063117da1ee146101ff5780631694505e14610214575b600080fd5b6000546101e2906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021261020d3660046131f8565b610443565b005b6007546101e2906001600160a01b031681565b6102126104b5565b6006546101e2906001600160a01b031681565b610212610250366004613226565b61054a565b610212610263366004613252565b61065c565b610212610276366004613252565b610944565b6008546101e2906001600160a01b031681565b610296610d13565b6040516101f691906132b3565b6102126102b13660046132d4565b610ddc565b6102126102c4366004613252565b611345565b6102126102d7366004613252565b6117b7565b6103076102ea366004613327565b600b60209081526000928352604080842090915290825290205481565b6040519081526020016101f6565b6102126103233660046131f8565b6118c9565b610307600a5481565b61030761033f366004613327565b600c60209081526000928352604080842090915290825290205481565b61021261036a366004613226565b61193b565b61021261037d366004613226565b611bdb565b6103a5610390366004613252565b600d6020526000908152604090205460ff1681565b60405190151581526020016101f6565b6102126103c3366004613360565b611df2565b61030760095481565b6102126103df3660046133e2565b611f5d565b6001546101e2906001600160a01b031681565b6003546101e2906001600160a01b031681565b6005546101e2906001600160a01b031681565b6004546101e2906001600160a01b031681565b61021261043e366004613226565b61204b565b6000546201000090046001600160a01b03163314610474576040516305e7700560e51b815260040160405180910390fd5b60095460408051918252602082018390527fddd31550b26e9ef8ade466958be83ff8a014d9b4f36d546b61a6847a45306575910160405180910390a1600955565b6001546001600160a01b031633146104e05760405163aec80d4b60e01b815260040160405180910390fd5b60015460008054620100006001600160a01b0393841681810275ffffffffffffffffffffffffffffffffffffffff00001990931692909217808455604051929491900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e91a3565b60028054141561056d57604051633ee5aeb560e01b815260040160405180910390fd5b600280558161057d600e82612192565b6105aa5760405163497e1e0360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6105bf6001600160a01b0384163330856121b6565b60006105d46001600160a01b0385168461223c565b336000908152600b602090815260408083206001600160a01b038916845290915281208054929350839290919061060c908490613426565b90915550506040518181526001600160a01b0385169033907f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f629060200160405180910390a3505060016002555050565b6000546201000090046001600160a01b0316331461068d576040516305e7700560e51b815260040160405180910390fd5b610698600e82612192565b6106c05760405163635c3e1f60e11b81526001600160a01b03821660048201526024016105a1565b6106cb600e826122ea565b156109415760075460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529082169063095ea7b390604401602060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610756919061343e565b506007546040805163c45a015560e01b815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d4919061345b565b60055460405163e6a4390560e01b81526001600160a01b03918216600482015284821660248201529192506000919083169063e6a439059060440160206040518083038186803b15801561082757600080fd5b505afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f919061345b565b90506001600160a01b038116156108f85760075460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529082169063095ea7b390604401602060405180830381600087803b1580156108be57600080fd5b505af11580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f6919061343e565b505b6001600160a01b0383166000818152600d6020526040808220805460ff19169055517fbd6c0ac05a911841e71daa23bb8022779f3957fad4fa3546eb22a1782c747c839190a250505b50565b60008061095083612423565b90925090506109686001600160a01b0384168261223c565b600654604051630787c49960e21b81526001600160a01b03868116600483015292935060009290911690631e1f12649060240160206040518083038186803b1580156109b357600080fd5b505afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190613478565b905060006109f984846125f1565b90506000670de0b6b3a7640000610a1083856125f1565b610a1a9190613491565b9050600460009054906101000a90046001600160a01b03166001600160a01b031663453844b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6a57600080fd5b505afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa29190613478565b610aab8261260d565b1015610ad5576040516358cbbf3f60e11b81526001600160a01b03871660048201526024016105a1565b6040805160028082526060820183526000928392919060208301908036833701905050905084841115610b955786610b1f610b1a87610b14848b612629565b90612629565b6126f9565b610b299190613491565b91508781600081518110610b3f57610b3f6134ff565b6001600160a01b039283166020918202929092010152600554825191169082906001908110610b7057610b706134ff565b60200260200101906001600160a01b031690816001600160a01b031681525050610c26565b85610ba4610b1a898389612724565b610bae9190613491565b60055482519193506001600160a01b0316908290600090610bd157610bd16134ff565b60200260200101906001600160a01b031690816001600160a01b0316815250508781600181518110610c0557610c056134ff565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6007546001600160a01b0316638803dbee610c408461260d565b6000198430600a5442610c539190613426565b6040518663ffffffff1660e01b8152600401610c73959493929190613515565b600060405180830381600087803b158015610c8d57600080fd5b505af1158015610ca1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cc99190810190613551565b50610cd3886127df565b6040516001600160a01b0389169033907f6d9de21666ebb28b54314f1615b914f9807eaa05e80a86c76d97ec1c376d7e0390600090a35050505050505050565b600e546060908067ffffffffffffffff811115610d3257610d326134e9565b604051908082528060200260200182016040528015610d5b578160200160208202803683370190505b50915060005b81811015610dd757600e805482908110610d7d57610d7d6134ff565b9060005260206000200160009054906101000a90046001600160a01b0316838281518110610dad57610dad6134ff565b6001600160a01b039092166020928302919091019091015280610dcf8161360f565b915050610d61565b505090565b600280541415610dff57604051633ee5aeb560e01b815260040160405180910390fd5b6002805560055484906001600160a01b03808316911614801590610e2b5750610e29600e82612192565b155b15610e545760405163569695af60e01b81526001600160a01b03821660048201526024016105a1565b60055484906001600160a01b03808316911614801590610e7c5750610e7a600e82612192565b155b15610ea55760405163569695af60e01b81526001600160a01b03821660048201526024016105a1565b6000610eba6001600160a01b0388168661223c565b336000908152600b602090815260408083206001600160a01b038c168452909152902054909150811115610f015760405163c0993c3760e01b815260040160405180910390fd5b856001600160a01b0316876001600160a01b03161415610f3f57604051630e9f73ab60e21b81526001600160a01b03881660048201526024016105a1565b600084610f4d576002610f50565b60035b60ff1667ffffffffffffffff811115610f6b57610f6b6134e9565b604051908082528060200260200182016040528015610f94578160200160208202803683370190505b5090508781600081518110610fab57610fab6134ff565b60200260200101906001600160a01b031690816001600160a01b03168152505084610fd65786610fe3565b6003546001600160a01b03165b81600181518110610ff657610ff66134ff565b60200260200101906001600160a01b031690816001600160a01b0316815250508415611051578681600281518110611030576110306134ff565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60075460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90611084908a90869060040161362a565b60006040518083038186803b15801561109c57600080fd5b505afa1580156110b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110d89190810190613551565b9050600061111e82600184516110ee919061364b565b815181106110fe576110fe6134ff565b60200260200101518a6001600160a01b031661223c90919063ffffffff16565b6007546009549192506001600160a01b0316906338ed1739908a9061116a9061115a9061115390670de0b6b3a764000061364b565b8690612629565b6001600160a01b038e1690612a6d565b8630600a544261117a9190613426565b6040518663ffffffff1660e01b815260040161119a959493929190613515565b600060405180830381600087803b1580156111b457600080fd5b505af11580156111c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111f09190810190613551565b9150600061122a8360008151811061120a5761120a6134ff565b60200260200101518c6001600160a01b031661223c90919063ffffffff16565b905060006112508460018651611240919061364b565b8151811061120a5761120a6134ff565b905081600b6000336001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546112aa919061364b565b9091555050336000908152600b602090815260408083206001600160a01b038f168452909152812080548392906112e2908490613426565b909155505060408051838152602081018390526001600160a01b03808e1692908f169133917fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062910160405180910390a45050600160025550505050505050505050565b6000546201000090046001600160a01b03163314611376576040516305e7700560e51b815260040160405180910390fd5b611381600e82612192565b156113aa576040516382cce5f360e01b81526001600160a01b03821660048201526024016105a1565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e557600080fd5b505afa1580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d9190613662565b905060ff811661144b576040516316d13e4960e21b81526001600160a01b03831660048201526024016105a1565b601260ff82161115611484576040516321b3807960e11b81526001600160a01b038316600482015260ff821660248201526044016105a1565b61148f600e83612b0b565b156117b35760075460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529083169063095ea7b390604401602060405180830381600087803b1580156114e357600080fd5b505af11580156114f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151b919061343e565b506007546040805163c45a015560e01b815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b15801561156157600080fd5b505afa158015611575573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611599919061345b565b60055460405163e6a4390560e01b81526001600160a01b03918216600482015285821660248201529192506000919083169063e6a439059060440160206040518083038186803b1580156115ec57600080fd5b505afa158015611600573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611624919061345b565b90506001600160a01b0381166116be576005546040516364e329cb60e11b81526001600160a01b03918216600482015285821660248201529083169063c9c6539690604401602060405180830381600087803b15801561168357600080fd5b505af1158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb919061345b565b90505b60075460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b390604401602060405180830381600087803b15801561170d57600080fd5b505af1158015611721573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611745919061343e565b506001600160a01b0384166000818152600d602052604090819020805460ff19166001179055517f55011b433ad455f23aa134ee4f1fcd2190a063cb514134436b32358ead356ada906117a89084906001600160a01b0391909116815260200190565b60405180910390a250505b5050565b6000546201000090046001600160a01b031633146117e8576040516305e7700560e51b815260040160405180910390fd5b60055481906001600160a01b038083169116148061180c575061180c600e82612192565b1561183557604051631af19dff60e01b81526001600160a01b03831660048201526024016105a1565b6008546040516370a0823160e01b81523060048201526117b3916001600160a01b0390811691908516906370a082319060240160206040518083038186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190613478565b6001600160a01b0385169190612b6c565b6000546201000090046001600160a01b031633146118fa576040516305e7700560e51b815260040160405180910390fd5b600a5460408051918252602082018390527f801306575ef2eb7d5ec12da38bf892a7872d76caf0beb1cec0779abeb71ff3a9910160405180910390a1600a55565b60028054141561195e57604051633ee5aeb560e01b815260040160405180910390fd5b6002805560006119776001600160a01b0384168361223c565b336000908152600b602090815260408083206001600160a01b03881684529091529020549091508111156119be5760405163c0993c3760e01b815260040160405180910390fd5b60006119ca8484612b9c565b60075460055460095492935060009283926001600160a01b039081169263e8e3370092911690899087908a90611a1390611a0c90670de0b6b3a764000061364b565b8a90612629565b611a46611a36600954670de0b6b3a7640000611a2f919061364b565b8d90612629565b6001600160a01b038f1690612a6d565b30600a5442611a559190613426565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b158015611acc57600080fd5b505af1158015611ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b049190613685565b9093509150611b1e90506001600160a01b0387168361223c565b336000908152600b602090815260408083206001600160a01b038b16845290915281208054909190611b5190849061364b565b9091555050336000908152600c602090815260408083206001600160a01b038a16845290915281208054839290611b89908490613426565b90915550506040518481526001600160a01b0387169033907f0657e0c8fff72ae811b8683a3411c30ebb5098754ec5e814687711e97cbd6db29060200160405180910390a35050600160025550505050565b600280541415611bfe57604051633ee5aeb560e01b815260040160405180910390fd5b60028055336000908152600c602090815260408083206001600160a01b0386168452909152902054811115611c465760405163dc93df4560e01b815260040160405180910390fd5b600754600554600a546000926001600160a01b039081169263baa2abde9291169086908690869081903090611c7b9042613426565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e4016040805180830381600087803b158015611ce857600080fd5b505af1158015611cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2091906136b3565b9150611d3790506001600160a01b0384168261223c565b336000908152600b602090815260408083206001600160a01b038816845290915281208054909190611d6a908490613426565b9091555050336000908152600c602090815260408083206001600160a01b038716845290915281208054849290611da290849061364b565b90915550506040518281526001600160a01b0384169033907f8c6e1d3aa13e82e61da9350057ab35ded0bd548b8905b82dfa012876992b8ef5906020015b60405180910390a35050600160025550565b60005460ff16158015611e0c5750600054610100900460ff165b15611e2a57604051631ee1e30360e21b815260040160405180910390fd5b60005460ff16158015611e47576000805461ffff19166101011790555b611e5033612f2a565b600380546001600160a01b03199081166001600160a01b038a81169190911790925560048054821689841617815560058054831689851690811790915560068054841689861617905560078054841688861690811790915560088054909416948716949094179092556611c37937e080006009556104b0600a5560405163095ea7b360e01b81529081019290925260001960248301529063095ea7b390604401602060405180830381600087803b158015611f0a57600080fd5b505af1158015611f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f42919061343e565b508015611f54576000805460ff191690555b50505050505050565b6000546201000090046001600160a01b03163314611f8e576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b038216611fb55760405163604b48b960e11b815260040160405180910390fd5b6001600160a01b038216301415611fdf576040516306b3e95d60e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0384161790558061204257600080546040516001600160a01b03808616936201000090930416917fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb191a35050565b6117b382612f2a565b60028054141561206e57604051633ee5aeb560e01b815260040160405180910390fd5b600280556005546001600160a01b03838116911614156120ac5760405163f099c8a560e01b81526001600160a01b03831660048201526024016105a1565b60006120c16001600160a01b0384168361223c565b336000908152600b602090815260408083206001600160a01b03881684529091529020549091508111156121085760405163c0993c3760e01b815260040160405180910390fd5b336000908152600b602090815260408083206001600160a01b03871684529091528120805483929061213b90849061364b565b9091555061215590506001600160a01b0384163384612b6c565b6040518181526001600160a01b0384169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639890602001611de0565b6001600160a01b038116600090815260018301602052604090205415155b92915050565b6040516001600160a01b03808516602483015283166044820152606481018290526122369085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612f91565b50505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561227857600080fd5b505afa15801561228c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b09190613662565b6122bb9060126136d7565b6122c690600a6137de565b9050806001146122e2576122da81846137ed565b9150506121b0565b509092915050565b6001600160a01b0381166000908152600183016020526040812054806123145760009150506121b0565b600061232160018361364b565b90506000600161232f875490565b612339919061364b565b90508082146123c5576000866000018281548110612359576123596134ff565b60009182526020909120015487546001600160a01b0390911691508190889085908110612388576123886134ff565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018801909152604090208390555b85548690806123d6576123d661380c565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260018881019091526040822091909155935050505092915050565b6000806000600760009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561247657600080fd5b505afa15801561248a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ae919061345b565b60055460405163e6a4390560e01b81526001600160a01b039182166004820152868216602482015291169063e6a439059060440160206040518083038186803b1580156124fa57600080fd5b505afa15801561250e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612532919061345b565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561257057600080fd5b505afa158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a89190613840565b506005546dffffffffffffffffffffffffffff9283169450911691506001600160a01b03808816911610156125e2578194508093506125e9565b8193508094505b505050915091565b600061260683670de0b6b3a764000084612724565b9392505050565b6000808212156126255761262082613890565b6121b0565b5090565b60008080600019848609848602925082811083820303915050670de0b6b3a7640000811061267b5760405163072fa3c960e31b815260048101829052670de0b6b3a764000060248201526044016105a1565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826126b55780670de0b6b3a76400008504019450505050506121b0565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b60008161270857506000919050565b6127118261301b565b6121b090633b9aca006137ed565b919050565b600080806000198587098587029250828110838203039150508381106127675760405163072fa3c960e31b815260048101829052602481018590526044016105a1565b8061277757508290049050612606565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000806127eb83612423565b90925090506128036001600160a01b0384168261223c565b905081600460009054906101000a90046001600160a01b03166001600160a01b031663b56cf0116040518163ffffffff1660e01b815260040160206040518083038186803b15801561285457600080fd5b505afa158015612868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288c9190613478565b1115612a6857600480546040805163b56cf01160e01b8152905160009386936001600160a01b03169263b56cf0119281830192602092829003018186803b1580156128d657600080fd5b505afa1580156128ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290e9190613478565b612918919061364b565b9050600061294361293361292c86866125f1565b84906125f1565b6001600160a01b03871690612a6d565b6007546005546009549293506001600160a01b039182169263e8e3370092909116908890869086906129889061298190670de0b6b3a764000061364b565b8990612629565b6129a461115a600954670de0b6b3a7640000611a0c919061364b565b30600a54426129b39190613426565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b158015612a2a57600080fd5b505af1158015612a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a629190613685565b50505050505b505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612aa957600080fd5b505afa158015612abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae19190613662565b612aec9060126136d7565b612af790600a6137de565b9050806001146122e2576122da81846138ad565b6000612b178383612192565b15612b24575060006121b0565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6040516001600160a01b038316602482015260448101829052612a6890849063a9059cbb60e01b906064016121ea565b600080600760009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015612bed57600080fd5b505afa158015612c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c25919061345b565b60055460405163e6a4390560e01b81526001600160a01b039182166004820152868216602482015291169063e6a439059060440160206040518083038186803b158015612c7157600080fd5b505afa158015612c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca9919061345b565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612ce757600080fd5b505afa158015612cfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1f9190613840565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508160001480612d51575080155b15612df257600654604051630787c49960e21b81526001600160a01b038881166004830152612de8921690631e1f12649060240160206040518083038186803b158015612d9d57600080fd5b505afa158015612db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd59190613478565b610b146001600160a01b0389168861223c565b93505050506121b0565b6005546001600160a01b03808816911610612e9657600754604051632b58577b60e21b81526004810187905260248101849052604481018390526001600160a01b039091169063ad615dec9060640160206040518083038186803b158015612e5957600080fd5b505afa158015612e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e919190613478565b612f20565b600754604051632b58577b60e21b81526004810187905260248101839052604481018490526001600160a01b039091169063ad615dec9060640160206040518083038186803b158015612ee857600080fd5b505afa158015612efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f209190613478565b9695505050505050565b6000805475ffffffffffffffffffffffffffffffffffffffff00001916620100006001600160a01b0384811682810293909317808555604051939492900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e9190a350565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201528290600090612fe0906001600160a01b03841690859061312b565b8051909150156122365780806020019051810190612ffe919061343e565b61223657604051639b8d506160e01b815260040160405180910390fd5b60008161302a57506000919050565b5060018170010000000000000000000000000000000081106130515760409190911b9060801c5b68010000000000000000811061306c5760209190911b9060401c5b64010000000081106130835760109190911b9060201c5b6201000081106130985760089190911b9060101c5b61010081106130ac5760049190911b9060081c5b601081106130bf5760029190911b9060041c5b600881106130cf57600182901b91505b60075b80156131045760016130e484866138ad565b6130ee9085613426565b901c9250806130fc816138cf565b9150506130d2565b600061311084866138ad565b9050808410156131205783613122565b805b95945050505050565b6060833b6131575760405163dc5dd7fd60e01b81526001600160a01b03851660048201526024016105a1565b600080856001600160a01b0316856040516131729190613912565b6000604051808303816000865af19150503d80600081146131af576040519150601f19603f3d011682016040523d82523d6000602084013e6131b4565b606091505b5091509150612f20828286606083156131ce575081612606565b8251156131de5782518060208501fd5b8160405162461bcd60e51b81526004016105a1919061392e565b60006020828403121561320a57600080fd5b5035919050565b6001600160a01b038116811461094157600080fd5b6000806040838503121561323957600080fd5b823561324481613211565b946020939093013593505050565b60006020828403121561326457600080fd5b813561260681613211565b600081518084526020808501945080840160005b838110156132a85781516001600160a01b031687529582019590820190600101613283565b509495945050505050565b602081526000612606602083018461326f565b801515811461094157600080fd5b600080600080608085870312156132ea57600080fd5b84356132f581613211565b9350602085013561330581613211565b925060408501359150606085013561331c816132c6565b939692955090935050565b6000806040838503121561333a57600080fd5b823561334581613211565b9150602083013561335581613211565b809150509250929050565b60008060008060008060c0878903121561337957600080fd5b863561338481613211565b9550602087013561339481613211565b945060408701356133a481613211565b935060608701356133b481613211565b925060808701356133c481613211565b915060a08701356133d481613211565b809150509295509295509295565b600080604083850312156133f557600080fd5b823561340081613211565b91506020830135613355816132c6565b634e487b7160e01b600052601160045260246000fd5b6000821982111561343957613439613410565b500190565b60006020828403121561345057600080fd5b8151612606816132c6565b60006020828403121561346d57600080fd5b815161260681613211565b60006020828403121561348a57600080fd5b5051919050565b60008083128015600160ff1b8501841216156134af576134af613410565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156134e3576134e3613410565b50500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b85815284602082015260a06040820152600061353460a083018661326f565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561356457600080fd5b825167ffffffffffffffff8082111561357c57600080fd5b818501915085601f83011261359057600080fd5b8151818111156135a2576135a26134e9565b8060051b604051601f19603f830116810181811085821117156135c7576135c76134e9565b6040529182528482019250838101850191888311156135e557600080fd5b938501935b82851015613603578451845293850193928501926135ea565b98975050505050505050565b600060001982141561362357613623613410565b5060010190565b828152604060208201526000613643604083018461326f565b949350505050565b60008282101561365d5761365d613410565b500390565b60006020828403121561367457600080fd5b815160ff8116811461260657600080fd5b60008060006060848603121561369a57600080fd5b8351925060208401519150604084015190509250925092565b600080604083850312156136c657600080fd5b505080516020909101519092909150565b600060ff821660ff8416808210156136f1576136f1613410565b90039392505050565b600181815b8085111561373557816000190482111561371b5761371b613410565b8085161561372857918102915b93841c93908002906136ff565b509250929050565b60008261374c575060016121b0565b81613759575060006121b0565b816001811461376f576002811461377957613795565b60019150506121b0565b60ff84111561378a5761378a613410565b50506001821b6121b0565b5060208310610133831016604e8410600b84101617156137b8575081810a6121b0565b6137c283836136fa565b80600019048211156137d6576137d6613410565b029392505050565b600061260660ff84168361373d565b600081600019048311821515161561380757613807613410565b500290565b634e487b7160e01b600052603160045260246000fd5b80516dffffffffffffffffffffffffffff8116811461271f57600080fd5b60008060006060848603121561385557600080fd5b61385e84613822565b925061386c60208501613822565b9150604084015163ffffffff8116811461388557600080fd5b809150509250925092565b6000600160ff1b8214156138a6576138a6613410565b5060000390565b6000826138ca57634e487b7160e01b600052601260045260246000fd5b500490565b6000816138de576138de613410565b506000190190565b60005b838110156139015781810151838201526020016138e9565b838111156122365750506000910152565b600082516139248184602087016138e6565b9190910192915050565b602081526000825180602084015261394d8160408501602087016138e6565b601f01601f1916919091016040019291505056fea164736f6c6343000809000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806393ad9f17116100f9578063d03153aa11610097578063e7f3028c11610071578063e7f3028c146103f7578063e9cbd8221461040a578063f2f4eb261461041d578063f3fef3a31461043057600080fd5b8063d03153aa146103c8578063ddc12526146103d1578063e3056a34146103e457600080fd5b8063b9b8c246116100d3578063b9b8c2461461035c578063bb5043171461036f578063c14edd7914610382578063cc2a9a5b146103b557600080fd5b806393ad9f1714610315578063942dbff414610328578063b22172811461033157600080fd5b80634bd84701116101665780637e83f7d7116101405780637e83f7d7146102a357806385881e2a146102b6578063863a03e0146102c95780638f601f66146102dc57600080fd5b80634bd8470114610268578063570ca7351461027b5780635e6fdf431461028e57600080fd5b8063238efcbc116101a2578063238efcbc146102275780632630c12f1461022f57806347e7ef241461024257806348be77191461025557600080fd5b80630c340a24146101c9578063117da1ee146101ff5780631694505e14610214575b600080fd5b6000546101e2906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021261020d3660046131f8565b610443565b005b6007546101e2906001600160a01b031681565b6102126104b5565b6006546101e2906001600160a01b031681565b610212610250366004613226565b61054a565b610212610263366004613252565b61065c565b610212610276366004613252565b610944565b6008546101e2906001600160a01b031681565b610296610d13565b6040516101f691906132b3565b6102126102b13660046132d4565b610ddc565b6102126102c4366004613252565b611345565b6102126102d7366004613252565b6117b7565b6103076102ea366004613327565b600b60209081526000928352604080842090915290825290205481565b6040519081526020016101f6565b6102126103233660046131f8565b6118c9565b610307600a5481565b61030761033f366004613327565b600c60209081526000928352604080842090915290825290205481565b61021261036a366004613226565b61193b565b61021261037d366004613226565b611bdb565b6103a5610390366004613252565b600d6020526000908152604090205460ff1681565b60405190151581526020016101f6565b6102126103c3366004613360565b611df2565b61030760095481565b6102126103df3660046133e2565b611f5d565b6001546101e2906001600160a01b031681565b6003546101e2906001600160a01b031681565b6005546101e2906001600160a01b031681565b6004546101e2906001600160a01b031681565b61021261043e366004613226565b61204b565b6000546201000090046001600160a01b03163314610474576040516305e7700560e51b815260040160405180910390fd5b60095460408051918252602082018390527fddd31550b26e9ef8ade466958be83ff8a014d9b4f36d546b61a6847a45306575910160405180910390a1600955565b6001546001600160a01b031633146104e05760405163aec80d4b60e01b815260040160405180910390fd5b60015460008054620100006001600160a01b0393841681810275ffffffffffffffffffffffffffffffffffffffff00001990931692909217808455604051929491900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e91a3565b60028054141561056d57604051633ee5aeb560e01b815260040160405180910390fd5b600280558161057d600e82612192565b6105aa5760405163497e1e0360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6105bf6001600160a01b0384163330856121b6565b60006105d46001600160a01b0385168461223c565b336000908152600b602090815260408083206001600160a01b038916845290915281208054929350839290919061060c908490613426565b90915550506040518181526001600160a01b0385169033907f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f629060200160405180910390a3505060016002555050565b6000546201000090046001600160a01b0316331461068d576040516305e7700560e51b815260040160405180910390fd5b610698600e82612192565b6106c05760405163635c3e1f60e11b81526001600160a01b03821660048201526024016105a1565b6106cb600e826122ea565b156109415760075460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529082169063095ea7b390604401602060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610756919061343e565b506007546040805163c45a015560e01b815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d4919061345b565b60055460405163e6a4390560e01b81526001600160a01b03918216600482015284821660248201529192506000919083169063e6a439059060440160206040518083038186803b15801561082757600080fd5b505afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f919061345b565b90506001600160a01b038116156108f85760075460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529082169063095ea7b390604401602060405180830381600087803b1580156108be57600080fd5b505af11580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f6919061343e565b505b6001600160a01b0383166000818152600d6020526040808220805460ff19169055517fbd6c0ac05a911841e71daa23bb8022779f3957fad4fa3546eb22a1782c747c839190a250505b50565b60008061095083612423565b90925090506109686001600160a01b0384168261223c565b600654604051630787c49960e21b81526001600160a01b03868116600483015292935060009290911690631e1f12649060240160206040518083038186803b1580156109b357600080fd5b505afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190613478565b905060006109f984846125f1565b90506000670de0b6b3a7640000610a1083856125f1565b610a1a9190613491565b9050600460009054906101000a90046001600160a01b03166001600160a01b031663453844b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6a57600080fd5b505afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa29190613478565b610aab8261260d565b1015610ad5576040516358cbbf3f60e11b81526001600160a01b03871660048201526024016105a1565b6040805160028082526060820183526000928392919060208301908036833701905050905084841115610b955786610b1f610b1a87610b14848b612629565b90612629565b6126f9565b610b299190613491565b91508781600081518110610b3f57610b3f6134ff565b6001600160a01b039283166020918202929092010152600554825191169082906001908110610b7057610b706134ff565b60200260200101906001600160a01b031690816001600160a01b031681525050610c26565b85610ba4610b1a898389612724565b610bae9190613491565b60055482519193506001600160a01b0316908290600090610bd157610bd16134ff565b60200260200101906001600160a01b031690816001600160a01b0316815250508781600181518110610c0557610c056134ff565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6007546001600160a01b0316638803dbee610c408461260d565b6000198430600a5442610c539190613426565b6040518663ffffffff1660e01b8152600401610c73959493929190613515565b600060405180830381600087803b158015610c8d57600080fd5b505af1158015610ca1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cc99190810190613551565b50610cd3886127df565b6040516001600160a01b0389169033907f6d9de21666ebb28b54314f1615b914f9807eaa05e80a86c76d97ec1c376d7e0390600090a35050505050505050565b600e546060908067ffffffffffffffff811115610d3257610d326134e9565b604051908082528060200260200182016040528015610d5b578160200160208202803683370190505b50915060005b81811015610dd757600e805482908110610d7d57610d7d6134ff565b9060005260206000200160009054906101000a90046001600160a01b0316838281518110610dad57610dad6134ff565b6001600160a01b039092166020928302919091019091015280610dcf8161360f565b915050610d61565b505090565b600280541415610dff57604051633ee5aeb560e01b815260040160405180910390fd5b6002805560055484906001600160a01b03808316911614801590610e2b5750610e29600e82612192565b155b15610e545760405163569695af60e01b81526001600160a01b03821660048201526024016105a1565b60055484906001600160a01b03808316911614801590610e7c5750610e7a600e82612192565b155b15610ea55760405163569695af60e01b81526001600160a01b03821660048201526024016105a1565b6000610eba6001600160a01b0388168661223c565b336000908152600b602090815260408083206001600160a01b038c168452909152902054909150811115610f015760405163c0993c3760e01b815260040160405180910390fd5b856001600160a01b0316876001600160a01b03161415610f3f57604051630e9f73ab60e21b81526001600160a01b03881660048201526024016105a1565b600084610f4d576002610f50565b60035b60ff1667ffffffffffffffff811115610f6b57610f6b6134e9565b604051908082528060200260200182016040528015610f94578160200160208202803683370190505b5090508781600081518110610fab57610fab6134ff565b60200260200101906001600160a01b031690816001600160a01b03168152505084610fd65786610fe3565b6003546001600160a01b03165b81600181518110610ff657610ff66134ff565b60200260200101906001600160a01b031690816001600160a01b0316815250508415611051578681600281518110611030576110306134ff565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60075460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90611084908a90869060040161362a565b60006040518083038186803b15801561109c57600080fd5b505afa1580156110b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110d89190810190613551565b9050600061111e82600184516110ee919061364b565b815181106110fe576110fe6134ff565b60200260200101518a6001600160a01b031661223c90919063ffffffff16565b6007546009549192506001600160a01b0316906338ed1739908a9061116a9061115a9061115390670de0b6b3a764000061364b565b8690612629565b6001600160a01b038e1690612a6d565b8630600a544261117a9190613426565b6040518663ffffffff1660e01b815260040161119a959493929190613515565b600060405180830381600087803b1580156111b457600080fd5b505af11580156111c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111f09190810190613551565b9150600061122a8360008151811061120a5761120a6134ff565b60200260200101518c6001600160a01b031661223c90919063ffffffff16565b905060006112508460018651611240919061364b565b8151811061120a5761120a6134ff565b905081600b6000336001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546112aa919061364b565b9091555050336000908152600b602090815260408083206001600160a01b038f168452909152812080548392906112e2908490613426565b909155505060408051838152602081018390526001600160a01b03808e1692908f169133917fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062910160405180910390a45050600160025550505050505050505050565b6000546201000090046001600160a01b03163314611376576040516305e7700560e51b815260040160405180910390fd5b611381600e82612192565b156113aa576040516382cce5f360e01b81526001600160a01b03821660048201526024016105a1565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e557600080fd5b505afa1580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d9190613662565b905060ff811661144b576040516316d13e4960e21b81526001600160a01b03831660048201526024016105a1565b601260ff82161115611484576040516321b3807960e11b81526001600160a01b038316600482015260ff821660248201526044016105a1565b61148f600e83612b0b565b156117b35760075460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529083169063095ea7b390604401602060405180830381600087803b1580156114e357600080fd5b505af11580156114f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151b919061343e565b506007546040805163c45a015560e01b815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b15801561156157600080fd5b505afa158015611575573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611599919061345b565b60055460405163e6a4390560e01b81526001600160a01b03918216600482015285821660248201529192506000919083169063e6a439059060440160206040518083038186803b1580156115ec57600080fd5b505afa158015611600573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611624919061345b565b90506001600160a01b0381166116be576005546040516364e329cb60e11b81526001600160a01b03918216600482015285821660248201529083169063c9c6539690604401602060405180830381600087803b15801561168357600080fd5b505af1158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb919061345b565b90505b60075460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b390604401602060405180830381600087803b15801561170d57600080fd5b505af1158015611721573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611745919061343e565b506001600160a01b0384166000818152600d602052604090819020805460ff19166001179055517f55011b433ad455f23aa134ee4f1fcd2190a063cb514134436b32358ead356ada906117a89084906001600160a01b0391909116815260200190565b60405180910390a250505b5050565b6000546201000090046001600160a01b031633146117e8576040516305e7700560e51b815260040160405180910390fd5b60055481906001600160a01b038083169116148061180c575061180c600e82612192565b1561183557604051631af19dff60e01b81526001600160a01b03831660048201526024016105a1565b6008546040516370a0823160e01b81523060048201526117b3916001600160a01b0390811691908516906370a082319060240160206040518083038186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190613478565b6001600160a01b0385169190612b6c565b6000546201000090046001600160a01b031633146118fa576040516305e7700560e51b815260040160405180910390fd5b600a5460408051918252602082018390527f801306575ef2eb7d5ec12da38bf892a7872d76caf0beb1cec0779abeb71ff3a9910160405180910390a1600a55565b60028054141561195e57604051633ee5aeb560e01b815260040160405180910390fd5b6002805560006119776001600160a01b0384168361223c565b336000908152600b602090815260408083206001600160a01b03881684529091529020549091508111156119be5760405163c0993c3760e01b815260040160405180910390fd5b60006119ca8484612b9c565b60075460055460095492935060009283926001600160a01b039081169263e8e3370092911690899087908a90611a1390611a0c90670de0b6b3a764000061364b565b8a90612629565b611a46611a36600954670de0b6b3a7640000611a2f919061364b565b8d90612629565b6001600160a01b038f1690612a6d565b30600a5442611a559190613426565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b158015611acc57600080fd5b505af1158015611ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b049190613685565b9093509150611b1e90506001600160a01b0387168361223c565b336000908152600b602090815260408083206001600160a01b038b16845290915281208054909190611b5190849061364b565b9091555050336000908152600c602090815260408083206001600160a01b038a16845290915281208054839290611b89908490613426565b90915550506040518481526001600160a01b0387169033907f0657e0c8fff72ae811b8683a3411c30ebb5098754ec5e814687711e97cbd6db29060200160405180910390a35050600160025550505050565b600280541415611bfe57604051633ee5aeb560e01b815260040160405180910390fd5b60028055336000908152600c602090815260408083206001600160a01b0386168452909152902054811115611c465760405163dc93df4560e01b815260040160405180910390fd5b600754600554600a546000926001600160a01b039081169263baa2abde9291169086908690869081903090611c7b9042613426565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e4016040805180830381600087803b158015611ce857600080fd5b505af1158015611cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2091906136b3565b9150611d3790506001600160a01b0384168261223c565b336000908152600b602090815260408083206001600160a01b038816845290915281208054909190611d6a908490613426565b9091555050336000908152600c602090815260408083206001600160a01b038716845290915281208054849290611da290849061364b565b90915550506040518281526001600160a01b0384169033907f8c6e1d3aa13e82e61da9350057ab35ded0bd548b8905b82dfa012876992b8ef5906020015b60405180910390a35050600160025550565b60005460ff16158015611e0c5750600054610100900460ff165b15611e2a57604051631ee1e30360e21b815260040160405180910390fd5b60005460ff16158015611e47576000805461ffff19166101011790555b611e5033612f2a565b600380546001600160a01b03199081166001600160a01b038a81169190911790925560048054821689841617815560058054831689851690811790915560068054841689861617905560078054841688861690811790915560088054909416948716949094179092556611c37937e080006009556104b0600a5560405163095ea7b360e01b81529081019290925260001960248301529063095ea7b390604401602060405180830381600087803b158015611f0a57600080fd5b505af1158015611f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f42919061343e565b508015611f54576000805460ff191690555b50505050505050565b6000546201000090046001600160a01b03163314611f8e576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b038216611fb55760405163604b48b960e11b815260040160405180910390fd5b6001600160a01b038216301415611fdf576040516306b3e95d60e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0384161790558061204257600080546040516001600160a01b03808616936201000090930416917fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb191a35050565b6117b382612f2a565b60028054141561206e57604051633ee5aeb560e01b815260040160405180910390fd5b600280556005546001600160a01b03838116911614156120ac5760405163f099c8a560e01b81526001600160a01b03831660048201526024016105a1565b60006120c16001600160a01b0384168361223c565b336000908152600b602090815260408083206001600160a01b03881684529091529020549091508111156121085760405163c0993c3760e01b815260040160405180910390fd5b336000908152600b602090815260408083206001600160a01b03871684529091528120805483929061213b90849061364b565b9091555061215590506001600160a01b0384163384612b6c565b6040518181526001600160a01b0384169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639890602001611de0565b6001600160a01b038116600090815260018301602052604090205415155b92915050565b6040516001600160a01b03808516602483015283166044820152606481018290526122369085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612f91565b50505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561227857600080fd5b505afa15801561228c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b09190613662565b6122bb9060126136d7565b6122c690600a6137de565b9050806001146122e2576122da81846137ed565b9150506121b0565b509092915050565b6001600160a01b0381166000908152600183016020526040812054806123145760009150506121b0565b600061232160018361364b565b90506000600161232f875490565b612339919061364b565b90508082146123c5576000866000018281548110612359576123596134ff565b60009182526020909120015487546001600160a01b0390911691508190889085908110612388576123886134ff565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018801909152604090208390555b85548690806123d6576123d661380c565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260018881019091526040822091909155935050505092915050565b6000806000600760009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561247657600080fd5b505afa15801561248a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ae919061345b565b60055460405163e6a4390560e01b81526001600160a01b039182166004820152868216602482015291169063e6a439059060440160206040518083038186803b1580156124fa57600080fd5b505afa15801561250e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612532919061345b565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561257057600080fd5b505afa158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a89190613840565b506005546dffffffffffffffffffffffffffff9283169450911691506001600160a01b03808816911610156125e2578194508093506125e9565b8193508094505b505050915091565b600061260683670de0b6b3a764000084612724565b9392505050565b6000808212156126255761262082613890565b6121b0565b5090565b60008080600019848609848602925082811083820303915050670de0b6b3a7640000811061267b5760405163072fa3c960e31b815260048101829052670de0b6b3a764000060248201526044016105a1565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826126b55780670de0b6b3a76400008504019450505050506121b0565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b60008161270857506000919050565b6127118261301b565b6121b090633b9aca006137ed565b919050565b600080806000198587098587029250828110838203039150508381106127675760405163072fa3c960e31b815260048101829052602481018590526044016105a1565b8061277757508290049050612606565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000806127eb83612423565b90925090506128036001600160a01b0384168261223c565b905081600460009054906101000a90046001600160a01b03166001600160a01b031663b56cf0116040518163ffffffff1660e01b815260040160206040518083038186803b15801561285457600080fd5b505afa158015612868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288c9190613478565b1115612a6857600480546040805163b56cf01160e01b8152905160009386936001600160a01b03169263b56cf0119281830192602092829003018186803b1580156128d657600080fd5b505afa1580156128ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290e9190613478565b612918919061364b565b9050600061294361293361292c86866125f1565b84906125f1565b6001600160a01b03871690612a6d565b6007546005546009549293506001600160a01b039182169263e8e3370092909116908890869086906129889061298190670de0b6b3a764000061364b565b8990612629565b6129a461115a600954670de0b6b3a7640000611a0c919061364b565b30600a54426129b39190613426565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b158015612a2a57600080fd5b505af1158015612a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a629190613685565b50505050505b505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612aa957600080fd5b505afa158015612abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae19190613662565b612aec9060126136d7565b612af790600a6137de565b9050806001146122e2576122da81846138ad565b6000612b178383612192565b15612b24575060006121b0565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6040516001600160a01b038316602482015260448101829052612a6890849063a9059cbb60e01b906064016121ea565b600080600760009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015612bed57600080fd5b505afa158015612c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c25919061345b565b60055460405163e6a4390560e01b81526001600160a01b039182166004820152868216602482015291169063e6a439059060440160206040518083038186803b158015612c7157600080fd5b505afa158015612c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca9919061345b565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612ce757600080fd5b505afa158015612cfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1f9190613840565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508160001480612d51575080155b15612df257600654604051630787c49960e21b81526001600160a01b038881166004830152612de8921690631e1f12649060240160206040518083038186803b158015612d9d57600080fd5b505afa158015612db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd59190613478565b610b146001600160a01b0389168861223c565b93505050506121b0565b6005546001600160a01b03808816911610612e9657600754604051632b58577b60e21b81526004810187905260248101849052604481018390526001600160a01b039091169063ad615dec9060640160206040518083038186803b158015612e5957600080fd5b505afa158015612e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e919190613478565b612f20565b600754604051632b58577b60e21b81526004810187905260248101839052604481018490526001600160a01b039091169063ad615dec9060640160206040518083038186803b158015612ee857600080fd5b505afa158015612efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f209190613478565b9695505050505050565b6000805475ffffffffffffffffffffffffffffffffffffffff00001916620100006001600160a01b0384811682810293909317808555604051939492900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e9190a350565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201528290600090612fe0906001600160a01b03841690859061312b565b8051909150156122365780806020019051810190612ffe919061343e565b61223657604051639b8d506160e01b815260040160405180910390fd5b60008161302a57506000919050565b5060018170010000000000000000000000000000000081106130515760409190911b9060801c5b68010000000000000000811061306c5760209190911b9060401c5b64010000000081106130835760109190911b9060201c5b6201000081106130985760089190911b9060101c5b61010081106130ac5760049190911b9060081c5b601081106130bf5760029190911b9060041c5b600881106130cf57600182901b91505b60075b80156131045760016130e484866138ad565b6130ee9085613426565b901c9250806130fc816138cf565b9150506130d2565b600061311084866138ad565b9050808410156131205783613122565b805b95945050505050565b6060833b6131575760405163dc5dd7fd60e01b81526001600160a01b03851660048201526024016105a1565b600080856001600160a01b0316856040516131729190613912565b6000604051808303816000865af19150503d80600081146131af576040519150601f19603f3d011682016040523d82523d6000602084013e6131b4565b606091505b5091509150612f20828286606083156131ce575081612606565b8251156131de5782518060208501fd5b8160405162461bcd60e51b81526004016105a1919061392e565b60006020828403121561320a57600080fd5b5035919050565b6001600160a01b038116811461094157600080fd5b6000806040838503121561323957600080fd5b823561324481613211565b946020939093013593505050565b60006020828403121561326457600080fd5b813561260681613211565b600081518084526020808501945080840160005b838110156132a85781516001600160a01b031687529582019590820190600101613283565b509495945050505050565b602081526000612606602083018461326f565b801515811461094157600080fd5b600080600080608085870312156132ea57600080fd5b84356132f581613211565b9350602085013561330581613211565b925060408501359150606085013561331c816132c6565b939692955090935050565b6000806040838503121561333a57600080fd5b823561334581613211565b9150602083013561335581613211565b809150509250929050565b60008060008060008060c0878903121561337957600080fd5b863561338481613211565b9550602087013561339481613211565b945060408701356133a481613211565b935060608701356133b481613211565b925060808701356133c481613211565b915060a08701356133d481613211565b809150509295509295509295565b600080604083850312156133f557600080fd5b823561340081613211565b91506020830135613355816132c6565b634e487b7160e01b600052601160045260246000fd5b6000821982111561343957613439613410565b500190565b60006020828403121561345057600080fd5b8151612606816132c6565b60006020828403121561346d57600080fd5b815161260681613211565b60006020828403121561348a57600080fd5b5051919050565b60008083128015600160ff1b8501841216156134af576134af613410565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156134e3576134e3613410565b50500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b85815284602082015260a06040820152600061353460a083018661326f565b6001600160a01b0394909416606083015250608001529392505050565b6000602080838503121561356457600080fd5b825167ffffffffffffffff8082111561357c57600080fd5b818501915085601f83011261359057600080fd5b8151818111156135a2576135a26134e9565b8060051b604051601f19603f830116810181811085821117156135c7576135c76134e9565b6040529182528482019250838101850191888311156135e557600080fd5b938501935b82851015613603578451845293850193928501926135ea565b98975050505050505050565b600060001982141561362357613623613410565b5060010190565b828152604060208201526000613643604083018461326f565b949350505050565b60008282101561365d5761365d613410565b500390565b60006020828403121561367457600080fd5b815160ff8116811461260657600080fd5b60008060006060848603121561369a57600080fd5b8351925060208401519150604084015190509250925092565b600080604083850312156136c657600080fd5b505080516020909101519092909150565b600060ff821660ff8416808210156136f1576136f1613410565b90039392505050565b600181815b8085111561373557816000190482111561371b5761371b613410565b8085161561372857918102915b93841c93908002906136ff565b509250929050565b60008261374c575060016121b0565b81613759575060006121b0565b816001811461376f576002811461377957613795565b60019150506121b0565b60ff84111561378a5761378a613410565b50506001821b6121b0565b5060208310610133831016604e8410600b84101617156137b8575081810a6121b0565b6137c283836136fa565b80600019048211156137d6576137d6613410565b029392505050565b600061260660ff84168361373d565b600081600019048311821515161561380757613807613410565b500290565b634e487b7160e01b600052603160045260246000fd5b80516dffffffffffffffffffffffffffff8116811461271f57600080fd5b60008060006060848603121561385557600080fd5b61385e84613822565b925061386c60208501613822565b9150604084015163ffffffff8116811461388557600080fd5b809150509250925092565b6000600160ff1b8214156138a6576138a6613410565b5060000390565b6000826138ca57634e487b7160e01b600052601260045260246000fd5b500490565b6000816138de576138de613410565b506000190190565b60005b838110156139015781810151838201526020016138e9565b838111156122365750506000910152565b600082516139248184602087016138e6565b9190910192915050565b602081526000825180602084015261394d8160408501602087016138e6565b601f01601f1916919091016040019291505056fea164736f6c6343000809000a",
  "devdoc": {
    "errors": {
      "ExchangeFundDepositableTokenAlreadyListed(address)": [
        {
          "details": "Thrown when trying to list depositable token that's already listed.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundDepositableTokenNotListed(address)": [
        {
          "details": "Thrown when trying to unlist depositable token that's not listed.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundDepositableTokenTooLargeDecimals(address,uint8)": [
        {
          "details": "Thrown when trying to list depositable token that has too large decimals.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundDepositableTokenZeroDecimals(address)": [
        {
          "details": "Thrown when trying to list depositable token that has zero decimals.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundNoNeedToService(address)": [
        {
          "details": "Thrown when there's no need to service the `token`/stablecoin pair cause the difference between target and pair price does not exceed servicing threshold.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundTokenNotAllowedToBeDeposited(address)": [
        {
          "details": "Thrown when interacting with a token that's not allowed to be deposited.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundTokenNotAllowedToBeSalvaged(address)": [
        {
          "details": "Thrown when trying to salvage one of depositable tokens or stablecoin.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundTokenNotAllowedToBeSwapped(address)": [
        {
          "details": "Thrown when trying to swap token that's not allowed to be swapped.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundTokenNotAllowedToBeWithdrawn(address)": [
        {
          "details": "Thrown when interacting with a token that's not allowed to be withdrawn.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6644,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "initializing",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6646,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "initialized",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4646,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4648,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6362,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3177,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "wrappedNativeCurrency",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)4866"
      },
      {
        "astId": 3180,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "core",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICore)2780"
      },
      {
        "astId": 3183,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "stablecoin",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)4866"
      },
      {
        "astId": 3186,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "priceOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPriceOracle)4956"
      },
      {
        "astId": 3189,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IUniswapV2Router)5140"
      },
      {
        "astId": 3191,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "operator",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3193,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "slippageTolerance",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3195,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "swapDeadline",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3202,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "deposits",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)4866,t_uint256))"
      },
      {
        "astId": 3209,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "liquidity",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)4866,t_uint256))"
      },
      {
        "astId": 3214,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "depositableTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_contract(IERC20)4866,t_bool)"
      },
      {
        "astId": 3217,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "depositableTokensSet",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Set)5674_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)2780": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)4866": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)4956": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router)5140": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)4866,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)4866,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)4866,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)4866",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)4866,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)4866",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)5674_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableAddressSet.Set",
        "members": [
          {
            "astId": 5669,
            "contract": "contracts/ExchangeFund.sol:ExchangeFund",
            "label": "elements",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5673,
            "contract": "contracts/ExchangeFund.sol:ExchangeFund",
            "label": "indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}