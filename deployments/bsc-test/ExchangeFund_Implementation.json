{
  "address": "0x997d7FE2b4B193cB893F52496BEE709Dc212bc46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "CallToNonContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundDepositableTokenAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundDepositableTokenNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "ExchangeFundDepositableTokenTooLargeDecimals",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundDepositableTokenZeroDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExchangeFundInsufficientDeposits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExchangeFundInsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundNoNeedToService",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundSameTokenSwap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundTokenNotAllowedToBeDeposited",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundTokenNotAllowedToBeSalvaged",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundTokenNotAllowedToBeSwapped",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ExchangeFundTokenNotAllowedToBeWithdrawn",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "FixedPointMathMulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedCantGoverItself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedGovernorZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyPendingGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeERC20NoReturnData",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "DepositableTokenListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "DepositableTokenUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Divest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernanceTransited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Invest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceTransition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Service",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippageTolerance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSlippageTolerance",
          "type": "uint256"
        }
      ],
      "name": "SlippageToleranceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapDeadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapDeadline",
          "type": "uint256"
        }
      ],
      "name": "SwapDeadlineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositableTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "divest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositableTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_wrappedNativeCurrency",
          "type": "address"
        },
        {
          "internalType": "contract ICore",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router",
          "name": "_uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "listDepositableToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stablecoinAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "salvage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "service",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSlippageTolerance",
          "type": "uint256"
        }
      ],
      "name": "setSlippageTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapDeadline",
          "type": "uint256"
        }
      ],
      "name": "setSwapDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "useWrappedNativeCurrencyAsIntermediateToken",
          "type": "bool"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        }
      ],
      "name": "transitGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unlistDepositableToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeCurrency",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x975537155c5f56c5a67c2f9f455ab095c600e95573f7c11fa9e6e0bec555ec5c",
  "receipt": {
    "to": null,
    "from": "0x21309DA9AD64eA82431758B27cbD63E5d53A556c",
    "contractAddress": "0x997d7FE2b4B193cB893F52496BEE709Dc212bc46",
    "transactionIndex": 15,
    "gasUsed": "3165193",
    "logsBloom": "0x
    "blockHash": "0x61a652c0c8535d61d50954c6f787c23c5a009ef0eaef1f15081f49ba006619bc",
    "transactionHash": "0x975537155c5f56c5a67c2f9f455ab095c600e95573f7c11fa9e6e0bec555ec5c",
    "logs": [],
    "blockNumber": 14041609,
    "cumulativeGasUsed": "7256020",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f47bd1bda1fe172daaa81b720402d145",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"CallToNonContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundDepositableTokenAlreadyListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundDepositableTokenNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"ExchangeFundDepositableTokenTooLargeDecimals\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundDepositableTokenZeroDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExchangeFundInsufficientDeposits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExchangeFundInsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundNoNeedToService\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundSameTokenSwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundTokenNotAllowedToBeDeposited\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundTokenNotAllowedToBeSalvaged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundTokenNotAllowedToBeSwapped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExchangeFundTokenNotAllowedToBeWithdrawn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FixedPointMathMulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedCantGoverItself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedGovernorZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyPendingGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeERC20NoReturnData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"DepositableTokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DepositableTokenUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Divest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernanceTransited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernanceTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Service\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlippageTolerance\",\"type\":\"uint256\"}],\"name\":\"SlippageToleranceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapDeadline\",\"type\":\"uint256\"}],\"name\":\"SwapDeadlineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"divest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositableTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_wrappedNativeCurrency\",\"type\":\"address\"},{\"internalType\":\"contract ICore\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"listDepositableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stablecoinAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"service\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSlippageTolerance\",\"type\":\"uint256\"}],\"name\":\"setSlippageTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapDeadline\",\"type\":\"uint256\"}],\"name\":\"setSwapDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useWrappedNativeCurrencyAsIntermediateToken\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"transitGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unlistDepositableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ExchangeFundDepositableTokenAlreadyListed(address)\":[{\"details\":\"Thrown when trying to list depositable token that's already listed.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundDepositableTokenNotListed(address)\":[{\"details\":\"Thrown when trying to unlist depositable token that's not listed.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundDepositableTokenTooLargeDecimals(address,uint8)\":[{\"details\":\"Thrown when trying to list depositable token that has too large decimals.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundDepositableTokenZeroDecimals(address)\":[{\"details\":\"Thrown when trying to list depositable token that has zero decimals.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundNoNeedToService(address)\":[{\"details\":\"Thrown when there's no need to service the `token`/stablecoin pair cause the difference between target and pair price does not exceed servicing threshold.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundTokenNotAllowedToBeDeposited(address)\":[{\"details\":\"Thrown when interacting with a token that's not allowed to be deposited.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundTokenNotAllowedToBeSalvaged(address)\":[{\"details\":\"Thrown when trying to salvage one of depositable tokens or stablecoin.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundTokenNotAllowedToBeSwapped(address)\":[{\"details\":\"Thrown when trying to swap token that's not allowed to be swapped.\",\"params\":{\"token\":\"The address of the token contract.\"}}],\"ExchangeFundTokenNotAllowedToBeWithdrawn(address)\":[{\"details\":\"Thrown when interacting with a token that's not allowed to be withdrawn.\",\"params\":{\"token\":\"The address of the token contract.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExchangeFund.sol\":\"ExchangeFund\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/Core.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\n\\n/// @dev Thrown when trying to set platform fees that don't sum up to one.\\n/// @param stabilizationFee The stabilization fee that was tried to set.\\n/// @param exchangeFee The stabilization fee that was tried to set.\\n/// @param developmentFee The stabilization fee that was tried to set.\\nerror BaksDAOPlatformFeesDontSumUpToOne(uint256 stabilizationFee, uint256 exchangeFee, uint256 developmentFee);\\n\\ninterface ICore {\\n    event MinimumPrincipalAmountUpdated(uint256 minimumPrincipalAmount, uint256 newMinimumPrincipalAmount);\\n    event StabilityFeeUpdated(uint256 stabilityFee, uint256 newStabilityFee);\\n    event RebalancingThresholdUpdated(uint256 rebalancingThreshold, uint256 newRebalancingThreshold);\\n    event PlatformFeesUpdated(\\n        uint256 stabilizationFee,\\n        uint256 newStabilizationFee,\\n        uint256 exchangeFee,\\n        uint256 newExchangeFee,\\n        uint256 developmentFee,\\n        uint256 newDevelopmentFee\\n    );\\n    event MarginCallLoanToValueRatioUpdated(uint256 marginCallLoanToValueRatio, uint256 newMarginCallLoanToValueRatio);\\n    event LiquidationLoanToValueRatioUpdated(\\n        uint256 liqudationLoanToValueRatio,\\n        uint256 newLiquidationLoanToValueRatio\\n    );\\n\\n    event ServicingThresholdUpdated(uint256 servicingThreshold, uint256 newServicingThreshold);\\n    event MinimumLiquidityUpdated(uint256 minimumLiquidity, uint256 newMinimumLiquidity);\\n\\n    function minimumPrincipalAmount() external view returns (uint256);\\n\\n    function stabilityFee() external view returns (uint256);\\n\\n    function stabilizationFee() external view returns (uint256);\\n\\n    function exchangeFee() external view returns (uint256);\\n\\n    function developmentFee() external view returns (uint256);\\n\\n    function marginCallLoanToValueRatio() external view returns (uint256);\\n\\n    function liquidationLoanToValueRatio() external view returns (uint256);\\n\\n    function rebalancingThreshold() external view returns (uint256);\\n\\n    function servicingThreshold() external view returns (uint256);\\n\\n    function minimumLiquidity() external view returns (uint256);\\n}\\n\\ncontract Core is Initializable, Governed, ICore {\\n    uint256 internal constant ONE = 100e16;\\n\\n    uint256 public override minimumPrincipalAmount;\\n    uint256 public override stabilityFee;\\n    uint256 public override stabilizationFee;\\n    uint256 public override exchangeFee;\\n    uint256 public override developmentFee;\\n    uint256 public override marginCallLoanToValueRatio;\\n    uint256 public override liquidationLoanToValueRatio;\\n    uint256 public override rebalancingThreshold;\\n\\n    uint256 public override servicingThreshold;\\n    uint256 public override minimumLiquidity;\\n\\n    function initialize() external initializer {\\n        setGovernor(msg.sender);\\n\\n        minimumPrincipalAmount = 50e18; // 50 BAKS\\n        stabilityFee = 3e16; // 3 %\\n        stabilizationFee = 85e16; // 85 %\\n        exchangeFee = 15e16; // 15 %\\n        developmentFee = 0;\\n        marginCallLoanToValueRatio = 75e16; // 75 %\\n        liquidationLoanToValueRatio = 83e16; // 83 %\\n        rebalancingThreshold = 1e16; // 1 %\\n\\n        servicingThreshold = 1e16; // 1%\\n        minimumLiquidity = 50000e18; // 50000 BAKS\\n    }\\n\\n    function setMinimumPrincipalAmount(uint256 newMinimumPrincipalAmount) external onlyGovernor {\\n        emit StabilityFeeUpdated(minimumPrincipalAmount, newMinimumPrincipalAmount);\\n        minimumPrincipalAmount = newMinimumPrincipalAmount;\\n    }\\n\\n    function setStabilityFee(uint256 newStabilityFee) external onlyGovernor {\\n        emit StabilityFeeUpdated(stabilityFee, newStabilityFee);\\n        stabilityFee = newStabilityFee;\\n    }\\n\\n    function setPlatformFees(\\n        uint256 newStabilizationFee,\\n        uint256 newExchangeFee,\\n        uint256 newDevelopmentFee\\n    ) external onlyGovernor {\\n        if (newStabilizationFee + newExchangeFee + newDevelopmentFee != ONE) {\\n            revert BaksDAOPlatformFeesDontSumUpToOne(newStabilizationFee, newExchangeFee, newDevelopmentFee);\\n        }\\n        emit PlatformFeesUpdated(\\n            stabilizationFee,\\n            newStabilizationFee,\\n            exchangeFee,\\n            newExchangeFee,\\n            developmentFee,\\n            newDevelopmentFee\\n        );\\n        stabilizationFee = newStabilizationFee;\\n        exchangeFee = newExchangeFee;\\n        developmentFee = newDevelopmentFee;\\n    }\\n\\n    function setMarginCallLoanToValueRatio(uint256 newMarginCallLoanToValueRatio) external onlyGovernor {\\n        emit MarginCallLoanToValueRatioUpdated(marginCallLoanToValueRatio, newMarginCallLoanToValueRatio);\\n        marginCallLoanToValueRatio = newMarginCallLoanToValueRatio;\\n    }\\n\\n    function setLiquidationLoanToValueRatio(uint256 newLiquidationLoanToValueRatio) external onlyGovernor {\\n        emit LiquidationLoanToValueRatioUpdated(liquidationLoanToValueRatio, newLiquidationLoanToValueRatio);\\n        liquidationLoanToValueRatio = newLiquidationLoanToValueRatio;\\n    }\\n\\n    function setRebalancingThreshold(uint256 newRebalancingThreshold) external onlyGovernor {\\n        emit RebalancingThresholdUpdated(rebalancingThreshold, newRebalancingThreshold);\\n        rebalancingThreshold = newRebalancingThreshold;\\n    }\\n\\n    function setServicingThreshold(uint256 newServicingThreshold) external onlyGovernor {\\n        emit ServicingThresholdUpdated(servicingThreshold, newServicingThreshold);\\n        servicingThreshold = newServicingThreshold;\\n    }\\n\\n    function setMinimumLiquidity(uint256 newMinimumLiquidity) external onlyGovernor {\\n        emit MinimumLiquidityUpdated(minimumLiquidity, newMinimumLiquidity);\\n        minimumLiquidity = newMinimumLiquidity;\\n    }\\n}\\n\",\"keccak256\":\"0xbb9cdcaaf10204943ae5e47f4f8f75ab733b5180017782157bb9b88d9171d57a\",\"license\":\"BUSL-1.1\"},\"contracts/ExchangeFund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./libraries/AmountNormalization.sol\\\";\\nimport \\\"./libraries/EnumerableAddressSet.sol\\\";\\nimport \\\"./libraries/FixedPointMath.sol\\\";\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\nimport {ICore} from \\\"./Core.sol\\\";\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {IERC20} from \\\"./interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./interfaces/IPriceOracle.sol\\\";\\nimport {IUniswapV2Factory, IUniswapV2Router, IUniswapV2Pair} from \\\"./interfaces/UniswapV2.sol\\\";\\n\\n/// @dev Thrown when trying to list depositable token that has zero decimals.\\n/// @param token The address of the token contract.\\nerror ExchangeFundDepositableTokenZeroDecimals(IERC20 token);\\n\\n/// @dev Thrown when trying to list depositable token that has too large decimals.\\n/// @param token The address of the token contract.\\nerror ExchangeFundDepositableTokenTooLargeDecimals(IERC20 token, uint8 decimals);\\n\\n/// @dev Thrown when trying to list depositable token that's already listed.\\n/// @param token The address of the token contract.\\nerror ExchangeFundDepositableTokenAlreadyListed(IERC20 token);\\n\\n/// @dev Thrown when trying to unlist depositable token that's not listed.\\n/// @param token The address of the token contract.\\nerror ExchangeFundDepositableTokenNotListed(IERC20 token);\\n\\n/// @dev Thrown when interacting with a token that's not allowed to be deposited.\\n/// @param token The address of the token contract.\\nerror ExchangeFundTokenNotAllowedToBeDeposited(IERC20 token);\\n\\n/// @dev Thrown when interacting with a token that's not allowed to be withdrawn.\\n/// @param token The address of the token contract.\\nerror ExchangeFundTokenNotAllowedToBeWithdrawn(IERC20 token);\\n\\n/// @dev Thrown when trying to salvage one of depositable tokens or stablecoin.\\n/// @param token The address of the token contract.\\nerror ExchangeFundTokenNotAllowedToBeSalvaged(IERC20 token);\\n\\nerror ExchangeFundInsufficientDeposits();\\n\\nerror ExchangeFundInsufficientLiquidity();\\n\\nerror ExchangeFundSameTokenSwap(IERC20 token);\\n\\n/// @dev Thrown when trying to swap token that's not allowed to be swapped.\\n/// @param token The address of the token contract.\\nerror ExchangeFundTokenNotAllowedToBeSwapped(IERC20 token);\\n\\n/// @dev Thrown when there's no need to service the `token`/stablecoin pair cause the difference between target and\\n/// pair price does not exceed servicing threshold.\\n/// @param token The address of the token contract.\\nerror ExchangeFundNoNeedToService(IERC20 token);\\n\\ncontract ExchangeFund is Initializable, Governed, ReentrancyGuard {\\n    using AmountNormalization for IERC20;\\n    using EnumerableAddressSet for EnumerableAddressSet.Set;\\n    using FixedPointMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant ONE = 100e16;\\n    uint8 internal constant DECIMALS = 18;\\n\\n    IERC20 public wrappedNativeCurrency;\\n    ICore public core;\\n    IERC20 public stablecoin;\\n    IPriceOracle public priceOracle;\\n    IUniswapV2Router public uniswapV2Router;\\n\\n    address public operator;\\n\\n    uint256 public slippageTolerance;\\n    uint256 public swapDeadline;\\n\\n    mapping(address => mapping(IERC20 => uint256)) public deposits;\\n    mapping(address => mapping(IERC20 => uint256)) public liquidity;\\n\\n    mapping(IERC20 => bool) public depositableTokens;\\n    EnumerableAddressSet.Set internal depositableTokensSet;\\n\\n    event DepositableTokenListed(IERC20 indexed token, IUniswapV2Pair pair);\\n    event DepositableTokenUnlisted(IERC20 indexed token);\\n\\n    event SlippageToleranceUpdated(uint256 slippageTolerance, uint256 newSlippageTolerance);\\n    event SwapDeadlineUpdated(uint256 swapDeadline, uint256 newSwapDeadline);\\n\\n    event Deposit(address indexed account, IERC20 indexed token, uint256 amount);\\n    event Swap(address indexed account, IERC20 indexed tokenA, IERC20 indexed tokenB, uint256 amountA, uint256 amountB);\\n    event Invest(address indexed account, IERC20 indexed token, uint256 amount);\\n    event Divest(address indexed account, IERC20 indexed token, uint256 amount);\\n    event Withdrawal(address indexed account, IERC20 indexed token, uint256 amount);\\n    event Service(address indexed account, IERC20 indexed token);\\n\\n    modifier tokenAllowedToBeDeposited(IERC20 token) {\\n        if (!depositableTokensSet.contains(address(token))) {\\n            revert ExchangeFundTokenNotAllowedToBeDeposited(token);\\n        }\\n        _;\\n    }\\n\\n    modifier tokenAllowedToBeSwapped(IERC20 token) {\\n        if (token != stablecoin && !depositableTokensSet.contains(address(token))) {\\n            revert ExchangeFundTokenNotAllowedToBeSwapped(token);\\n        }\\n        _;\\n    }\\n\\n    function initialize(\\n        IERC20 _wrappedNativeCurrency,\\n        ICore _core,\\n        IERC20 _stablecoin,\\n        IPriceOracle _priceOracle,\\n        IUniswapV2Router _uniswapV2Router,\\n        address _operator\\n    ) external initializer {\\n        setGovernor(msg.sender);\\n\\n        wrappedNativeCurrency = _wrappedNativeCurrency;\\n\\n        core = _core;\\n        stablecoin = _stablecoin;\\n        priceOracle = _priceOracle;\\n        uniswapV2Router = _uniswapV2Router;\\n        operator = _operator;\\n\\n        slippageTolerance = 5e15; // 0.5 %\\n        swapDeadline = 20 minutes;\\n\\n        _stablecoin.approve(address(_uniswapV2Router), type(uint256).max);\\n    }\\n\\n    function deposit(IERC20 token, uint256 amount) external nonReentrant tokenAllowedToBeDeposited(token) {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 normalizedAmount = token.normalizeAmount(amount);\\n        deposits[msg.sender][token] += normalizedAmount;\\n\\n        emit Deposit(msg.sender, token, normalizedAmount);\\n    }\\n\\n    function swap(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint256 amount,\\n        bool useWrappedNativeCurrencyAsIntermediateToken\\n    ) external nonReentrant tokenAllowedToBeSwapped(tokenA) tokenAllowedToBeSwapped(tokenB) {\\n        uint256 normalizedAmount = tokenA.normalizeAmount(amount);\\n        if (normalizedAmount > deposits[msg.sender][tokenA]) {\\n            revert ExchangeFundInsufficientDeposits();\\n        }\\n\\n        if (tokenA == tokenB) {\\n            revert ExchangeFundSameTokenSwap(tokenA);\\n        }\\n\\n        IERC20[] memory path = new IERC20[](useWrappedNativeCurrencyAsIntermediateToken ? 3 : 2);\\n        path[0] = tokenA;\\n        path[1] = useWrappedNativeCurrencyAsIntermediateToken ? wrappedNativeCurrency : tokenB;\\n        if (useWrappedNativeCurrencyAsIntermediateToken) {\\n            path[2] = tokenB;\\n        }\\n\\n        uint256[] memory amounts = uniswapV2Router.getAmountsOut(amount, path);\\n        uint256 normalizedAmountOut = tokenB.normalizeAmount(amounts[amounts.length - 1]);\\n\\n        amounts = uniswapV2Router.swapExactTokensForTokens(\\n            amount,\\n            tokenB.denormalizeAmount(normalizedAmountOut.mul(ONE - slippageTolerance)),\\n            path,\\n            address(this),\\n            block.timestamp + swapDeadline\\n        );\\n\\n        uint256 normalizedTokenAAmount = tokenA.normalizeAmount(amounts[0]);\\n        uint256 normalizedTokenBAmount = tokenB.normalizeAmount(amounts[amounts.length - 1]);\\n\\n        deposits[msg.sender][tokenA] -= normalizedTokenAAmount;\\n        deposits[msg.sender][tokenB] += normalizedTokenBAmount;\\n\\n        emit Swap(msg.sender, tokenA, tokenB, normalizedTokenAAmount, normalizedTokenBAmount);\\n    }\\n\\n    function invest(IERC20 token, uint256 amount) external nonReentrant {\\n        uint256 normalizedAmount = token.normalizeAmount(amount);\\n        if (normalizedAmount > deposits[msg.sender][token]) {\\n            revert ExchangeFundInsufficientDeposits();\\n        }\\n\\n        uint256 tokenValue = quote(token, amount);\\n        (, uint256 amountSent, uint256 liquidityMinted) = uniswapV2Router.addLiquidity(\\n            stablecoin,\\n            token,\\n            tokenValue,\\n            amount,\\n            tokenValue.mul(ONE - slippageTolerance),\\n            token.denormalizeAmount(normalizedAmount.mul(ONE - slippageTolerance)),\\n            address(this),\\n            block.timestamp + swapDeadline\\n        );\\n\\n        deposits[msg.sender][token] -= token.normalizeAmount(amountSent);\\n        liquidity[msg.sender][token] += liquidityMinted;\\n\\n        emit Invest(msg.sender, token, normalizedAmount);\\n    }\\n\\n    function divest(IERC20 token, uint256 amount) external nonReentrant {\\n        if (amount > liquidity[msg.sender][token]) {\\n            revert ExchangeFundInsufficientLiquidity();\\n        }\\n\\n        (, uint256 amountReceived) = uniswapV2Router.removeLiquidity(\\n            stablecoin,\\n            token,\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + swapDeadline\\n        );\\n\\n        deposits[msg.sender][token] += token.normalizeAmount(amountReceived);\\n        liquidity[msg.sender][token] -= amount;\\n\\n        emit Divest(msg.sender, token, amount);\\n    }\\n\\n    function withdraw(IERC20 token, uint256 amount) external nonReentrant {\\n        if (token == stablecoin) {\\n            revert ExchangeFundTokenNotAllowedToBeWithdrawn(token);\\n        }\\n\\n        uint256 normalizedAmount = token.normalizeAmount(amount);\\n        if (normalizedAmount > deposits[msg.sender][token]) {\\n            revert ExchangeFundInsufficientDeposits();\\n        }\\n\\n        deposits[msg.sender][token] -= normalizedAmount;\\n        token.safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawal(msg.sender, token, normalizedAmount);\\n    }\\n\\n    function listDepositableToken(IERC20 token) external onlyGovernor {\\n        if (depositableTokensSet.contains(address(token))) {\\n            revert ExchangeFundDepositableTokenAlreadyListed(token);\\n        }\\n\\n        uint8 decimals = token.decimals();\\n        if (decimals == 0) {\\n            revert ExchangeFundDepositableTokenZeroDecimals(token);\\n        }\\n        if (decimals > DECIMALS) {\\n            revert ExchangeFundDepositableTokenTooLargeDecimals(token, decimals);\\n        }\\n\\n        if (depositableTokensSet.add(address(token))) {\\n            token.approve(address(uniswapV2Router), type(uint256).max);\\n\\n            IUniswapV2Factory uniswapV2Factory = uniswapV2Router.factory();\\n            IUniswapV2Pair uniswapV2Pair = uniswapV2Factory.getPair(stablecoin, token);\\n            if (address(uniswapV2Pair) == address(0)) {\\n                uniswapV2Pair = uniswapV2Factory.createPair(stablecoin, token);\\n            }\\n            uniswapV2Pair.approve(address(uniswapV2Router), type(uint256).max);\\n\\n            depositableTokens[token] = true;\\n            emit DepositableTokenListed(token, uniswapV2Pair);\\n        }\\n    }\\n\\n    function unlistDepositableToken(IERC20 token) external onlyGovernor {\\n        if (!depositableTokensSet.contains(address(token))) {\\n            revert ExchangeFundDepositableTokenNotListed(token);\\n        }\\n\\n        if (depositableTokensSet.remove(address(token))) {\\n            token.approve(address(uniswapV2Router), 0);\\n\\n            IUniswapV2Factory uniswapV2Factory = uniswapV2Router.factory();\\n            IUniswapV2Pair uniswapV2Pair = uniswapV2Factory.getPair(stablecoin, token);\\n            if (address(uniswapV2Pair) != address(0)) {\\n                uniswapV2Pair.approve(address(uniswapV2Router), 0);\\n            }\\n\\n            delete depositableTokens[token];\\n            emit DepositableTokenUnlisted(token);\\n        }\\n    }\\n\\n    function setSlippageTolerance(uint256 newSlippageTolerance) external onlyGovernor {\\n        emit SlippageToleranceUpdated(slippageTolerance, newSlippageTolerance);\\n        slippageTolerance = newSlippageTolerance;\\n    }\\n\\n    function setSwapDeadline(uint256 newSwapDeadline) external onlyGovernor {\\n        emit SwapDeadlineUpdated(swapDeadline, newSwapDeadline);\\n        swapDeadline = newSwapDeadline;\\n    }\\n\\n    function salvage(IERC20 token) external onlyGovernor {\\n        address tokenAddress = address(token);\\n        if (token == stablecoin || depositableTokensSet.contains(tokenAddress)) {\\n            revert ExchangeFundTokenNotAllowedToBeSalvaged(token);\\n        }\\n        token.safeTransfer(operator, token.balanceOf(address(this)));\\n    }\\n\\n    function service(IERC20 token) external {\\n        (uint256 stablecoinReserve, uint256 tokenReserve) = getReserves(token);\\n        tokenReserve = token.normalizeAmount(tokenReserve);\\n\\n        uint256 targetPrice = priceOracle.getNormalizedPrice(token);\\n        uint256 price = stablecoinReserve.div(tokenReserve);\\n        int256 delta = int256(price.div(targetPrice)) - int256(ONE);\\n        if (Math.abs(delta) < core.servicingThreshold()) {\\n            revert ExchangeFundNoNeedToService(token);\\n        }\\n\\n        int256 amountOut;\\n        IERC20[] memory path = new IERC20[](2);\\n        if (price > targetPrice) {\\n            amountOut =\\n                int256(Math.fpsqrt(stablecoinReserve.mul(tokenReserve).mul(targetPrice))) -\\n                int256(stablecoinReserve);\\n            path[0] = token;\\n            path[1] = stablecoin;\\n        } else {\\n            amountOut = int256(Math.fpsqrt(stablecoinReserve.mulDiv(tokenReserve, targetPrice))) - int256(tokenReserve);\\n            path[0] = stablecoin;\\n            path[1] = token;\\n        }\\n\\n        // NOTE: using this instead of `swapExactTokensForTokens` to shift responsibility for calculating fees to  *swap\\n        // itself.\\n        uniswapV2Router.swapTokensForExactTokens(\\n            Math.abs(amountOut),\\n            type(uint256).max,\\n            path,\\n            address(this),\\n            block.timestamp + swapDeadline\\n        );\\n\\n        topUpLiquidity(token);\\n\\n        emit Service(msg.sender, token);\\n    }\\n\\n    function getDepositableTokens() external view returns (IERC20[] memory tokens) {\\n        uint256 length = depositableTokensSet.elements.length;\\n        tokens = new IERC20[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            tokens[i] = IERC20(depositableTokensSet.elements[i]);\\n        }\\n    }\\n\\n    function quote(IERC20 token, uint256 amount) public view returns (uint256 stablecoinAmount) {\\n        IUniswapV2Pair uniswapV2Pair = uniswapV2Router.factory().getPair(stablecoin, token);\\n\\n        (uint256 reserveA, uint256 reserveB, ) = uniswapV2Pair.getReserves();\\n        if (reserveA == 0 || reserveB == 0) {\\n            stablecoinAmount = token.normalizeAmount(amount).mul(priceOracle.getNormalizedPrice(token));\\n            return stablecoinAmount;\\n        }\\n\\n        stablecoinAmount = address(stablecoin) < address(token)\\n            ? uniswapV2Router.quote(amount, reserveB, reserveA)\\n            : uniswapV2Router.quote(amount, reserveA, reserveB);\\n    }\\n\\n    function topUpLiquidity(IERC20 token) internal {\\n        (uint256 stablecoinReserve, uint256 tokenReserve) = getReserves(token);\\n        tokenReserve = token.normalizeAmount(tokenReserve);\\n\\n        if (core.minimumLiquidity() > stablecoinReserve) {\\n            uint256 amountADesired = core.minimumLiquidity() - stablecoinReserve;\\n            uint256 amountBDesired = token.denormalizeAmount(amountADesired.div(stablecoinReserve.div(tokenReserve)));\\n            uniswapV2Router.addLiquidity(\\n                stablecoin,\\n                token,\\n                amountADesired,\\n                amountBDesired,\\n                amountADesired.mul(ONE - slippageTolerance),\\n                token.denormalizeAmount(amountBDesired.mul(ONE - slippageTolerance)),\\n                address(this),\\n                block.timestamp + swapDeadline\\n            );\\n        }\\n    }\\n\\n    function getReserves(IERC20 token) internal view returns (uint256 stablecoinReserve, uint256 tokenReserve) {\\n        IUniswapV2Pair uniswapV2Pair = uniswapV2Router.factory().getPair(stablecoin, token);\\n\\n        (uint256 reserveA, uint256 reserveB, ) = uniswapV2Pair.getReserves();\\n        if (address(stablecoin) < address(token)) {\\n            stablecoinReserve = reserveA;\\n            tokenReserve = reserveB;\\n        } else {\\n            tokenReserve = reserveA;\\n            stablecoinReserve = reserveB;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58a527a68c36724c9d83fbe2dc92f49883df597698006cd17b8162b06587b233\",\"license\":\"BUSL-1.1\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nerror GovernedOnlyGovernorAllowedToCall();\\nerror GovernedOnlyPendingGovernorAllowedToCall();\\nerror GovernedGovernorZeroAddress();\\nerror GovernedCantGoverItself();\\n\\nabstract contract Governed {\\n    address public governor;\\n    address public pendingGovernor;\\n\\n    event PendingGovernanceTransition(address indexed governor, address indexed newGovernor);\\n    event GovernanceTransited(address indexed governor, address indexed newGovernor);\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor) {\\n            revert GovernedOnlyGovernorAllowedToCall();\\n        }\\n        _;\\n    }\\n\\n    function transitGovernance(address newGovernor, bool force) external onlyGovernor {\\n        if (newGovernor == address(0)) {\\n            revert GovernedGovernorZeroAddress();\\n        }\\n        if (newGovernor == address(this)) {\\n            revert GovernedCantGoverItself();\\n        }\\n\\n        pendingGovernor = newGovernor;\\n        if (!force) {\\n            emit PendingGovernanceTransition(governor, newGovernor);\\n        } else {\\n            setGovernor(newGovernor);\\n        }\\n    }\\n\\n    function acceptGovernance() external {\\n        if (msg.sender != pendingGovernor) {\\n            revert GovernedOnlyPendingGovernorAllowedToCall();\\n        }\\n\\n        governor = pendingGovernor;\\n        emit GovernanceTransited(governor, pendingGovernor);\\n    }\\n\\n    function setGovernor(address newGovernor) internal {\\n        governor = newGovernor;\\n        emit GovernanceTransited(governor, newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x39eb94fcb72876408caf31d462e821259a1a35a48f56fafb09b442283432dd71\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IMintableAndBurnableERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x88fd15d408cc6fc41f6aecff5e0722a8b3ec59bc306635524e43715b3e2bf5c1\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\nimport \\\"./../libraries/FixedPointMath.sol\\\";\\n\\n/// @notice Thrown when oracle doesn't provide price for `token` token.\\n/// @param token The address of the token contract.\\nerror PriceOracleTokenUnknown(IERC20 token);\\n/// @notice Thrown when oracle provide stale price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleStalePrice(IERC20 token, uint256 price);\\n/// @notice Thrown when oracle provide negative, zero or in other ways invalid price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleInvalidPrice(IERC20 token, int256 price);\\n\\ninterface IPriceOracle {\\n    /// @notice Gets normalized to 18 decimals price for the `token` token.\\n    /// @param token The address of the token contract.\\n    /// @return normalizedPrice Normalized price.\\n    function getNormalizedPrice(IERC20 token) external view returns (uint256 normalizedPrice);\\n}\\n\",\"keccak256\":\"0x3cfee478a9d2c5f5e7af40f2daedbce24d01ec3f552a21a9ac719fcef21d22c7\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IERC20 {\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(IERC20 tokenA, IERC20 tokenB) external returns (IUniswapV2Pair pair);\\n\\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Pair pair);\\n}\\n\\ninterface IUniswapV2Router {\\n    function addLiquidity(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        IERC20 tokenA,\\n        IERC20 tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, IERC20[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function factory() external view returns (IUniswapV2Factory);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n}\\n\",\"keccak256\":\"0x20133724919f3f7615d1b25955c1a06ed8483a115aab6e5cbea542be6452800f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror CallToNonContract(address target);\\n\\nlibrary Address {\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.call(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function delegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.delegatecall(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(account)\\n        }\\n\\n        return codeSize > 0;\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returnData,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returnData;\\n        } else {\\n            if (returnData.length > 0) {\\n                assembly {\\n                    let returnDataSize := mload(returnData)\\n                    revert(add(returnData, 32), returnDataSize)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba7550b67e8e597fcbc05c61eb85d739d80547eb243b78dd1bfa933e8a3490f1\",\"license\":\"MIT\"},\"contracts/libraries/AmountNormalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\n\\nlibrary AmountNormalization {\\n    uint8 internal constant DECIMALS = 18;\\n\\n    function normalizeAmount(IERC20 self, uint256 denormalizedAmount) internal view returns (uint256 normalizedAmount) {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return denormalizedAmount * scale;\\n        }\\n        return denormalizedAmount;\\n    }\\n\\n    function denormalizeAmount(IERC20 self, uint256 normalizedAmount)\\n        internal\\n        view\\n        returns (uint256 denormalizedAmount)\\n    {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return normalizedAmount / scale;\\n        }\\n        return normalizedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x03e0ddb89c09023fd87f8af4db51bf903effbf488cbd28162f0bfb363f1c9058\",\"license\":\"MIT\"},\"contracts/libraries/EnumerableAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary EnumerableAddressSet {\\n    struct Set {\\n        address[] elements;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    function add(Set storage self, address element) internal returns (bool) {\\n        if (contains(self, element)) {\\n            return false;\\n        }\\n\\n        self.elements.push(element);\\n        self.indexes[element] = self.elements.length;\\n\\n        return true;\\n    }\\n\\n    function remove(Set storage self, address element) internal returns (bool) {\\n        uint256 elementIndex = indexOf(self, element);\\n        if (elementIndex == 0) {\\n            return false;\\n        }\\n\\n        uint256 indexToRemove = elementIndex - 1;\\n        uint256 lastIndex = count(self) - 1;\\n        if (indexToRemove != lastIndex) {\\n            address lastElement = self.elements[lastIndex];\\n            self.elements[indexToRemove] = lastElement;\\n            self.indexes[lastElement] = elementIndex;\\n        }\\n        self.elements.pop();\\n        delete self.indexes[element];\\n\\n        return true;\\n    }\\n\\n    function indexOf(Set storage self, address element) internal view returns (uint256) {\\n        return self.indexes[element];\\n    }\\n\\n    function contains(Set storage self, address element) internal view returns (bool) {\\n        return indexOf(self, element) != 0;\\n    }\\n\\n    function count(Set storage self) internal view returns (uint256) {\\n        return self.elements.length;\\n    }\\n}\\n\",\"keccak256\":\"0x5a89f77a4b785e811178f5043d48315fc0ec91b362cd08eca73309ddbff4a654\",\"license\":\"MIT\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror FixedPointMathMulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @title Fixed point math implementation\\nlibrary FixedPointMath {\\n    uint256 internal constant SCALE = 1e18;\\n    /// @dev Largest power of two divisor of scale.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n    /// @dev Scale inverted mod 2**256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert FixedPointMathMulDivOverflow(prod1, SCALE);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(a, b, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := add(div(prod0, SCALE), roundUpUnit)\\n            }\\n            return result;\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        result = mulDiv(a, SCALE, b);\\n    }\\n\\n    /// @notice Calculates \\u230aa \\u00d7 b \\u00f7 denominator\\u230b with full precision.\\n    /// @dev Credit to Remco Bloemen under MIT license https://2\\u03c0.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= denominator) {\\n            revert FixedPointMathMulDivOverflow(prod1, denominator);\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        unchecked {\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                denominator := div(denominator, lpotdod)\\n                prod0 := div(prod0, lpotdod)\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n            prod0 |= prod1 * lpotdod;\\n\\n            uint256 inverse = (3 * denominator) ^ 2;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n\\n            result = prod0 * inverse;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcfc35bc24fe9b1564d323ce96c409f1499a1cea1bc6d156877e020a9ce213fd0\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Math {\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a >= 0 ? uint256(a) : uint256(-a);\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        uint256 xAux = x;\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        uint256 repeat = 7;\\n        while (repeat > 0) {\\n            result = (result + x / result) >> 1;\\n            repeat--;\\n        }\\n        uint256 roundedDownResult = x / result;\\n\\n        return result >= roundedDownResult ? roundedDownResult : result;\\n    }\\n\\n    function fpsqrt(uint256 a) internal pure returns (uint256 result) {\\n        if (a == 0) result = 0;\\n        else result = sqrt(a) * 1e9;\\n    }\\n}\\n\",\"keccak256\":\"0x03f51209124cf167905d4cb5cf2e54c7f9f0b55ec10111f97aef286f2d0a7e7f\",\"license\":\"MIT\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror ReentrancyGuardReentrantCall();\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private status;\\n\\n    modifier nonReentrant() {\\n        if (status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        status = ENTERED;\\n\\n        _;\\n\\n        status = NOT_ENTERED;\\n    }\\n\\n    constructor() {\\n        status = NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb2039772e58680fc07147ec108acc3db9f502b464108e4adfcc10192c6c97003\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\nerror SafeERC20NoReturnData();\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, amount));\\n    }\\n\\n    function callWithOptionalReturn(IERC20 token, bytes memory data) internal {\\n        address tokenAddress = address(token);\\n\\n        bytes memory returnData = tokenAddress.functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returnData.length > 0) {\\n            if (!abi.decode(returnData, (bool))) {\\n                revert SafeERC20NoReturnData();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bf8463bfe7a7352ddc06faf7069e89e1028d1c6dc8d4b34f59fb7eb869b661c\",\"license\":\"MIT\"},\"contracts/libraries/Upgradability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./Address.sol\\\";\\n\\nerror EIP1967ImplementationIsNotContract(address implementation);\\nerror ContractAlreadyInitialized();\\nerror OnlyProxyCallAllowed();\\nerror OnlyCurrentImplementationAllowed();\\n\\nlibrary EIP1967 {\\n    using Address for address;\\n\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    event Upgraded(address indexed newImplementation);\\n\\n    function upgradeTo(address newImplementation) internal {\\n        if (!newImplementation.isContract()) {\\n            revert EIP1967ImplementationIsNotContract(newImplementation);\\n        }\\n\\n        assembly {\\n            sstore(IMPLEMENTATION_SLOT, newImplementation)\\n        }\\n\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    function getImplementation() internal view returns (address implementation) {\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_SLOT)\\n        }\\n    }\\n}\\n\\ncontract Proxy {\\n    using Address for address;\\n\\n    constructor(address implementation, bytes memory data) {\\n        EIP1967.upgradeTo(implementation);\\n        implementation.delegateCall(data, \\\"Proxy: construction failed\\\");\\n    }\\n\\n    receive() external payable {\\n        delegateCall();\\n    }\\n\\n    fallback() external payable {\\n        delegateCall();\\n    }\\n\\n    function delegateCall() internal {\\n        address implementation = EIP1967.getImplementation();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Upgradeable {\\n    address private immutable self = address(this);\\n\\n    modifier onlyProxy() {\\n        if (address(this) == self) {\\n            revert OnlyProxyCallAllowed();\\n        }\\n        if (EIP1967.getImplementation() != self) {\\n            revert OnlyCurrentImplementationAllowed();\\n        }\\n        _;\\n    }\\n\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        EIP1967.upgradeTo(newImplementation);\\n    }\\n}\\n\\nabstract contract Initializable {\\n    bool private initializing;\\n    bool private initialized;\\n\\n    modifier initializer() {\\n        if (!initializing && initialized) {\\n            revert ContractAlreadyInitialized();\\n        }\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3091e63c4fcc7642bcc850ec9c37030b6b7c0c210dcace49f8ba2b930211f88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016002556137f1806100256000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638f79306e11610104578063cc2a9a5b116100a2578063e7f3028c11610071578063e7f3028c14610415578063e9cbd82214610428578063f2f4eb261461043b578063f3fef3a31461044e57600080fd5b8063cc2a9a5b146103d3578063d03153aa146103e6578063ddc12526146103ef578063e3056a341461040257600080fd5b8063b2217281116100de578063b22172811461034f578063b9b8c2461461037a578063bb5043171461038d578063c14edd79146103a057600080fd5b80638f79306e1461032057806393ad9f1714610333578063942dbff41461034657600080fd5b80634bd84701116101715780637e83f7d71161014b5780637e83f7d7146102ae57806385881e2a146102c1578063863a03e0146102d45780638f601f66146102e757600080fd5b80634bd8470114610273578063570ca735146102865780635e6fdf431461029957600080fd5b8063238efcbc116101ad578063238efcbc146102325780632630c12f1461023a57806347e7ef241461024d57806348be77191461026057600080fd5b80630c340a24146101d4578063117da1ee1461020a5780631694505e1461021f575b600080fd5b6000546101ed906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021d61021836600461307b565b610461565b005b6007546101ed906001600160a01b031681565b61021d6104d3565b6006546101ed906001600160a01b031681565b61021d61025b3660046130a9565b610568565b61021d61026e3660046130d5565b610689565b61021d6102813660046130d5565b610943565b6008546101ed906001600160a01b031681565b6102a1610ce5565b6040516102019190613136565b61021d6102bc366004613157565b610dae565b61021d6102cf3660046130d5565b611315565b61021d6102e23660046130d5565b61173b565b6103126102f53660046131aa565b600b60209081526000928352604080842090915290825290205481565b604051908152602001610201565b61031261032e3660046130a9565b61184f565b61021d61034136600461307b565b611b85565b610312600a5481565b61031261035d3660046131aa565b600c60209081526000928352604080842090915290825290205481565b61021d6103883660046130a9565b611bf7565b61021d61039b3660046130a9565b611e88565b6103c36103ae3660046130d5565b600d6020526000908152604090205460ff1681565b6040519015158152602001610201565b61021d6103e13660046131e3565b612090565b61031260095481565b61021d6103fd366004613265565b6121ec565b6001546101ed906001600160a01b031681565b6003546101ed906001600160a01b031681565b6005546101ed906001600160a01b031681565b6004546101ed906001600160a01b031681565b61021d61045c3660046130a9565b6122da565b6000546201000090046001600160a01b03163314610492576040516305e7700560e51b815260040160405180910390fd5b60095460408051918252602082018390527fddd31550b26e9ef8ade466958be83ff8a014d9b4f36d546b61a6847a45306575910160405180910390a1600955565b6001546001600160a01b031633146104fe5760405163aec80d4b60e01b815260040160405180910390fd5b60015460008054620100006001600160a01b0393841681810275ffffffffffffffffffffffffffffffffffffffff00001990931692909217808455604051929491900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e91a3565b60028054141561058b57604051633ee5aeb560e01b815260040160405180910390fd5b600280556001600160a01b0382166000908152600f602052604090205482906105d75760405163497e1e0360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6105ec6001600160a01b038416333085612421565b60006106016001600160a01b038516846124a7565b336000908152600b602090815260408083206001600160a01b03891684529091528120805492935083929091906106399084906132a9565b90915550506040518181526001600160a01b0385169033907f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f629060200160405180910390a3505060016002555050565b6000546201000090046001600160a01b031633146106ba576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b0381166000908152600f60205260409020546106fb5760405163635c3e1f60e11b81526001600160a01b03821660048201526024016105ce565b610706600e82612546565b156109405760075460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529082169063095ea7b3906044016020604051808303816000875af115801561075e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078291906132c1565b506007546040805163c45a015560e01b815290516000926001600160a01b03169163c45a01559160048083019260209291908290030181865afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f191906132de565b60055460405163e6a4390560e01b81526001600160a01b03918216600482015284821660248201529192506000919083169063e6a4390590604401602060405180830381865afa158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d91906132de565b90506001600160a01b038116156108f75760075460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529082169063095ea7b3906044016020604051808303816000875af11580156108d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f591906132c1565b505b6001600160a01b0383166000818152600d6020526040808220805460ff19169055517fbd6c0ac05a911841e71daa23bb8022779f3957fad4fa3546eb22a1782c747c839190a250505b50565b60008061094f8361267f565b90925090506109676001600160a01b038416826124a7565b600654604051630787c49960e21b81526001600160a01b03868116600483015292935060009290911690631e1f126490602401602060405180830381865afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db91906132fb565b905060006109e98484612820565b90506000670de0b6b3a7640000610a008385612820565b610a0a9190613314565b9050600460009054906101000a90046001600160a01b03166001600160a01b031663453844b66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8391906132fb565b610a8c8261283c565b1015610ab6576040516358cbbf3f60e11b81526001600160a01b03871660048201526024016105ce565b6040805160028082526060820183526000928392919060208301908036833701905050905084841115610b765786610b00610afb87610af5848b612858565b90612858565b612928565b610b0a9190613314565b91508781600081518110610b2057610b20613382565b6001600160a01b039283166020918202929092010152600554825191169082906001908110610b5157610b51613382565b60200260200101906001600160a01b031690816001600160a01b031681525050610c07565b85610b85610afb898389612953565b610b8f9190613314565b60055482519193506001600160a01b0316908290600090610bb257610bb2613382565b60200260200101906001600160a01b031690816001600160a01b0316815250508781600181518110610be657610be6613382565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6007546001600160a01b0316638803dbee610c218461283c565b6000198430600a5442610c3491906132a9565b6040518663ffffffff1660e01b8152600401610c54959493929190613398565b6000604051808303816000875af1158015610c73573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c9b91908101906133d4565b50610ca588612a0e565b6040516001600160a01b0389169033907f6d9de21666ebb28b54314f1615b914f9807eaa05e80a86c76d97ec1c376d7e0390600090a35050505050505050565b600e546060908067ffffffffffffffff811115610d0457610d0461336c565b604051908082528060200260200182016040528015610d2d578160200160208202803683370190505b50915060005b81811015610da957600e805482908110610d4f57610d4f613382565b9060005260206000200160009054906101000a90046001600160a01b0316838281518110610d7f57610d7f613382565b6001600160a01b039092166020928302919091019091015280610da181613492565b915050610d33565b505090565b600280541415610dd157604051633ee5aeb560e01b815260040160405180910390fd5b6002805560055484906001600160a01b03808316911614801590610e0b57506001600160a01b0381166000908152600f6020526040902054155b15610e345760405163569695af60e01b81526001600160a01b03821660048201526024016105ce565b60055484906001600160a01b03808316911614801590610e6a57506001600160a01b0381166000908152600f6020526040902054155b15610e935760405163569695af60e01b81526001600160a01b03821660048201526024016105ce565b6000610ea86001600160a01b038816866124a7565b336000908152600b602090815260408083206001600160a01b038c168452909152902054909150811115610eef5760405163c0993c3760e01b815260040160405180910390fd5b856001600160a01b0316876001600160a01b03161415610f2d57604051630e9f73ab60e21b81526001600160a01b03881660048201526024016105ce565b600084610f3b576002610f3e565b60035b60ff1667ffffffffffffffff811115610f5957610f5961336c565b604051908082528060200260200182016040528015610f82578160200160208202803683370190505b5090508781600081518110610f9957610f99613382565b60200260200101906001600160a01b031690816001600160a01b03168152505084610fc45786610fd1565b6003546001600160a01b03165b81600181518110610fe457610fe4613382565b60200260200101906001600160a01b031690816001600160a01b031681525050841561103f57868160028151811061101e5761101e613382565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60075460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90611072908a9086906004016134ad565b600060405180830381865afa15801561108f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110b791908101906133d4565b905060006110fd82600184516110cd91906134ce565b815181106110dd576110dd613382565b60200260200101518a6001600160a01b03166124a790919063ffffffff16565b6007546009549192506001600160a01b0316906338ed1739908a90611149906111399061113290670de0b6b3a76400006134ce565b8690612858565b6001600160a01b038e1690612c6f565b8630600a544261115991906132a9565b6040518663ffffffff1660e01b8152600401611179959493929190613398565b6000604051808303816000875af1158015611198573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111c091908101906133d4565b915060006111fa836000815181106111da576111da613382565b60200260200101518c6001600160a01b03166124a790919063ffffffff16565b90506000611220846001865161121091906134ce565b815181106111da576111da613382565b905081600b6000336001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461127a91906134ce565b9091555050336000908152600b602090815260408083206001600160a01b038f168452909152812080548392906112b29084906132a9565b909155505060408051838152602081018390526001600160a01b03808e1692908f169133917fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062910160405180910390a45050600160025550505050505050505050565b6000546201000090046001600160a01b03163314611346576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b0381166000908152600f602052604090205415611388576040516382cce5f360e01b81526001600160a01b03821660048201526024016105ce565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ec91906134e5565b905060ff811661141a576040516316d13e4960e21b81526001600160a01b03831660048201526024016105ce565b601260ff82161115611453576040516321b3807960e11b81526001600160a01b038316600482015260ff821660248201526044016105ce565b61145e600e83612cfe565b156117375760075460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529083169063095ea7b3906044016020604051808303816000875af11580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db91906132c1565b506007546040805163c45a015560e01b815290516000926001600160a01b03169163c45a01559160048083019260209291908290030181865afa158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a91906132de565b60055460405163e6a4390560e01b81526001600160a01b03918216600482015285821660248201529192506000919083169063e6a4390590604401602060405180830381865afa1580156115a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c691906132de565b90506001600160a01b038116611651576005546040516364e329cb60e11b81526001600160a01b03918216600482015285821660248201529083169063c9c65396906044016020604051808303816000875af115801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e91906132de565b90505b60075460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b3906044016020604051808303816000875af11580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c991906132c1565b506001600160a01b0384166000818152600d602052604090819020805460ff19166001179055517f55011b433ad455f23aa134ee4f1fcd2190a063cb514134436b32358ead356ada9061172c9084906001600160a01b0391909116815260200190565b60405180910390a250505b5050565b6000546201000090046001600160a01b0316331461176c576040516305e7700560e51b815260040160405180910390fd5b60055481906001600160a01b03808316911614806117a157506001600160a01b0381166000908152600f602052604090205415155b156117ca57604051631af19dff60e01b81526001600160a01b03831660048201526024016105ce565b6008546040516370a0823160e01b8152306004820152611737916001600160a01b0390811691908516906370a0823190602401602060405180830381865afa15801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e91906132fb565b6001600160a01b0385169190612d6e565b600080600760009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c991906132de565b60055460405163e6a4390560e01b81526001600160a01b039182166004820152868216602482015291169063e6a4390590604401602060405180830381865afa15801561191a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193e91906132de565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a59190613526565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915081600014806119d7575080155b15611a6957600654604051630787c49960e21b81526001600160a01b038881166004830152611a5f921690631e1f126490602401602060405180830381865afa158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c91906132fb565b610af56001600160a01b038916886124a7565b9350505050611b7f565b6005546001600160a01b03808816911610611afe57600754604051632b58577b60e21b81526004810187905260248101849052604481018390526001600160a01b039091169063ad615dec90606401602060405180830381865afa158015611ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af991906132fb565b611b79565b600754604051632b58577b60e21b81526004810187905260248101839052604481018490526001600160a01b039091169063ad615dec90606401602060405180830381865afa158015611b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7991906132fb565b93505050505b92915050565b6000546201000090046001600160a01b03163314611bb6576040516305e7700560e51b815260040160405180910390fd5b600a5460408051918252602082018390527f801306575ef2eb7d5ec12da38bf892a7872d76caf0beb1cec0779abeb71ff3a9910160405180910390a1600a55565b600280541415611c1a57604051633ee5aeb560e01b815260040160405180910390fd5b600280556000611c336001600160a01b038416836124a7565b336000908152600b602090815260408083206001600160a01b0388168452909152902054909150811115611c7a5760405163c0993c3760e01b815260040160405180910390fd5b6000611c86848461184f565b60075460055460095492935060009283926001600160a01b039081169263e8e3370092911690899087908a90611ccf90611cc890670de0b6b3a76400006134ce565b8a90612858565b611d02611cf2600954670de0b6b3a7640000611ceb91906134ce565b8d90612858565b6001600160a01b038f1690612c6f565b30600a5442611d1191906132a9565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016060604051808303816000875af1158015611d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db19190613576565b9093509150611dcb90506001600160a01b038716836124a7565b336000908152600b602090815260408083206001600160a01b038b16845290915281208054909190611dfe9084906134ce565b9091555050336000908152600c602090815260408083206001600160a01b038a16845290915281208054839290611e369084906132a9565b90915550506040518481526001600160a01b0387169033907f0657e0c8fff72ae811b8683a3411c30ebb5098754ec5e814687711e97cbd6db29060200160405180910390a35050600160025550505050565b600280541415611eab57604051633ee5aeb560e01b815260040160405180910390fd5b60028055336000908152600c602090815260408083206001600160a01b0386168452909152902054811115611ef35760405163dc93df4560e01b815260040160405180910390fd5b600754600554600a546000926001600160a01b039081169263baa2abde9291169086908690869081903090611f2890426132a9565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e40160408051808303816000875af1158015611f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbe91906135a4565b9150611fd590506001600160a01b038416826124a7565b336000908152600b602090815260408083206001600160a01b0388168452909152812080549091906120089084906132a9565b9091555050336000908152600c602090815260408083206001600160a01b0387168452909152812080548492906120409084906134ce565b90915550506040518281526001600160a01b0384169033907f8c6e1d3aa13e82e61da9350057ab35ded0bd548b8905b82dfa012876992b8ef5906020015b60405180910390a35050600160025550565b60005460ff161580156120aa5750600054610100900460ff165b156120c857604051631ee1e30360e21b815260040160405180910390fd5b60005460ff161580156120e5576000805461ffff19166101011790555b6120ee33612d9e565b600380546001600160a01b03199081166001600160a01b038a81169190911790925560048054821689841617815560058054831689851690811790915560068054841689861617905560078054841688861690811790915560088054909416948716949094179092556611c37937e080006009556104b0600a5560405163095ea7b360e01b81529081019290925260001960248301529063095ea7b3906044016020604051808303816000875af11580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d191906132c1565b5080156121e3576000805460ff191690555b50505050505050565b6000546201000090046001600160a01b0316331461221d576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b0382166122445760405163604b48b960e11b815260040160405180910390fd5b6001600160a01b03821630141561226e576040516306b3e95d60e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b038416179055806122d157600080546040516001600160a01b03808616936201000090930416917fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb191a35050565b61173782612d9e565b6002805414156122fd57604051633ee5aeb560e01b815260040160405180910390fd5b600280556005546001600160a01b038381169116141561233b5760405163f099c8a560e01b81526001600160a01b03831660048201526024016105ce565b60006123506001600160a01b038416836124a7565b336000908152600b602090815260408083206001600160a01b03881684529091529020549091508111156123975760405163c0993c3760e01b815260040160405180910390fd5b336000908152600b602090815260408083206001600160a01b0387168452909152812080548392906123ca9084906134ce565b909155506123e490506001600160a01b0384163384612d6e565b6040518181526001600160a01b0384169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060200161207e565b6040516001600160a01b03808516602483015283166044820152606481018290526124a19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612e05565b50505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250c91906134e5565b6125179060126135c8565b61252290600a6136cf565b90508060011461253e5761253681846136de565b915050611b7f565b509092915050565b6001600160a01b038116600090815260018301602052604081205480612570576000915050611b7f565b600061257d6001836134ce565b90506000600161258b875490565b61259591906134ce565b90508082146126215760008660000182815481106125b5576125b5613382565b60009182526020909120015487546001600160a01b03909116915081908890859081106125e4576125e4613382565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018801909152604090208390555b8554869080612632576126326136fd565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260018881019091526040822091909155935050505092915050565b6000806000600760009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fb91906132de565b60055460405163e6a4390560e01b81526001600160a01b039182166004820152868216602482015291169063e6a4390590604401602060405180830381865afa15801561274c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277091906132de565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156127b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d79190613526565b506005546dffffffffffffffffffffffffffff9283169450911691506001600160a01b038088169116101561281157819450809350612818565b8193508094505b505050915091565b600061283583670de0b6b3a764000084612953565b9392505050565b6000808212156128545761284f82613713565b611b7f565b5090565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106128aa5760405163072fa3c960e31b815260048101829052670de0b6b3a764000060248201526044016105ce565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826128e45780670de0b6b3a7640000850401945050505050611b7f565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b60008161293757506000919050565b61294082612e8f565b611b7f90633b9aca006136de565b919050565b600080806000198587098587029250828110838203039150508381106129965760405163072fa3c960e31b815260048101829052602481018590526044016105ce565b806129a657508290049050612835565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080612a1a8361267f565b9092509050612a326001600160a01b038416826124a7565b905081600460009054906101000a90046001600160a01b03166001600160a01b031663b56cf0116040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac91906132fb565b1115612c6a57600480546040805163b56cf01160e01b8152905160009386936001600160a01b03169263b56cf01192818301926020928290030181865afa158015612afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1f91906132fb565b612b2991906134ce565b90506000612b54612b44612b3d8686612820565b8490612820565b6001600160a01b03871690612c6f565b6007546005546009549293506001600160a01b039182169263e8e337009290911690889086908690612b9990612b9290670de0b6b3a76400006134ce565b8990612858565b612bb5611139600954670de0b6b3a7640000611cc891906134ce565b30600a5442612bc491906132a9565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016060604051808303816000875af1158015612c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c649190613576565b50505050505b505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd491906134e5565b612cdf9060126135c8565b612cea90600a6136cf565b90508060011461253e576125368184613730565b6001600160a01b038116600090815260018301602052604081205415612d2657506000611b7f565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6040516001600160a01b038316602482015260448101829052612c6a90849063a9059cbb60e01b90606401612455565b6000805475ffffffffffffffffffffffffffffffffffffffff00001916620100006001600160a01b0384811682810293909317808555604051939492900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e9190a350565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201528290600090612e54906001600160a01b038416908590612f9f565b8051909150156124a15780806020019051810190612e7291906132c1565b6124a157604051639b8d506160e01b815260040160405180910390fd5b600081612e9e57506000919050565b506001817001000000000000000000000000000000008110612ec55760409190911b9060801c5b680100000000000000008110612ee05760209190911b9060401c5b6401000000008110612ef75760109190911b9060201c5b620100008110612f0c5760089190911b9060101c5b6101008110612f205760049190911b9060081c5b60108110612f335760029190911b9060041c5b60088110612f4357600182901b91505b60075b8015612f78576001612f588486613730565b612f6290856132a9565b901c925080612f7081613752565b915050612f46565b6000612f848486613730565b905080841015612f945783612f96565b805b95945050505050565b6060833b612fcb5760405163dc5dd7fd60e01b81526001600160a01b03851660048201526024016105ce565b600080856001600160a01b031685604051612fe69190613795565b6000604051808303816000865af19150503d8060008114613023576040519150601f19603f3d011682016040523d82523d6000602084013e613028565b606091505b5091509150613038828286613042565b9695505050505050565b60608315613051575081612835565b8251156130615782518060208501fd5b8160405162461bcd60e51b81526004016105ce91906137b1565b60006020828403121561308d57600080fd5b5035919050565b6001600160a01b038116811461094057600080fd5b600080604083850312156130bc57600080fd5b82356130c781613094565b946020939093013593505050565b6000602082840312156130e757600080fd5b813561283581613094565b600081518084526020808501945080840160005b8381101561312b5781516001600160a01b031687529582019590820190600101613106565b509495945050505050565b60208152600061283560208301846130f2565b801515811461094057600080fd5b6000806000806080858703121561316d57600080fd5b843561317881613094565b9350602085013561318881613094565b925060408501359150606085013561319f81613149565b939692955090935050565b600080604083850312156131bd57600080fd5b82356131c881613094565b915060208301356131d881613094565b809150509250929050565b60008060008060008060c087890312156131fc57600080fd5b863561320781613094565b9550602087013561321781613094565b9450604087013561322781613094565b9350606087013561323781613094565b9250608087013561324781613094565b915060a087013561325781613094565b809150509295509295509295565b6000806040838503121561327857600080fd5b823561328381613094565b915060208301356131d881613149565b634e487b7160e01b600052601160045260246000fd5b600082198211156132bc576132bc613293565b500190565b6000602082840312156132d357600080fd5b815161283581613149565b6000602082840312156132f057600080fd5b815161283581613094565b60006020828403121561330d57600080fd5b5051919050565b60008083128015600160ff1b85018412161561333257613332613293565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561336657613366613293565b50500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b85815284602082015260a0604082015260006133b760a08301866130f2565b6001600160a01b0394909416606083015250608001529392505050565b600060208083850312156133e757600080fd5b825167ffffffffffffffff808211156133ff57600080fd5b818501915085601f83011261341357600080fd5b8151818111156134255761342561336c565b8060051b604051601f19603f8301168101818110858211171561344a5761344a61336c565b60405291825284820192508381018501918883111561346857600080fd5b938501935b828510156134865784518452938501939285019261346d565b98975050505050505050565b60006000198214156134a6576134a6613293565b5060010190565b8281526040602082015260006134c660408301846130f2565b949350505050565b6000828210156134e0576134e0613293565b500390565b6000602082840312156134f757600080fd5b815160ff8116811461283557600080fd5b80516dffffffffffffffffffffffffffff8116811461294e57600080fd5b60008060006060848603121561353b57600080fd5b61354484613508565b925061355260208501613508565b9150604084015163ffffffff8116811461356b57600080fd5b809150509250925092565b60008060006060848603121561358b57600080fd5b8351925060208401519150604084015190509250925092565b600080604083850312156135b757600080fd5b505080516020909101519092909150565b600060ff821660ff8416808210156135e2576135e2613293565b90039392505050565b600181815b8085111561362657816000190482111561360c5761360c613293565b8085161561361957918102915b93841c93908002906135f0565b509250929050565b60008261363d57506001611b7f565b8161364a57506000611b7f565b8160018114613660576002811461366a57613686565b6001915050611b7f565b60ff84111561367b5761367b613293565b50506001821b611b7f565b5060208310610133831016604e8410600b84101617156136a9575081810a611b7f565b6136b383836135eb565b80600019048211156136c7576136c7613293565b029392505050565b600061283560ff84168361362e565b60008160001904831182151516156136f8576136f8613293565b500290565b634e487b7160e01b600052603160045260246000fd5b6000600160ff1b82141561372957613729613293565b5060000390565b60008261374d57634e487b7160e01b600052601260045260246000fd5b500490565b60008161376157613761613293565b506000190190565b60005b8381101561378457818101518382015260200161376c565b838111156124a15750506000910152565b600082516137a7818460208701613769565b9190910192915050565b60208152600082518060208401526137d0816040850160208701613769565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638f79306e11610104578063cc2a9a5b116100a2578063e7f3028c11610071578063e7f3028c14610415578063e9cbd82214610428578063f2f4eb261461043b578063f3fef3a31461044e57600080fd5b8063cc2a9a5b146103d3578063d03153aa146103e6578063ddc12526146103ef578063e3056a341461040257600080fd5b8063b2217281116100de578063b22172811461034f578063b9b8c2461461037a578063bb5043171461038d578063c14edd79146103a057600080fd5b80638f79306e1461032057806393ad9f1714610333578063942dbff41461034657600080fd5b80634bd84701116101715780637e83f7d71161014b5780637e83f7d7146102ae57806385881e2a146102c1578063863a03e0146102d45780638f601f66146102e757600080fd5b80634bd8470114610273578063570ca735146102865780635e6fdf431461029957600080fd5b8063238efcbc116101ad578063238efcbc146102325780632630c12f1461023a57806347e7ef241461024d57806348be77191461026057600080fd5b80630c340a24146101d4578063117da1ee1461020a5780631694505e1461021f575b600080fd5b6000546101ed906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021d61021836600461307b565b610461565b005b6007546101ed906001600160a01b031681565b61021d6104d3565b6006546101ed906001600160a01b031681565b61021d61025b3660046130a9565b610568565b61021d61026e3660046130d5565b610689565b61021d6102813660046130d5565b610943565b6008546101ed906001600160a01b031681565b6102a1610ce5565b6040516102019190613136565b61021d6102bc366004613157565b610dae565b61021d6102cf3660046130d5565b611315565b61021d6102e23660046130d5565b61173b565b6103126102f53660046131aa565b600b60209081526000928352604080842090915290825290205481565b604051908152602001610201565b61031261032e3660046130a9565b61184f565b61021d61034136600461307b565b611b85565b610312600a5481565b61031261035d3660046131aa565b600c60209081526000928352604080842090915290825290205481565b61021d6103883660046130a9565b611bf7565b61021d61039b3660046130a9565b611e88565b6103c36103ae3660046130d5565b600d6020526000908152604090205460ff1681565b6040519015158152602001610201565b61021d6103e13660046131e3565b612090565b61031260095481565b61021d6103fd366004613265565b6121ec565b6001546101ed906001600160a01b031681565b6003546101ed906001600160a01b031681565b6005546101ed906001600160a01b031681565b6004546101ed906001600160a01b031681565b61021d61045c3660046130a9565b6122da565b6000546201000090046001600160a01b03163314610492576040516305e7700560e51b815260040160405180910390fd5b60095460408051918252602082018390527fddd31550b26e9ef8ade466958be83ff8a014d9b4f36d546b61a6847a45306575910160405180910390a1600955565b6001546001600160a01b031633146104fe5760405163aec80d4b60e01b815260040160405180910390fd5b60015460008054620100006001600160a01b0393841681810275ffffffffffffffffffffffffffffffffffffffff00001990931692909217808455604051929491900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e91a3565b60028054141561058b57604051633ee5aeb560e01b815260040160405180910390fd5b600280556001600160a01b0382166000908152600f602052604090205482906105d75760405163497e1e0360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6105ec6001600160a01b038416333085612421565b60006106016001600160a01b038516846124a7565b336000908152600b602090815260408083206001600160a01b03891684529091528120805492935083929091906106399084906132a9565b90915550506040518181526001600160a01b0385169033907f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f629060200160405180910390a3505060016002555050565b6000546201000090046001600160a01b031633146106ba576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b0381166000908152600f60205260409020546106fb5760405163635c3e1f60e11b81526001600160a01b03821660048201526024016105ce565b610706600e82612546565b156109405760075460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529082169063095ea7b3906044016020604051808303816000875af115801561075e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078291906132c1565b506007546040805163c45a015560e01b815290516000926001600160a01b03169163c45a01559160048083019260209291908290030181865afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f191906132de565b60055460405163e6a4390560e01b81526001600160a01b03918216600482015284821660248201529192506000919083169063e6a4390590604401602060405180830381865afa158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d91906132de565b90506001600160a01b038116156108f75760075460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529082169063095ea7b3906044016020604051808303816000875af11580156108d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f591906132c1565b505b6001600160a01b0383166000818152600d6020526040808220805460ff19169055517fbd6c0ac05a911841e71daa23bb8022779f3957fad4fa3546eb22a1782c747c839190a250505b50565b60008061094f8361267f565b90925090506109676001600160a01b038416826124a7565b600654604051630787c49960e21b81526001600160a01b03868116600483015292935060009290911690631e1f126490602401602060405180830381865afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db91906132fb565b905060006109e98484612820565b90506000670de0b6b3a7640000610a008385612820565b610a0a9190613314565b9050600460009054906101000a90046001600160a01b03166001600160a01b031663453844b66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8391906132fb565b610a8c8261283c565b1015610ab6576040516358cbbf3f60e11b81526001600160a01b03871660048201526024016105ce565b6040805160028082526060820183526000928392919060208301908036833701905050905084841115610b765786610b00610afb87610af5848b612858565b90612858565b612928565b610b0a9190613314565b91508781600081518110610b2057610b20613382565b6001600160a01b039283166020918202929092010152600554825191169082906001908110610b5157610b51613382565b60200260200101906001600160a01b031690816001600160a01b031681525050610c07565b85610b85610afb898389612953565b610b8f9190613314565b60055482519193506001600160a01b0316908290600090610bb257610bb2613382565b60200260200101906001600160a01b031690816001600160a01b0316815250508781600181518110610be657610be6613382565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6007546001600160a01b0316638803dbee610c218461283c565b6000198430600a5442610c3491906132a9565b6040518663ffffffff1660e01b8152600401610c54959493929190613398565b6000604051808303816000875af1158015610c73573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c9b91908101906133d4565b50610ca588612a0e565b6040516001600160a01b0389169033907f6d9de21666ebb28b54314f1615b914f9807eaa05e80a86c76d97ec1c376d7e0390600090a35050505050505050565b600e546060908067ffffffffffffffff811115610d0457610d0461336c565b604051908082528060200260200182016040528015610d2d578160200160208202803683370190505b50915060005b81811015610da957600e805482908110610d4f57610d4f613382565b9060005260206000200160009054906101000a90046001600160a01b0316838281518110610d7f57610d7f613382565b6001600160a01b039092166020928302919091019091015280610da181613492565b915050610d33565b505090565b600280541415610dd157604051633ee5aeb560e01b815260040160405180910390fd5b6002805560055484906001600160a01b03808316911614801590610e0b57506001600160a01b0381166000908152600f6020526040902054155b15610e345760405163569695af60e01b81526001600160a01b03821660048201526024016105ce565b60055484906001600160a01b03808316911614801590610e6a57506001600160a01b0381166000908152600f6020526040902054155b15610e935760405163569695af60e01b81526001600160a01b03821660048201526024016105ce565b6000610ea86001600160a01b038816866124a7565b336000908152600b602090815260408083206001600160a01b038c168452909152902054909150811115610eef5760405163c0993c3760e01b815260040160405180910390fd5b856001600160a01b0316876001600160a01b03161415610f2d57604051630e9f73ab60e21b81526001600160a01b03881660048201526024016105ce565b600084610f3b576002610f3e565b60035b60ff1667ffffffffffffffff811115610f5957610f5961336c565b604051908082528060200260200182016040528015610f82578160200160208202803683370190505b5090508781600081518110610f9957610f99613382565b60200260200101906001600160a01b031690816001600160a01b03168152505084610fc45786610fd1565b6003546001600160a01b03165b81600181518110610fe457610fe4613382565b60200260200101906001600160a01b031690816001600160a01b031681525050841561103f57868160028151811061101e5761101e613382565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60075460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90611072908a9086906004016134ad565b600060405180830381865afa15801561108f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110b791908101906133d4565b905060006110fd82600184516110cd91906134ce565b815181106110dd576110dd613382565b60200260200101518a6001600160a01b03166124a790919063ffffffff16565b6007546009549192506001600160a01b0316906338ed1739908a90611149906111399061113290670de0b6b3a76400006134ce565b8690612858565b6001600160a01b038e1690612c6f565b8630600a544261115991906132a9565b6040518663ffffffff1660e01b8152600401611179959493929190613398565b6000604051808303816000875af1158015611198573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111c091908101906133d4565b915060006111fa836000815181106111da576111da613382565b60200260200101518c6001600160a01b03166124a790919063ffffffff16565b90506000611220846001865161121091906134ce565b815181106111da576111da613382565b905081600b6000336001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461127a91906134ce565b9091555050336000908152600b602090815260408083206001600160a01b038f168452909152812080548392906112b29084906132a9565b909155505060408051838152602081018390526001600160a01b03808e1692908f169133917fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062910160405180910390a45050600160025550505050505050505050565b6000546201000090046001600160a01b03163314611346576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b0381166000908152600f602052604090205415611388576040516382cce5f360e01b81526001600160a01b03821660048201526024016105ce565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ec91906134e5565b905060ff811661141a576040516316d13e4960e21b81526001600160a01b03831660048201526024016105ce565b601260ff82161115611453576040516321b3807960e11b81526001600160a01b038316600482015260ff821660248201526044016105ce565b61145e600e83612cfe565b156117375760075460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529083169063095ea7b3906044016020604051808303816000875af11580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db91906132c1565b506007546040805163c45a015560e01b815290516000926001600160a01b03169163c45a01559160048083019260209291908290030181865afa158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a91906132de565b60055460405163e6a4390560e01b81526001600160a01b03918216600482015285821660248201529192506000919083169063e6a4390590604401602060405180830381865afa1580156115a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c691906132de565b90506001600160a01b038116611651576005546040516364e329cb60e11b81526001600160a01b03918216600482015285821660248201529083169063c9c65396906044016020604051808303816000875af115801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e91906132de565b90505b60075460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b3906044016020604051808303816000875af11580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c991906132c1565b506001600160a01b0384166000818152600d602052604090819020805460ff19166001179055517f55011b433ad455f23aa134ee4f1fcd2190a063cb514134436b32358ead356ada9061172c9084906001600160a01b0391909116815260200190565b60405180910390a250505b5050565b6000546201000090046001600160a01b0316331461176c576040516305e7700560e51b815260040160405180910390fd5b60055481906001600160a01b03808316911614806117a157506001600160a01b0381166000908152600f602052604090205415155b156117ca57604051631af19dff60e01b81526001600160a01b03831660048201526024016105ce565b6008546040516370a0823160e01b8152306004820152611737916001600160a01b0390811691908516906370a0823190602401602060405180830381865afa15801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e91906132fb565b6001600160a01b0385169190612d6e565b600080600760009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c991906132de565b60055460405163e6a4390560e01b81526001600160a01b039182166004820152868216602482015291169063e6a4390590604401602060405180830381865afa15801561191a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193e91906132de565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a59190613526565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915081600014806119d7575080155b15611a6957600654604051630787c49960e21b81526001600160a01b038881166004830152611a5f921690631e1f126490602401602060405180830381865afa158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c91906132fb565b610af56001600160a01b038916886124a7565b9350505050611b7f565b6005546001600160a01b03808816911610611afe57600754604051632b58577b60e21b81526004810187905260248101849052604481018390526001600160a01b039091169063ad615dec90606401602060405180830381865afa158015611ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af991906132fb565b611b79565b600754604051632b58577b60e21b81526004810187905260248101839052604481018490526001600160a01b039091169063ad615dec90606401602060405180830381865afa158015611b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7991906132fb565b93505050505b92915050565b6000546201000090046001600160a01b03163314611bb6576040516305e7700560e51b815260040160405180910390fd5b600a5460408051918252602082018390527f801306575ef2eb7d5ec12da38bf892a7872d76caf0beb1cec0779abeb71ff3a9910160405180910390a1600a55565b600280541415611c1a57604051633ee5aeb560e01b815260040160405180910390fd5b600280556000611c336001600160a01b038416836124a7565b336000908152600b602090815260408083206001600160a01b0388168452909152902054909150811115611c7a5760405163c0993c3760e01b815260040160405180910390fd5b6000611c86848461184f565b60075460055460095492935060009283926001600160a01b039081169263e8e3370092911690899087908a90611ccf90611cc890670de0b6b3a76400006134ce565b8a90612858565b611d02611cf2600954670de0b6b3a7640000611ceb91906134ce565b8d90612858565b6001600160a01b038f1690612c6f565b30600a5442611d1191906132a9565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016060604051808303816000875af1158015611d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db19190613576565b9093509150611dcb90506001600160a01b038716836124a7565b336000908152600b602090815260408083206001600160a01b038b16845290915281208054909190611dfe9084906134ce565b9091555050336000908152600c602090815260408083206001600160a01b038a16845290915281208054839290611e369084906132a9565b90915550506040518481526001600160a01b0387169033907f0657e0c8fff72ae811b8683a3411c30ebb5098754ec5e814687711e97cbd6db29060200160405180910390a35050600160025550505050565b600280541415611eab57604051633ee5aeb560e01b815260040160405180910390fd5b60028055336000908152600c602090815260408083206001600160a01b0386168452909152902054811115611ef35760405163dc93df4560e01b815260040160405180910390fd5b600754600554600a546000926001600160a01b039081169263baa2abde9291169086908690869081903090611f2890426132a9565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e40160408051808303816000875af1158015611f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbe91906135a4565b9150611fd590506001600160a01b038416826124a7565b336000908152600b602090815260408083206001600160a01b0388168452909152812080549091906120089084906132a9565b9091555050336000908152600c602090815260408083206001600160a01b0387168452909152812080548492906120409084906134ce565b90915550506040518281526001600160a01b0384169033907f8c6e1d3aa13e82e61da9350057ab35ded0bd548b8905b82dfa012876992b8ef5906020015b60405180910390a35050600160025550565b60005460ff161580156120aa5750600054610100900460ff165b156120c857604051631ee1e30360e21b815260040160405180910390fd5b60005460ff161580156120e5576000805461ffff19166101011790555b6120ee33612d9e565b600380546001600160a01b03199081166001600160a01b038a81169190911790925560048054821689841617815560058054831689851690811790915560068054841689861617905560078054841688861690811790915560088054909416948716949094179092556611c37937e080006009556104b0600a5560405163095ea7b360e01b81529081019290925260001960248301529063095ea7b3906044016020604051808303816000875af11580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d191906132c1565b5080156121e3576000805460ff191690555b50505050505050565b6000546201000090046001600160a01b0316331461221d576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b0382166122445760405163604b48b960e11b815260040160405180910390fd5b6001600160a01b03821630141561226e576040516306b3e95d60e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b038416179055806122d157600080546040516001600160a01b03808616936201000090930416917fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb191a35050565b61173782612d9e565b6002805414156122fd57604051633ee5aeb560e01b815260040160405180910390fd5b600280556005546001600160a01b038381169116141561233b5760405163f099c8a560e01b81526001600160a01b03831660048201526024016105ce565b60006123506001600160a01b038416836124a7565b336000908152600b602090815260408083206001600160a01b03881684529091529020549091508111156123975760405163c0993c3760e01b815260040160405180910390fd5b336000908152600b602090815260408083206001600160a01b0387168452909152812080548392906123ca9084906134ce565b909155506123e490506001600160a01b0384163384612d6e565b6040518181526001600160a01b0384169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060200161207e565b6040516001600160a01b03808516602483015283166044820152606481018290526124a19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612e05565b50505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250c91906134e5565b6125179060126135c8565b61252290600a6136cf565b90508060011461253e5761253681846136de565b915050611b7f565b509092915050565b6001600160a01b038116600090815260018301602052604081205480612570576000915050611b7f565b600061257d6001836134ce565b90506000600161258b875490565b61259591906134ce565b90508082146126215760008660000182815481106125b5576125b5613382565b60009182526020909120015487546001600160a01b03909116915081908890859081106125e4576125e4613382565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018801909152604090208390555b8554869080612632576126326136fd565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260018881019091526040822091909155935050505092915050565b6000806000600760009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fb91906132de565b60055460405163e6a4390560e01b81526001600160a01b039182166004820152868216602482015291169063e6a4390590604401602060405180830381865afa15801561274c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277091906132de565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156127b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d79190613526565b506005546dffffffffffffffffffffffffffff9283169450911691506001600160a01b038088169116101561281157819450809350612818565b8193508094505b505050915091565b600061283583670de0b6b3a764000084612953565b9392505050565b6000808212156128545761284f82613713565b611b7f565b5090565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106128aa5760405163072fa3c960e31b815260048101829052670de0b6b3a764000060248201526044016105ce565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826128e45780670de0b6b3a7640000850401945050505050611b7f565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b60008161293757506000919050565b61294082612e8f565b611b7f90633b9aca006136de565b919050565b600080806000198587098587029250828110838203039150508381106129965760405163072fa3c960e31b815260048101829052602481018590526044016105ce565b806129a657508290049050612835565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080612a1a8361267f565b9092509050612a326001600160a01b038416826124a7565b905081600460009054906101000a90046001600160a01b03166001600160a01b031663b56cf0116040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac91906132fb565b1115612c6a57600480546040805163b56cf01160e01b8152905160009386936001600160a01b03169263b56cf01192818301926020928290030181865afa158015612afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1f91906132fb565b612b2991906134ce565b90506000612b54612b44612b3d8686612820565b8490612820565b6001600160a01b03871690612c6f565b6007546005546009549293506001600160a01b039182169263e8e337009290911690889086908690612b9990612b9290670de0b6b3a76400006134ce565b8990612858565b612bb5611139600954670de0b6b3a7640000611cc891906134ce565b30600a5442612bc491906132a9565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016060604051808303816000875af1158015612c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c649190613576565b50505050505b505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd491906134e5565b612cdf9060126135c8565b612cea90600a6136cf565b90508060011461253e576125368184613730565b6001600160a01b038116600090815260018301602052604081205415612d2657506000611b7f565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6040516001600160a01b038316602482015260448101829052612c6a90849063a9059cbb60e01b90606401612455565b6000805475ffffffffffffffffffffffffffffffffffffffff00001916620100006001600160a01b0384811682810293909317808555604051939492900416917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e9190a350565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908201528290600090612e54906001600160a01b038416908590612f9f565b8051909150156124a15780806020019051810190612e7291906132c1565b6124a157604051639b8d506160e01b815260040160405180910390fd5b600081612e9e57506000919050565b506001817001000000000000000000000000000000008110612ec55760409190911b9060801c5b680100000000000000008110612ee05760209190911b9060401c5b6401000000008110612ef75760109190911b9060201c5b620100008110612f0c5760089190911b9060101c5b6101008110612f205760049190911b9060081c5b60108110612f335760029190911b9060041c5b60088110612f4357600182901b91505b60075b8015612f78576001612f588486613730565b612f6290856132a9565b901c925080612f7081613752565b915050612f46565b6000612f848486613730565b905080841015612f945783612f96565b805b95945050505050565b6060833b612fcb5760405163dc5dd7fd60e01b81526001600160a01b03851660048201526024016105ce565b600080856001600160a01b031685604051612fe69190613795565b6000604051808303816000865af19150503d8060008114613023576040519150601f19603f3d011682016040523d82523d6000602084013e613028565b606091505b5091509150613038828286613042565b9695505050505050565b60608315613051575081612835565b8251156130615782518060208501fd5b8160405162461bcd60e51b81526004016105ce91906137b1565b60006020828403121561308d57600080fd5b5035919050565b6001600160a01b038116811461094057600080fd5b600080604083850312156130bc57600080fd5b82356130c781613094565b946020939093013593505050565b6000602082840312156130e757600080fd5b813561283581613094565b600081518084526020808501945080840160005b8381101561312b5781516001600160a01b031687529582019590820190600101613106565b509495945050505050565b60208152600061283560208301846130f2565b801515811461094057600080fd5b6000806000806080858703121561316d57600080fd5b843561317881613094565b9350602085013561318881613094565b925060408501359150606085013561319f81613149565b939692955090935050565b600080604083850312156131bd57600080fd5b82356131c881613094565b915060208301356131d881613094565b809150509250929050565b60008060008060008060c087890312156131fc57600080fd5b863561320781613094565b9550602087013561321781613094565b9450604087013561322781613094565b9350606087013561323781613094565b9250608087013561324781613094565b915060a087013561325781613094565b809150509295509295509295565b6000806040838503121561327857600080fd5b823561328381613094565b915060208301356131d881613149565b634e487b7160e01b600052601160045260246000fd5b600082198211156132bc576132bc613293565b500190565b6000602082840312156132d357600080fd5b815161283581613149565b6000602082840312156132f057600080fd5b815161283581613094565b60006020828403121561330d57600080fd5b5051919050565b60008083128015600160ff1b85018412161561333257613332613293565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561336657613366613293565b50500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b85815284602082015260a0604082015260006133b760a08301866130f2565b6001600160a01b0394909416606083015250608001529392505050565b600060208083850312156133e757600080fd5b825167ffffffffffffffff808211156133ff57600080fd5b818501915085601f83011261341357600080fd5b8151818111156134255761342561336c565b8060051b604051601f19603f8301168101818110858211171561344a5761344a61336c565b60405291825284820192508381018501918883111561346857600080fd5b938501935b828510156134865784518452938501939285019261346d565b98975050505050505050565b60006000198214156134a6576134a6613293565b5060010190565b8281526040602082015260006134c660408301846130f2565b949350505050565b6000828210156134e0576134e0613293565b500390565b6000602082840312156134f757600080fd5b815160ff8116811461283557600080fd5b80516dffffffffffffffffffffffffffff8116811461294e57600080fd5b60008060006060848603121561353b57600080fd5b61354484613508565b925061355260208501613508565b9150604084015163ffffffff8116811461356b57600080fd5b809150509250925092565b60008060006060848603121561358b57600080fd5b8351925060208401519150604084015190509250925092565b600080604083850312156135b757600080fd5b505080516020909101519092909150565b600060ff821660ff8416808210156135e2576135e2613293565b90039392505050565b600181815b8085111561362657816000190482111561360c5761360c613293565b8085161561361957918102915b93841c93908002906135f0565b509250929050565b60008261363d57506001611b7f565b8161364a57506000611b7f565b8160018114613660576002811461366a57613686565b6001915050611b7f565b60ff84111561367b5761367b613293565b50506001821b611b7f565b5060208310610133831016604e8410600b84101617156136a9575081810a611b7f565b6136b383836135eb565b80600019048211156136c7576136c7613293565b029392505050565b600061283560ff84168361362e565b60008160001904831182151516156136f8576136f8613293565b500290565b634e487b7160e01b600052603160045260246000fd5b6000600160ff1b82141561372957613729613293565b5060000390565b60008261374d57634e487b7160e01b600052601260045260246000fd5b500490565b60008161376157613761613293565b506000190190565b60005b8381101561378457818101518382015260200161376c565b838111156124a15750506000910152565b600082516137a7818460208701613769565b9190910192915050565b60208152600082518060208401526137d0816040850160208701613769565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "errors": {
      "ExchangeFundDepositableTokenAlreadyListed(address)": [
        {
          "details": "Thrown when trying to list depositable token that's already listed.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundDepositableTokenNotListed(address)": [
        {
          "details": "Thrown when trying to unlist depositable token that's not listed.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundDepositableTokenTooLargeDecimals(address,uint8)": [
        {
          "details": "Thrown when trying to list depositable token that has too large decimals.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundDepositableTokenZeroDecimals(address)": [
        {
          "details": "Thrown when trying to list depositable token that has zero decimals.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundNoNeedToService(address)": [
        {
          "details": "Thrown when there's no need to service the `token`/stablecoin pair cause the difference between target and pair price does not exceed servicing threshold.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundTokenNotAllowedToBeDeposited(address)": [
        {
          "details": "Thrown when interacting with a token that's not allowed to be deposited.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundTokenNotAllowedToBeSalvaged(address)": [
        {
          "details": "Thrown when trying to salvage one of depositable tokens or stablecoin.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundTokenNotAllowedToBeSwapped(address)": [
        {
          "details": "Thrown when trying to swap token that's not allowed to be swapped.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ],
      "ExchangeFundTokenNotAllowedToBeWithdrawn(address)": [
        {
          "details": "Thrown when interacting with a token that's not allowed to be withdrawn.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6857,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "initializing",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6859,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "initialized",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4836,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4838,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6575,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3367,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "wrappedNativeCurrency",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)5056"
      },
      {
        "astId": 3370,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "core",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICore)2970"
      },
      {
        "astId": 3373,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "stablecoin",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)5056"
      },
      {
        "astId": 3376,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "priceOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPriceOracle)5146"
      },
      {
        "astId": 3379,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IUniswapV2Router)5330"
      },
      {
        "astId": 3381,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "operator",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3383,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "slippageTolerance",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3385,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "swapDeadline",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3392,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "deposits",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)5056,t_uint256))"
      },
      {
        "astId": 3399,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "liquidity",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)5056,t_uint256))"
      },
      {
        "astId": 3404,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "depositableTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_contract(IERC20)5056,t_bool)"
      },
      {
        "astId": 3407,
        "contract": "contracts/ExchangeFund.sol:ExchangeFund",
        "label": "depositableTokensSet",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Set)5887_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)2970": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)5056": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)5146": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router)5330": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)5056,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)5056,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)5056,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)5056",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)5056,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)5056",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)5887_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableAddressSet.Set",
        "members": [
          {
            "astId": 5882,
            "contract": "contracts/ExchangeFund.sol:ExchangeFund",
            "label": "elements",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5886,
            "contract": "contracts/ExchangeFund.sol:ExchangeFund",
            "label": "indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}