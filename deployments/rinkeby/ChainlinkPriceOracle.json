{
  "address": "0x6b25356A930Ac5299B86E76012192A7b47C48F41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_wrappedNativeCurrency",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "FixedPointMathMulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedCantGoverItself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedGovernorZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyPendingGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "name": "PriceOracleInvalidPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceOracleStalePrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "PriceOracleTokenUnknown",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IChainlinkAggregator",
          "name": "aggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isQuoteNative",
          "type": "bool"
        }
      ],
      "name": "AggregatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernanceTransited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceTransition",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getNormalizedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "normalizedPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nativeAggregators",
      "outputs": [
        {
          "internalType": "contract IChainlinkAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract IChainlinkAggregator",
          "name": "aggregator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isQuoteNative",
          "type": "bool"
        }
      ],
      "name": "setAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "transitGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usdAggregators",
      "outputs": [
        {
          "internalType": "contract IChainlinkAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeCurrency",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb542ee5ecc0e11582dff0e7fc549ce8f3f6456aef75d6fb537a8df6ca7c1ad2",
  "receipt": {
    "to": null,
    "from": "0x21309DA9AD64eA82431758B27cbD63E5d53A556c",
    "contractAddress": "0x6b25356A930Ac5299B86E76012192A7b47C48F41",
    "transactionIndex": 55,
    "gasUsed": "531007",
    "logsBloom": "0x
    "blockHash": "0xc9e1f2e7d7bd5b2eb0e34458628b2714ccea7d6b3f003cc71e7d02d687e66b29",
    "transactionHash": "0xeb542ee5ecc0e11582dff0e7fc549ce8f3f6456aef75d6fb537a8df6ca7c1ad2",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 9227289,
        "transactionHash": "0xeb542ee5ecc0e11582dff0e7fc549ce8f3f6456aef75d6fb537a8df6ca7c1ad2",
        "address": "0x6b25356A930Ac5299B86E76012192A7b47C48F41",
        "topics": [
          "0xc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb1",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021309da9ad64ea82431758b27cbd63e5d53a556c"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0xc9e1f2e7d7bd5b2eb0e34458628b2714ccea7d6b3f003cc71e7d02d687e66b29"
      },
      {
        "transactionIndex": 55,
        "blockNumber": 9227289,
        "transactionHash": "0xeb542ee5ecc0e11582dff0e7fc549ce8f3f6456aef75d6fb537a8df6ca7c1ad2",
        "address": "0x6b25356A930Ac5299B86E76012192A7b47C48F41",
        "topics": [
          "0x564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021309da9ad64ea82431758b27cbd63e5d53a556c"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0xc9e1f2e7d7bd5b2eb0e34458628b2714ccea7d6b3f003cc71e7d02d687e66b29"
      }
    ],
    "blockNumber": 9227289,
    "cumulativeGasUsed": "18091782",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xc778417E063141139Fce010982780140Aa0cD5Ab"],
  "solcInputHash": "ee81eac0b6770a7f9008729207f6bf31",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_wrappedNativeCurrency\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FixedPointMathMulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedCantGoverItself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedGovernorZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyPendingGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"PriceOracleInvalidPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceOracleStalePrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceOracleTokenUnknown\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isQuoteNative\",\"type\":\"bool\"}],\"name\":\"AggregatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernanceTransited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernanceTransition\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getNormalizedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"normalizedPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nativeAggregators\",\"outputs\":[{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isQuoteNative\",\"type\":\"bool\"}],\"name\":\"setAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transitGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdAggregators\",\"outputs\":[{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"PriceOracleInvalidPrice(address,int256)\":[{\"params\":{\"price\":\"Provided price.\",\"token\":\"The address of the token contract.\"}}],\"PriceOracleStalePrice(address,uint256)\":[{\"params\":{\"price\":\"Provided price.\",\"token\":\"The address of the token contract.\"}}],\"PriceOracleTokenUnknown(address)\":[{\"params\":{\"token\":\"The address of the token contract.\"}}]},\"kind\":\"dev\",\"methods\":{\"getNormalizedPrice(address)\":{\"params\":{\"token\":\"The address of the token contract.\"},\"returns\":{\"normalizedPrice\":\"Normalized price.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PriceOracleInvalidPrice(address,int256)\":[{\"notice\":\"Thrown when oracle provide negative, zero or in other ways invalid price `price` for `token` token.\"}],\"PriceOracleStalePrice(address,uint256)\":[{\"notice\":\"Thrown when oracle provide stale price `price` for `token` token.\"}],\"PriceOracleTokenUnknown(address)\":[{\"notice\":\"Thrown when oracle doesn't provide price for `token` token.\"}]},\"kind\":\"user\",\"methods\":{\"getNormalizedPrice(address)\":{\"notice\":\"Gets normalized to 18 decimals price for the `token` token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/ChainlinkPriceOracle.sol\":\"ChainlinkPriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nerror GovernedOnlyGovernorAllowedToCall();\\nerror GovernedOnlyPendingGovernorAllowedToCall();\\nerror GovernedGovernorZeroAddress();\\nerror GovernedCantGoverItself();\\n\\nabstract contract Governed {\\n    address public governor;\\n    address public pendingGovernor;\\n\\n    event PendingGovernanceTransition(address indexed governor, address indexed newGovernor);\\n    event GovernanceTransited(address indexed governor, address indexed newGovernor);\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor) {\\n            revert GovernedOnlyGovernorAllowedToCall();\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        governor = msg.sender;\\n        emit PendingGovernanceTransition(address(0), governor);\\n        emit GovernanceTransited(address(0), governor);\\n    }\\n\\n    function transitGovernance(address newGovernor) external {\\n        if (newGovernor == address(0)) {\\n            revert GovernedGovernorZeroAddress();\\n        }\\n        if (newGovernor == address(this)) {\\n            revert GovernedCantGoverItself();\\n        }\\n\\n        pendingGovernor = newGovernor;\\n        emit PendingGovernanceTransition(governor, newGovernor);\\n    }\\n\\n    function acceptGovernance() external {\\n        if (msg.sender != pendingGovernor) {\\n            revert GovernedOnlyPendingGovernorAllowedToCall();\\n        }\\n\\n        governor = pendingGovernor;\\n        emit GovernanceTransited(governor, pendingGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x144bdf7b3aad44cc0084cacb3d6ac9c68a19484d2a0f0021a40ee03129c9b462\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IChainlinkAggregator {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0xc9a03e4eeca8af50c35f97e0b85fe2f5450fc94275746cd75640127cc328e410\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IMintableAndBurnableERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x05eafc19c3f6a255dd44fd2f0d282871c31a5f2606165d9c1eb9a7fc908ccca4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./../interfaces/IERC20.sol\\\";\\nimport \\\"./../libraries/FixedPointMath.sol\\\";\\n\\n/// @notice Thrown when oracle doesn't provide price for `token` token.\\n/// @param token The address of the token contract.\\nerror PriceOracleTokenUnknown(IERC20 token);\\n/// @notice Thrown when oracle provide stale price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleStalePrice(IERC20 token, uint256 price);\\n/// @notice Thrown when oracle provide negative, zero or in other ways invalid price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleInvalidPrice(IERC20 token, int256 price);\\n\\ninterface IPriceOracle {\\n    /// @notice Gets normalized to 18 decimals price for the `token` token.\\n    /// @param token The address of the token contract.\\n    /// @return normalizedPrice Normalized price.\\n    function getNormalizedPrice(IERC20 token) external view returns (uint256 normalizedPrice);\\n}\\n\",\"keccak256\":\"0x03a00db043da3c063a85d39f68dfa0c9e88702ef817f185e11f35d64ff89b41c\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nerror FixedPointMathMulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @title Fixed point math implementation\\nlibrary FixedPointMath {\\n    uint256 internal constant SCALE = 1e18;\\n    /// @dev Largest power of two divisor of scale.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n    /// @dev Scale inverted mod 2**256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert FixedPointMathMulDivOverflow(prod1, SCALE);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(a, b, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := add(div(prod0, SCALE), roundUpUnit)\\n            }\\n            return result;\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        result = mulDiv(a, SCALE, b);\\n    }\\n\\n    /// @notice Calculates \\u230aa \\u00d7 b \\u00f7 denominator\\u230b with full precision.\\n    /// @dev Credit to Remco Bloemen under MIT license https://2\\u03c0.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= denominator) {\\n            revert FixedPointMathMulDivOverflow(prod1, denominator);\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        unchecked {\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                denominator := div(denominator, lpotdod)\\n                prod0 := div(prod0, lpotdod)\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n            prod0 |= prod1 * lpotdod;\\n\\n            uint256 inverse = (3 * denominator) ^ 2;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n\\n            result = prod0 * inverse;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f335c64cfec6ebf78a441dbc1e58b739653160d643e1ebec297314660c1c5d4\",\"license\":\"MIT\"},\"contracts/oracles/ChainlinkPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./../interfaces/IChainlinkAggregator.sol\\\";\\nimport \\\"./../interfaces/IERC20.sol\\\";\\nimport \\\"./../libraries/FixedPointMath.sol\\\";\\nimport {Governed} from \\\"./../Governance.sol\\\";\\nimport {IPriceOracle, PriceOracleStalePrice, PriceOracleTokenUnknown, PriceOracleInvalidPrice} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\ncontract ChainlinkPriceOracle is Governed, IPriceOracle {\\n    using FixedPointMath for uint256;\\n\\n    uint256 internal constant DIRECT_CONVERSION_PATH_SCALE = 1e10;\\n    uint256 internal constant INTERMEDIATE_CONVERSION_PATH_SCALE = 1e8;\\n\\n    IERC20 public immutable wrappedNativeCurrency;\\n\\n    mapping(IERC20 => IChainlinkAggregator) public nativeAggregators;\\n    mapping(IERC20 => IChainlinkAggregator) public usdAggregators;\\n\\n    event AggregatorSet(IERC20 token, IChainlinkAggregator aggregator, bool isQuoteNative);\\n\\n    constructor(IERC20 _wrappedNativeCurrency) {\\n        wrappedNativeCurrency = _wrappedNativeCurrency;\\n    }\\n\\n    function setAggregator(\\n        IERC20 token,\\n        IChainlinkAggregator aggregator,\\n        bool isQuoteNative\\n    ) external onlyGovernor {\\n        if (isQuoteNative) {\\n            nativeAggregators[token] = aggregator;\\n        } else {\\n            usdAggregators[token] = aggregator;\\n        }\\n\\n        emit AggregatorSet(token, aggregator, isQuoteNative);\\n    }\\n\\n    function getNormalizedPrice(IERC20 token) external view override returns (uint256 normalizedPrice) {\\n        IChainlinkAggregator aggregator = usdAggregators[token];\\n        if (address(aggregator) == address(0)) {\\n            uint256 tokenToNativeCurrencyPrice = getTokenToNativeCurrencyPrice(token);\\n            uint256 nativeCurrencyToUsdPrice = getNativeCurrencyToUsdPrice();\\n            return tokenToNativeCurrencyPrice.mulDiv(nativeCurrencyToUsdPrice, INTERMEDIATE_CONVERSION_PATH_SCALE);\\n        }\\n\\n        normalizedPrice = getLatestPrice(token, aggregator) * DIRECT_CONVERSION_PATH_SCALE;\\n    }\\n\\n    function getTokenToNativeCurrencyPrice(IERC20 token) internal view returns (uint256 price) {\\n        IChainlinkAggregator aggregator = nativeAggregators[token];\\n        if (address(aggregator) == address(0)) {\\n            revert PriceOracleTokenUnknown(token);\\n        }\\n\\n        price = getLatestPrice(token, aggregator);\\n    }\\n\\n    function getNativeCurrencyToUsdPrice() internal view returns (uint256 price) {\\n        IChainlinkAggregator aggregator = usdAggregators[wrappedNativeCurrency];\\n        if (address(aggregator) == address(0)) {\\n            revert PriceOracleTokenUnknown(wrappedNativeCurrency);\\n        }\\n\\n        price = getLatestPrice(wrappedNativeCurrency, aggregator);\\n    }\\n\\n    function getLatestPrice(IERC20 token, IChainlinkAggregator aggregator) internal view returns (uint256 price) {\\n        (uint80 roundId, int256 answer, , , uint80 answeredInRound) = aggregator.latestRoundData();\\n        if (answer <= 0) {\\n            revert PriceOracleInvalidPrice(token, answer);\\n        }\\n\\n        price = uint256(answer);\\n        if (answeredInRound < roundId) {\\n            revert PriceOracleStalePrice(token, price);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce78c38b83a743498e806845787116d50c36066bc4b89fbdf8c5e10ac52fd343\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161094038038061094083398101604081905261002f916100bc565b600080546001600160a01b0319163390811782556040519091907fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb1908290a3600080546040516001600160a01b0390911691907f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e908290a360601b6001600160601b0319166080526100ec565b6000602082840312156100ce57600080fd5b81516001600160a01b03811681146100e557600080fd5b9392505050565b60805160601c61082161011f6000396000818161019301528181610483015281816104d2015261050401526108216000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80637f2141c811610076578063a534acb81161005b578063a534acb814610152578063e3056a341461017b578063e7f3028c1461018e57600080fd5b80637f2141c814610116578063a3e832921461012957600080fd5b80630c340a24146100a85780631e1f1264146100d8578063238efcbc146100f9578063631aa9e214610103575b600080fd5b6000546100bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100eb6100e6366004610712565b6101b5565b6040519081526020016100cf565b610101610229565b005b610101610111366004610712565b61029f565b61010161012436600461072f565b610341565b6100bb610137366004610712565b6002602052600090815260409020546001600160a01b031681565b6100bb610160366004610712565b6003602052600090815260409020546001600160a01b031681565b6001546100bb906001600160a01b031681565b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b03808216600090815260036020526040812054909116806102085760006101e284610424565b905060006101ee610479565b90506101ff82826305f5e10061052f565b95945050505050565b6402540be40061021884836105ea565b61022291906107cf565b9392505050565b6001546001600160a01b031633146102545760405163aec80d4b60e01b815260040160405180910390fd5b600154600080546001600160a01b0319166001600160a01b03909216918217815560405182917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e91a3565b6001600160a01b0381166102c65760405163604b48b960e11b815260040160405180910390fd5b6001600160a01b0381163014156102f0576040516306b3e95d60e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb19190a350565b6000546001600160a01b0316331461036c576040516305e7700560e51b815260040160405180910390fd5b80156103a5576001600160a01b03838116600090815260026020526040902080546001600160a01b0319169184169190911790556103d4565b6001600160a01b03838116600090815260036020526040902080546001600160a01b0319169184169190911790555b604080516001600160a01b038581168252841660208201528215158183015290517f63fd82896bab8eef1a35d3ab2266a9c3153779e4e3294e42cb7083100a8360759181900360600190a1505050565b6001600160a01b038082166000908152600260205260408120549091168061046f57604051637b32290760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b61022283826105ea565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600090815260036020526040812054909116806104ff57604051637b32290760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152602401610466565b6105297f0000000000000000000000000000000000000000000000000000000000000000826105ea565b91505090565b600080806000198587098587029250828110838203039150508381106105725760405163072fa3c960e31b81526004810182905260248101859052604401610466565b8061058257508290049050610222565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561062957600080fd5b505afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610661919061077f565b94505050925092506000821361069c57604051631919cdd560e31b81526001600160a01b038716600482015260248101839052604401610466565b8193508269ffffffffffffffffffff168169ffffffffffffffffffff1610156106ea57604051638a7611fb60e01b81526001600160a01b038716600482015260248101859052604401610466565b50505092915050565b805169ffffffffffffffffffff8116811461070d57600080fd5b919050565b60006020828403121561072457600080fd5b8135610222816107fc565b60008060006060848603121561074457600080fd5b833561074f816107fc565b9250602084013561075f816107fc565b91506040840135801515811461077457600080fd5b809150509250925092565b600080600080600060a0868803121561079757600080fd5b6107a0866106f3565b94506020860151935060408601519250606086015191506107c3608087016106f3565b90509295509295909350565b60008160001904831182151516156107f757634e487b7160e01b600052601160045260246000fd5b500290565b6001600160a01b038116811461081157600080fd5b5056fea164736f6c6343000807000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80637f2141c811610076578063a534acb81161005b578063a534acb814610152578063e3056a341461017b578063e7f3028c1461018e57600080fd5b80637f2141c814610116578063a3e832921461012957600080fd5b80630c340a24146100a85780631e1f1264146100d8578063238efcbc146100f9578063631aa9e214610103575b600080fd5b6000546100bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100eb6100e6366004610712565b6101b5565b6040519081526020016100cf565b610101610229565b005b610101610111366004610712565b61029f565b61010161012436600461072f565b610341565b6100bb610137366004610712565b6002602052600090815260409020546001600160a01b031681565b6100bb610160366004610712565b6003602052600090815260409020546001600160a01b031681565b6001546100bb906001600160a01b031681565b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b03808216600090815260036020526040812054909116806102085760006101e284610424565b905060006101ee610479565b90506101ff82826305f5e10061052f565b95945050505050565b6402540be40061021884836105ea565b61022291906107cf565b9392505050565b6001546001600160a01b031633146102545760405163aec80d4b60e01b815260040160405180910390fd5b600154600080546001600160a01b0319166001600160a01b03909216918217815560405182917f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e91a3565b6001600160a01b0381166102c65760405163604b48b960e11b815260040160405180910390fd5b6001600160a01b0381163014156102f0576040516306b3e95d60e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb19190a350565b6000546001600160a01b0316331461036c576040516305e7700560e51b815260040160405180910390fd5b80156103a5576001600160a01b03838116600090815260026020526040902080546001600160a01b0319169184169190911790556103d4565b6001600160a01b03838116600090815260036020526040902080546001600160a01b0319169184169190911790555b604080516001600160a01b038581168252841660208201528215158183015290517f63fd82896bab8eef1a35d3ab2266a9c3153779e4e3294e42cb7083100a8360759181900360600190a1505050565b6001600160a01b038082166000908152600260205260408120549091168061046f57604051637b32290760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b61022283826105ea565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600090815260036020526040812054909116806104ff57604051637b32290760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152602401610466565b6105297f0000000000000000000000000000000000000000000000000000000000000000826105ea565b91505090565b600080806000198587098587029250828110838203039150508381106105725760405163072fa3c960e31b81526004810182905260248101859052604401610466565b8061058257508290049050610222565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561062957600080fd5b505afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610661919061077f565b94505050925092506000821361069c57604051631919cdd560e31b81526001600160a01b038716600482015260248101839052604401610466565b8193508269ffffffffffffffffffff168169ffffffffffffffffffff1610156106ea57604051638a7611fb60e01b81526001600160a01b038716600482015260248101859052604401610466565b50505092915050565b805169ffffffffffffffffffff8116811461070d57600080fd5b919050565b60006020828403121561072457600080fd5b8135610222816107fc565b60008060006060848603121561074457600080fd5b833561074f816107fc565b9250602084013561075f816107fc565b91506040840135801515811461077457600080fd5b809150509250925092565b600080600080600060a0868803121561079757600080fd5b6107a0866106f3565b94506020860151935060408601519250606086015191506107c3608087016106f3565b90509295509295909350565b60008160001904831182151516156107f757634e487b7160e01b600052601160045260246000fd5b500290565b6001600160a01b038116811461081157600080fd5b5056fea164736f6c6343000807000a",
  "devdoc": {
    "errors": {
      "PriceOracleInvalidPrice(address,int256)": [
        {
          "params": {
            "price": "Provided price.",
            "token": "The address of the token contract."
          }
        }
      ],
      "PriceOracleStalePrice(address,uint256)": [
        {
          "params": {
            "price": "Provided price.",
            "token": "The address of the token contract."
          }
        }
      ],
      "PriceOracleTokenUnknown(address)": [
        {
          "params": {
            "token": "The address of the token contract."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getNormalizedPrice(address)": {
        "params": {
          "token": "The address of the token contract."
        },
        "returns": {
          "normalizedPrice": "Normalized price."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PriceOracleInvalidPrice(address,int256)": [
        {
          "notice": "Thrown when oracle provide negative, zero or in other ways invalid price `price` for `token` token."
        }
      ],
      "PriceOracleStalePrice(address,uint256)": [
        {
          "notice": "Thrown when oracle provide stale price `price` for `token` token."
        }
      ],
      "PriceOracleTokenUnknown(address)": [
        {
          "notice": "Thrown when oracle doesn't provide price for `token` token."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "getNormalizedPrice(address)": {
        "notice": "Gets normalized to 18 decimals price for the `token` token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3431,
        "contract": "contracts/oracles/ChainlinkPriceOracle.sol:ChainlinkPriceOracle",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3433,
        "contract": "contracts/oracles/ChainlinkPriceOracle.sol:ChainlinkPriceOracle",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5128,
        "contract": "contracts/oracles/ChainlinkPriceOracle.sol:ChainlinkPriceOracle",
        "label": "nativeAggregators",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)3690,t_contract(IChainlinkAggregator)3571)"
      },
      {
        "astId": 5134,
        "contract": "contracts/oracles/ChainlinkPriceOracle.sol:ChainlinkPriceOracle",
        "label": "usdAggregators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20)3690,t_contract(IChainlinkAggregator)3571)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IChainlinkAggregator)3571": {
        "encoding": "inplace",
        "label": "contract IChainlinkAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3690": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)3690,t_contract(IChainlinkAggregator)3571)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3690",
        "label": "mapping(contract IERC20 => contract IChainlinkAggregator)",
        "numberOfBytes": "32",
        "value": "t_contract(IChainlinkAggregator)3571"
      }
    }
  }
}
