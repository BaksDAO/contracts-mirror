{
  "address": "0xD042c8d97a7253b25EB2C4d63F312010a3912700",
  "abi": [
    {
      "inputs": [],
      "name": "BaksDAOBorrowBelowMinimumPrincipalAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOBorrowZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOCollateralTokenAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOCollateralTokenNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "BaksDAOCollateralTokenTooLargeDecimals",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOCollateralTokenZeroDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAODepositZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOInactiveLoan",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOInitialLoanToValueRatioTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumRequiredSecurityAmount",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOInsufficientSecurityAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOLoanIsSubjectToLiquidation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOLoanNotSubjectToLiquidation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BaksDAONativeCurrencyCollateralNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAONativeCurrencyTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAONoNeedToRebalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOOnlyDepositaryAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOOnlySuperUserAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOPlainNativeCurrencyTransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAORepayZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shortage",
          "type": "uint256"
        }
      ],
      "name": "BaksDAOStabilizationFundOutOfFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOTokenNotAllowedAsCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BaksDAOTokenNotAllowedToBeSalvaged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOVoiceMintingEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaksDAOVoiceNothingToMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "CallToNonContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "FixedPointMathMulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedCantGoverItself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedGovernorZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernedOnlyPendingGovernorAllowedToCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeERC20NoReturnData",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CollateralTokenListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CollateralTokenUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernanceTransited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInitialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "InitialLoanToValueRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceTransition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "delta",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voiceMinted",
          "type": "uint256"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Repaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastInteractionAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrowInNativeCurrency",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastInteractionAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanByCollateralAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastInteractionAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "loan",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "exchangeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "developmentFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanByPrincipalAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastInteractionAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "loan",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "exchangeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "developmentFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "securityAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateLoanBySecurityAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastInteractionAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data",
          "name": "loan",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "exchangeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "developmentFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "checkHealth",
      "outputs": [
        {
          "internalType": "enum Bank.Health",
          "name": "health",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stabilizationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "developmentFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marginCallLoanToValueRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationLoanToValueRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "depositInNativeCurrency",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedCollateralTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stabilityFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "developmentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marginCallLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationLoanToValueRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CollateralToken.Data[]",
          "name": "allowedCollateralTokens",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanAccruedInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accruedInterest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanToValueRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanToValueRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "getLoans",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "contract IPriceOracle",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stabilizationFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastInteractionAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Loan.Data[]",
          "name": "_loans",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTotalValueLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValueLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICore",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "listCollateralToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loanIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isNativeCurrency",
          "type": "bool"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stabilizationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastInteractionAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintVoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextVoiceMintingStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onNewDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "salvage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newInitialLoanToValueRatio",
          "type": "uint256"
        }
      ],
      "name": "setInitialLoanToValueRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        }
      ],
      "name": "transitGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unlistCollateralToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9512217a540d5cb0f4d1b1c6ed52b828c97a64877ce682f69135d5cc9151d5eb",
  "receipt": {
    "to": null,
    "from": "0x7c75D84900ee73eDf5c69E836c7BDB4aaE45549C",
    "contractAddress": "0xD042c8d97a7253b25EB2C4d63F312010a3912700",
    "transactionIndex": 58,
    "gasUsed": "5067248",
    "logsBloom": "0x
    "blockHash": "0x6668c34d9bc3923d7eb86d44f831091b9ca135e51a9629743f0e5124387c5933",
    "transactionHash": "0x9512217a540d5cb0f4d1b1c6ed52b828c97a64877ce682f69135d5cc9151d5eb",
    "logs": [],
    "blockNumber": 13661502,
    "cumulativeGasUsed": "14827428",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "132a0ae4e0297df67766db98dcfb66e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaksDAOBorrowBelowMinimumPrincipalAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOBorrowZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOCollateralTokenAlreadyListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOCollateralTokenNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"BaksDAOCollateralTokenTooLargeDecimals\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOCollateralTokenZeroDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAODepositZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAOInactiveLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"BaksDAOInitialLoanToValueRatioTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumRequiredSecurityAmount\",\"type\":\"uint256\"}],\"name\":\"BaksDAOInsufficientSecurityAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAOLoanIsSubjectToLiquidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAOLoanNotSubjectToLiquidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BaksDAONativeCurrencyCollateralNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAONativeCurrencyTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAONoNeedToRebalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOOnlyDepositaryAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOOnlySuperUserAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOPlainNativeCurrencyTransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAORepayZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shortage\",\"type\":\"uint256\"}],\"name\":\"BaksDAOStabilizationFundOutOfFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOTokenNotAllowedAsCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BaksDAOTokenNotAllowedToBeSalvaged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOVoiceMintingEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaksDAOVoiceNothingToMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"CallToNonContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FixedPointMathMulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedCantGoverItself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedGovernorZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernedOnlyPendingGovernorAllowedToCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeERC20NoReturnData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CollateralTokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CollateralTokenUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernanceTransited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInitialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"InitialLoanToValueRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernanceTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voiceMinted\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteractionAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrowInNativeCurrency\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteractionAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanByCollateralAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteractionAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"loan\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanByPrincipalAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteractionAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"loan\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"securityAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLoanBySecurityAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteractionAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data\",\"name\":\"loan\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"checkHealth\",\"outputs\":[{\"internalType\":\"enum Bank.Health\",\"name\":\"health\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginCallLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"depositInNativeCurrency\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedCollateralTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginCallLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLoanToValueRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralToken.Data[]\",\"name\":\"allowedCollateralTokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanAccruedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanToValueRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanToValueRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getLoans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteractionAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Loan.Data[]\",\"name\":\"_loans\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICore\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"listCollateralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteractionAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintVoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextVoiceMintingStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onNewDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newInitialLoanToValueRatio\",\"type\":\"uint256\"}],\"name\":\"setInitialLoanToValueRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"transitGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unlistCollateralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BaksDAO\",\"errors\":{\"BaksDAOBorrowBelowMinimumPrincipalAmount()\":[{\"details\":\"Thrown when trying to borrow below minimum principal amount.\"}],\"BaksDAOBorrowZeroAmount()\":[{\"details\":\"Thrown when borrowing a zero amount of stablecoin.\"}],\"BaksDAOCollateralTokenAlreadyListed(address)\":[{\"details\":\"Thrown when trying to list collateral token that's already listed.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOCollateralTokenNotListed(address)\":[{\"details\":\"Thrown when trying to unlist collateral token that's not listed.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOCollateralTokenTooLargeDecimals(address,uint8)\":[{\"details\":\"Thrown when trying to list collateral token that has too large decimals.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOCollateralTokenZeroDecimals(address)\":[{\"details\":\"Thrown when trying to list collateral token that has zero decimals.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAODepositZeroAmount()\":[{\"details\":\"Thrown when depositing a zero amount of collateral token.\"}],\"BaksDAOInactiveLoan(uint256)\":[{\"details\":\"Thrown when trying to interact with inactive loan with `id` id.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAOInitialLoanToValueRatioTooHigh(address,uint256)\":[{\"details\":\"Thrown when trying to set initial loan-to-value ratio that higher than margin call or liquidation ones.\",\"params\":{\"initialLoanToValueRatio\":\"The initial loan-to-value ratio that was tried to set.\",\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOLoanIsSubjectToLiquidation(uint256)\":[{\"details\":\"Thrown when trying to interact with loan with `id` id that is subject to liquidation.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAOLoanNotSubjectToLiquidation(uint256)\":[{\"details\":\"Thrown when trying to liquidate healthy loan with `id` id.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAONativeCurrencyCollateralNotAllowed(uint256)\":[{\"details\":\"Thrown when trying to deposit native currency collateral to the non-wrapped native currency token loan with `id` id.\",\"params\":{\"id\":\"The loan id.\"}}],\"BaksDAONoNeedToRebalance()\":[{\"details\":\"Thrown when there's no need to rebalance the platform.\"}],\"BaksDAORepayZeroAmount()\":[{\"details\":\"Thrown when repaying a zero amount of stablecoin.\"}],\"BaksDAOStabilizationFundOutOfFunds(uint256)\":[{\"details\":\"Thrown when trying to rebalance the platform and there is a shortage of funds to burn.\",\"params\":{\"shortage\":\"Shoratge of funds to burn.\"}}],\"BaksDAOTokenNotAllowedAsCollateral(address)\":[{\"details\":\"Thrown when interacting with a token that's not allowed as collateral.\",\"params\":{\"token\":\"The address of the collateral token contract.\"}}],\"BaksDAOTokenNotAllowedToBeSalvaged(address)\":[{\"details\":\"Thrown when trying to salvage one of allowed collateral tokens or stablecoin.\",\"params\":{\"token\":\"The address of the token contract.\"}}]},\"kind\":\"dev\",\"methods\":{\"borrow(address,uint256)\":{\"details\":\"The caller must have allowed this contract to spend a sufficient amount of collateral tokens to cover initial loan-to-value ratio.\",\"params\":{\"amount\":\"The amount of stablecoin to borrow and issue.\",\"collateralToken\":\"The address of the collateral token contract.\"}},\"deposit(uint256,uint256)\":{\"details\":\"The caller must have allowed this contract to spend `amount` of collateral tokens.\",\"params\":{\"amount\":\"The amount of collateral token to deposit.\",\"loanId\":\"The loan id.\"}},\"repay(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of stablecoin to repay.\",\"loanId\":\"The loan id.\"}}},\"title\":\"Core smart contract of BaksDAO platform\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(address,uint256)\":{\"notice\":\"Increases loan's principal on `collateralToken` collateral token and mints `amount` of stablecoin.\"},\"borrowInNativeCurrency(uint256)\":{\"notice\":\"Increases loan's principal on wrapped native currency token and mints stablecoin.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposits `amount` of collateral token to loan with `id` id.\"},\"depositInNativeCurrency(uint256)\":{\"notice\":\"Deposits wrapped native currency token to loan with `id` id.\"},\"repay(uint256,uint256)\":{\"notice\":\"Decreases principal of loan with `id` id by `amount` of stablecoin.\"}},\"notice\":\"You should use this contract to interact with the BaksDAO platform.Only this contract can issue BAKS and BDV tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bank.sol\":\"Bank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IBank.sol\\\";\\nimport \\\"./interfaces/IWrappedNativeCurrency.sol\\\";\\nimport \\\"./libraries/AmountNormalization.sol\\\";\\nimport \\\"./libraries/Beneficiary.sol\\\";\\nimport \\\"./libraries/CollateralToken.sol\\\";\\nimport \\\"./libraries/EnumerableAddressSet.sol\\\";\\nimport \\\"./libraries/FixedPointMath.sol\\\";\\nimport \\\"./libraries/Loan.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/MintingStage.sol\\\";\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport {CoreInside, ICore} from \\\"./Core.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\nimport {IDepositary} from \\\"./Depositary.sol\\\";\\nimport {IERC20, IMintableAndBurnableERC20} from \\\"./interfaces/ERC20.sol\\\";\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\n\\n/// @dev Thrown when trying to list collateral token that has zero decimals.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenZeroDecimals(IERC20 token);\\n\\n/// @dev Thrown when trying to list collateral token that has too large decimals.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenTooLargeDecimals(IERC20 token, uint8 decimals);\\n\\n/// @dev Thrown when trying to list collateral token that's already listed.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenAlreadyListed(IERC20 token);\\n\\n/// @dev Thrown when trying to unlist collateral token that's not listed.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOCollateralTokenNotListed(IERC20 token);\\n\\n/// @dev Thrown when interacting with a token that's not allowed as collateral.\\n/// @param token The address of the collateral token contract.\\nerror BaksDAOTokenNotAllowedAsCollateral(IERC20 token);\\n\\n/// @dev Thrown when trying to set initial loan-to-value ratio that higher than margin call or liquidation ones.\\n/// @param token The address of the collateral token contract.\\n/// @param initialLoanToValueRatio The initial loan-to-value ratio that was tried to set.\\nerror BaksDAOInitialLoanToValueRatioTooHigh(IERC20 token, uint256 initialLoanToValueRatio);\\n\\n/// @dev Thrown when trying to interact with inactive loan with `id` id.\\n/// @param id The loan id.\\nerror BaksDAOInactiveLoan(uint256 id);\\n\\n/// @dev Thrown when trying to liquidate healthy loan with `id` id.\\n/// @param id The loan id.\\nerror BaksDAOLoanNotSubjectToLiquidation(uint256 id);\\n\\n/// @dev Thrown when trying to interact with loan with `id` id that is subject to liquidation.\\n/// @param id The loan id.\\nerror BaksDAOLoanIsSubjectToLiquidation(uint256 id);\\n\\n/// @dev Thrown when borrowing a zero amount of stablecoin.\\nerror BaksDAOBorrowZeroAmount();\\n\\n/// @dev Thrown when trying to borrow below minimum principal amount.\\nerror BaksDAOBorrowBelowMinimumPrincipalAmount();\\n\\n/// @dev Thrown when depositing a zero amount of collateral token.\\nerror BaksDAODepositZeroAmount();\\n\\n/// @dev Thrown when repaying a zero amount of stablecoin.\\nerror BaksDAORepayZeroAmount();\\n\\n/// @dev Thrown when there's no need to rebalance the platform.\\nerror BaksDAONoNeedToRebalance();\\n\\n/// @dev Thrown when trying to rebalance the platform and there is a shortage of funds to burn.\\n/// @param shortage Shoratge of funds to burn.\\nerror BaksDAOStabilizationFundOutOfFunds(uint256 shortage);\\n\\n/// @dev Thrown when trying to salvage one of allowed collateral tokens or stablecoin.\\n/// @param token The address of the token contract.\\nerror BaksDAOTokenNotAllowedToBeSalvaged(IERC20 token);\\n\\n/// @dev Thrown when trying to deposit native currency collateral to the non-wrapped native currency token loan\\n/// with `id` id.\\n/// @param id The loan id.\\nerror BaksDAONativeCurrencyCollateralNotAllowed(uint256 id);\\n\\nerror BaksDAONativeCurrencyTransferFailed();\\n\\nerror BaksDAOPlainNativeCurrencyTransferNotAllowed();\\n\\nerror BaksDAOInsufficientSecurityAmount(uint256 minimumRequiredSecurityAmount);\\n\\nerror BaksDAOVoiceNothingToMint();\\n\\nerror BaksDAOVoiceMintingEnded();\\n\\n/// @title Core smart contract of BaksDAO platform\\n/// @author BaksDAO\\n/// @notice You should use this contract to interact with the BaksDAO platform.\\n/// @notice Only this contract can issue BAKS and BDV tokens.\\ncontract Bank is CoreInside, Governed, IBank, Initializable, ReentrancyGuard {\\n    using AmountNormalization for IERC20;\\n    using AmountNormalization for IWrappedNativeCurrency;\\n    using CollateralToken for CollateralToken.Data;\\n    using EnumerableAddressSet for EnumerableAddressSet.Set;\\n    using FixedPointMath for uint256;\\n    using Loan for Loan.Data;\\n    using MintingStage for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IMintableAndBurnableERC20;\\n    using SafeERC20 for IWrappedNativeCurrency;\\n\\n    enum Health {\\n        Ok,\\n        MarginCall,\\n        Liquidation\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n    uint8 internal constant DECIMALS = 18;\\n\\n    Loan.Data[] public loans;\\n    mapping(address => uint256[]) public loanIds;\\n\\n    mapping(IERC20 => CollateralToken.Data) public collateralTokens;\\n    EnumerableAddressSet.Set internal collateralTokensSet;\\n\\n    uint256 public nextVoiceMintingStage;\\n\\n    event CollateralTokenListed(IERC20 indexed token);\\n    event CollateralTokenUnlisted(IERC20 indexed token);\\n\\n    event InitialLoanToValueRatioUpdated(\\n        IERC20 indexed token,\\n        uint256 initialLoanToValueRatio,\\n        uint256 newInitialLoanToValueRatio\\n    );\\n\\n    event Borrow(\\n        uint256 indexed id,\\n        address indexed borrower,\\n        IERC20 indexed token,\\n        uint256 principalAmount,\\n        uint256 collateralAmount,\\n        uint256 initialLoanToValueRatio\\n    );\\n    event Deposit(uint256 indexed id, uint256 collateralAmount);\\n    event Repay(uint256 indexed id, uint256 principalAmount);\\n    event Repaid(uint256 indexed id);\\n\\n    event Liquidated(uint256 indexed id);\\n\\n    event Rebalance(int256 delta, uint256 voiceMinted);\\n\\n    modifier tokenAllowedAsCollateral(IERC20 token) {\\n        if (!collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOTokenNotAllowedAsCollateral(token);\\n        }\\n        _;\\n    }\\n\\n    modifier onActiveLoan(uint256 id) {\\n        if (id >= loans.length || !loans[id].isActive) {\\n            revert BaksDAOInactiveLoan(id);\\n        }\\n        _;\\n    }\\n\\n    modifier notOnSubjectToLiquidation(uint256 loanId) {\\n        if (checkHealth(loanId) == Health.Liquidation) {\\n            revert BaksDAOLoanIsSubjectToLiquidation(loanId);\\n        }\\n        _;\\n    }\\n\\n    modifier onSubjectToLiquidation(uint256 loanId) {\\n        if (checkHealth(loanId) != Health.Liquidation) {\\n            revert BaksDAOLoanNotSubjectToLiquidation(loanId);\\n        }\\n        _;\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != core.wrappedNativeCurrency()) {\\n            revert BaksDAOPlainNativeCurrencyTransferNotAllowed();\\n        }\\n    }\\n\\n    function initialize(ICore _core) external initializer {\\n        initializeReentrancyGuard();\\n        initializeCoreInside(_core);\\n        setGovernor(msg.sender);\\n    }\\n\\n    /// @notice Increases loan's principal on `collateralToken` collateral token and mints `amount` of stablecoin.\\n    /// @dev The caller must have allowed this contract to spend a sufficient amount of collateral tokens to cover\\n    /// initial loan-to-value ratio.\\n    /// @param collateralToken The address of the collateral token contract.\\n    /// @param amount The amount of stablecoin to borrow and issue.\\n    function borrow(IERC20 collateralToken, uint256 amount)\\n        external\\n        tokenAllowedAsCollateral(collateralToken)\\n        returns (Loan.Data memory)\\n    {\\n        (\\n            Loan.Data memory loan,\\n            uint256 exchangeFee,\\n            uint256 developmentFee,\\n            uint256 stabilityFee\\n        ) = calculateLoanByPrincipalAmount(collateralToken, amount);\\n\\n        collateralToken.safeTransferFrom(msg.sender, core.operator(), collateralToken.denormalizeAmount(stabilityFee));\\n        collateralToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralToken.denormalizeAmount(loan.collateralAmount)\\n        );\\n\\n        return _createLoan(loan, exchangeFee, developmentFee);\\n    }\\n\\n    /// @notice Increases loan's principal on wrapped native currency token and mints stablecoin.\\n    function borrowInNativeCurrency(uint256 amount) external payable nonReentrant returns (Loan.Data memory) {\\n        IWrappedNativeCurrency wrappedNativeCurrency = IWrappedNativeCurrency(core.wrappedNativeCurrency());\\n\\n        (\\n            Loan.Data memory loan,\\n            uint256 exchangeFee,\\n            uint256 developmentFee,\\n            uint256 stabilityFee\\n        ) = calculateLoanByPrincipalAmount(wrappedNativeCurrency, amount);\\n        loan.isNativeCurrency = true;\\n\\n        uint256 securityAmount = loan.collateralAmount + stabilityFee;\\n        if (msg.value < securityAmount) {\\n            revert BaksDAOInsufficientSecurityAmount(securityAmount);\\n        }\\n\\n        wrappedNativeCurrency.deposit{value: securityAmount}();\\n        wrappedNativeCurrency.safeTransfer(core.operator(), wrappedNativeCurrency.denormalizeAmount(stabilityFee));\\n\\n        uint256 change;\\n        unchecked {\\n            change = msg.value - securityAmount;\\n        }\\n        if (change > 0) {\\n            (bool success, ) = msg.sender.call{value: change}(\\\"\\\");\\n            if (!success) {\\n                revert BaksDAONativeCurrencyTransferFailed();\\n            }\\n        }\\n\\n        return _createLoan(loan, exchangeFee, developmentFee);\\n    }\\n\\n    /// @notice Deposits `amount` of collateral token to loan with `id` id.\\n    /// @dev The caller must have allowed this contract to spend `amount` of collateral tokens.\\n    /// @param loanId The loan id.\\n    /// @param amount The amount of collateral token to deposit.\\n    function deposit(uint256 loanId, uint256 amount) external onActiveLoan(loanId) notOnSubjectToLiquidation(loanId) {\\n        loans[loanId].collateralToken.safeTransferFrom(msg.sender, address(this), amount);\\n        _deposit(loanId, amount);\\n    }\\n\\n    /// @notice Deposits wrapped native currency token to loan with `id` id.\\n    function depositInNativeCurrency(uint256 loanId)\\n        external\\n        payable\\n        nonReentrant\\n        onActiveLoan(loanId)\\n        notOnSubjectToLiquidation(loanId)\\n    {\\n        IWrappedNativeCurrency wrappedNativeCurrency = IWrappedNativeCurrency(core.wrappedNativeCurrency());\\n        if (loans[loanId].collateralToken != wrappedNativeCurrency) {\\n            revert BaksDAONativeCurrencyCollateralNotAllowed(loanId);\\n        }\\n        wrappedNativeCurrency.deposit{value: msg.value}();\\n        _deposit(loanId, msg.value);\\n    }\\n\\n    /// @notice Decreases principal of loan with `id` id by `amount` of stablecoin.\\n    /// @param loanId The loan id.\\n    /// @param amount The amount of stablecoin to repay.\\n    function repay(uint256 loanId, uint256 amount)\\n        external\\n        nonReentrant\\n        onActiveLoan(loanId)\\n        notOnSubjectToLiquidation(loanId)\\n    {\\n        if (amount == 0) {\\n            revert BaksDAORepayZeroAmount();\\n        }\\n        Loan.Data storage loan = loans[loanId];\\n        loan.accrueInterest();\\n\\n        amount = Math.min(loan.principalAmount + loan.interestAmount, amount);\\n        uint256 interestPayment;\\n        uint256 principalPayment;\\n        if (loan.interestAmount < amount) {\\n            principalPayment = amount - loan.interestAmount;\\n            interestPayment = loan.interestAmount;\\n\\n            loan.principalAmount -= principalPayment;\\n            loan.interestAmount = 0;\\n        } else {\\n            interestPayment = amount;\\n            loan.interestAmount -= interestPayment;\\n        }\\n\\n        IMintableAndBurnableERC20 baks = IMintableAndBurnableERC20(core.baks());\\n\\n        if (interestPayment > 0) {\\n            baks.safeTransferFrom(msg.sender, core.developmentFund(), interestPayment);\\n        }\\n\\n        if (principalPayment > 0) {\\n            baks.safeTransferFrom(msg.sender, address(this), principalPayment);\\n        }\\n\\n        loan.lastInteractionAt = block.timestamp;\\n        if (loan.principalAmount > 0) {\\n            emit Repay(loanId, amount);\\n        } else {\\n            uint256 denormalizedCollateralAmount = loan.collateralToken.denormalizeAmount(loan.collateralAmount);\\n            collateralTokens[loan.collateralToken].collateralAmount -= loan.collateralAmount;\\n\\n            loan.collateralAmount = 0;\\n\\n            baks.burn(address(this), amount + loan.stabilizationFee);\\n\\n            loan.isActive = false;\\n            emit Repaid(loanId);\\n\\n            loan.collateralToken.safeTransfer(loan.borrower, denormalizedCollateralAmount);\\n\\n            /* if (!loan.isNativeCurrency) {\\n                loan.collateralToken.safeTransfer(loan.borrower, denormalizedCollateralAmount);\\n            } else {\\n                IWrappedNativeCurrency(core.wrappedNativeCurrency()).withdraw(denormalizedCollateralAmount);\\n                (bool success, ) = msg.sender.call{value: denormalizedCollateralAmount}(\\\"\\\");\\n                if (!success) {\\n                    revert BaksDAONativeCurrencyTransferFailed();\\n                }\\n            } */\\n        }\\n    }\\n\\n    function liquidate(uint256 loanId) external onActiveLoan(loanId) onSubjectToLiquidation(loanId) {\\n        Loan.Data storage loan = loans[loanId];\\n\\n        collateralTokens[loan.collateralToken].collateralAmount -= loan.collateralAmount;\\n        loan.collateralToken.safeTransfer(\\n            core.developmentFund(),\\n            loan.collateralToken.denormalizeAmount(loan.collateralAmount)\\n        );\\n\\n        IMintableAndBurnableERC20 baks = IMintableAndBurnableERC20(core.baks());\\n        uint256 collateralValue = loan.getCollateralValue();\\n        baks.burn(core.liquidator(), loan.principalAmount);\\n        baks.burn(address(this), collateralValue - loan.principalAmount);\\n\\n        loan.isActive = false;\\n        emit Liquidated(loanId);\\n    }\\n\\n    function rebalance() external {\\n        IMintableAndBurnableERC20 baks = IMintableAndBurnableERC20(core.baks());\\n\\n        uint256 totalValueLocked = getTotalValueLocked();\\n        uint256 totalSupply = baks.totalSupply();\\n\\n        int256 delta = int256(totalSupply) - int256(totalValueLocked);\\n        uint256 absoluteDelta = Math.abs(delta);\\n        uint256 p = absoluteDelta.div(totalSupply);\\n        if (p < core.rebalancingThreshold()) {\\n            revert BaksDAONoNeedToRebalance();\\n        }\\n\\n        if (delta > 0) {\\n            try baks.burn(address(this), absoluteDelta) {} catch {\\n                uint256 balance = baks.balanceOf(address(this));\\n                revert BaksDAOStabilizationFundOutOfFunds(absoluteDelta - balance);\\n            }\\n        } else {\\n            baks.mint(address(this), absoluteDelta);\\n        }\\n\\n        emit Rebalance(delta, 0);\\n    }\\n\\n    function mintVoice() external {\\n        uint256[] memory voiceMintingSchedule = core.voiceMintingSchedule();\\n        uint256 length = voiceMintingSchedule.length;\\n\\n        if (nextVoiceMintingStage >= length) {\\n            revert BaksDAOVoiceMintingEnded();\\n        }\\n\\n        uint256 totalValueLocked = getTotalValueLocked();\\n        uint256 voiceToMint;\\n\\n        for (uint256 i = nextVoiceMintingStage; i < length; i++) {\\n            (uint256 targetTotalValueLocked, uint256 amount) = voiceMintingSchedule[i].split();\\n\\n            if (totalValueLocked < targetTotalValueLocked) {\\n                nextVoiceMintingStage = i;\\n                break;\\n            }\\n\\n            voiceToMint += amount;\\n        }\\n\\n        if (voiceToMint == 0) {\\n            revert BaksDAOVoiceNothingToMint();\\n        }\\n\\n        IMintableAndBurnableERC20 voice = IMintableAndBurnableERC20(core.voice());\\n        voice.mint(address(this), voiceToMint);\\n\\n        uint256 voiceTotalShares = core.voiceTotalShares();\\n        uint256[] memory beneficiaries = core.voiceMintingBeneficiaries();\\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\\n            (address beneficiary, uint256 share) = Beneficiary.split(beneficiaries[i]);\\n            voice.safeTransfer(beneficiary, (voiceToMint * share) / voiceTotalShares);\\n        }\\n\\n        emit Rebalance(0, voiceToMint);\\n    }\\n\\n    function onNewDeposit(IERC20 token, uint256 amount) external onlyDepositary {\\n        IMintableAndBurnableERC20 baks = IMintableAndBurnableERC20(core.baks());\\n        if (token == baks) {\\n            return;\\n        }\\n\\n        amount = amount.mul(IPriceOracle(core.priceOracle()).getNormalizedPrice(token));\\n\\n        baks.mint(address(this), amount.mul(core.stabilizationFee()));\\n        baks.mint(core.exchangeFund(), amount.mul(core.exchangeFee()));\\n        baks.mint(core.developmentFund(), amount.mul(core.developmentFee()));\\n    }\\n\\n    function listCollateralToken(IERC20 token, uint256 initialLoanToValueRatio) external onlyGovernor {\\n        if (collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOCollateralTokenAlreadyListed(token);\\n        }\\n\\n        if (initialLoanToValueRatio >= core.marginCallLoanToValueRatio()) {\\n            revert BaksDAOInitialLoanToValueRatioTooHigh(token, initialLoanToValueRatio);\\n        }\\n\\n        uint8 decimals = token.decimals();\\n        if (decimals == 0) {\\n            revert BaksDAOCollateralTokenZeroDecimals(token);\\n        }\\n        if (decimals > DECIMALS) {\\n            revert BaksDAOCollateralTokenTooLargeDecimals(token, decimals);\\n        }\\n\\n        if (collateralTokensSet.add(address(token))) {\\n            collateralTokens[token] = CollateralToken.Data({\\n                collateralToken: token,\\n                priceOracle: IPriceOracle(core.priceOracle()),\\n                stabilityFee: core.stabilityFee(),\\n                stabilizationFee: core.stabilizationFee(),\\n                exchangeFee: core.exchangeFee(),\\n                developmentFee: core.developmentFee(),\\n                initialLoanToValueRatio: initialLoanToValueRatio,\\n                marginCallLoanToValueRatio: core.marginCallLoanToValueRatio(),\\n                liquidationLoanToValueRatio: core.liquidationLoanToValueRatio(),\\n                collateralAmount: 0\\n            });\\n\\n            emit CollateralTokenListed(token);\\n            emit InitialLoanToValueRatioUpdated(token, 0, initialLoanToValueRatio);\\n        }\\n    }\\n\\n    function unlistCollateralToken(IERC20 token) external onlyGovernor {\\n        if (!collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOCollateralTokenNotListed(token);\\n        }\\n\\n        if (collateralTokensSet.remove(address(token))) {\\n            delete collateralTokens[token];\\n            emit CollateralTokenUnlisted(token);\\n        }\\n    }\\n\\n    function setInitialLoanToValueRatio(IERC20 token, uint256 newInitialLoanToValueRatio) external onlyGovernor {\\n        if (!collateralTokensSet.contains(address(token))) {\\n            revert BaksDAOCollateralTokenNotListed(token);\\n        }\\n\\n        CollateralToken.Data storage collateralToken = collateralTokens[token];\\n        if (newInitialLoanToValueRatio >= collateralToken.marginCallLoanToValueRatio) {\\n            revert BaksDAOInitialLoanToValueRatioTooHigh(token, newInitialLoanToValueRatio);\\n        }\\n\\n        uint256 initialLoanToValueRatio = collateralToken.initialLoanToValueRatio;\\n        collateralToken.initialLoanToValueRatio = newInitialLoanToValueRatio;\\n\\n        emit InitialLoanToValueRatioUpdated(token, initialLoanToValueRatio, newInitialLoanToValueRatio);\\n    }\\n\\n    function salvage(IERC20 token) external onlyGovernor {\\n        address tokenAddress = address(token);\\n        if (tokenAddress == core.baks() || collateralTokensSet.contains(tokenAddress)) {\\n            revert BaksDAOTokenNotAllowedToBeSalvaged(token);\\n        }\\n        token.safeTransfer(core.operator(), token.balanceOf(address(this)));\\n    }\\n\\n    function getLoans(address borrower) external view returns (Loan.Data[] memory _loans) {\\n        uint256 length = loanIds[borrower].length;\\n        _loans = new Loan.Data[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _loans[i] = loans[loanIds[borrower][i]];\\n        }\\n    }\\n\\n    function getAllowedCollateralTokens()\\n        external\\n        view\\n        returns (CollateralToken.Data[] memory allowedCollateralTokens)\\n    {\\n        uint256 length = collateralTokensSet.elements.length;\\n        allowedCollateralTokens = new CollateralToken.Data[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            allowedCollateralTokens[i] = collateralTokens[IERC20(collateralTokensSet.elements[i])];\\n        }\\n    }\\n\\n    function calculateLoanByPrincipalAmount(IERC20 collateralToken, uint256 principalAmount)\\n        public\\n        view\\n        returns (\\n            Loan.Data memory loan,\\n            uint256 exchangeFee,\\n            uint256 developmentFee,\\n            uint256 stabilityFee\\n        )\\n    {\\n        return collateralTokens[collateralToken].calculateLoanByPrincipalAmount(principalAmount);\\n    }\\n\\n    function calculateLoanByCollateralAmount(IERC20 collateralToken, uint256 collateralAmount)\\n        public\\n        view\\n        returns (\\n            Loan.Data memory loan,\\n            uint256 exchangeFee,\\n            uint256 developmentFee,\\n            uint256 stabilityFee\\n        )\\n    {\\n        return collateralTokens[collateralToken].calculateLoanByCollateralAmount(collateralAmount);\\n    }\\n\\n    function calculateLoanBySecurityAmount(IERC20 collateralToken, uint256 securityAmount)\\n        public\\n        view\\n        returns (\\n            Loan.Data memory loan,\\n            uint256 exchangeFee,\\n            uint256 developmentFee,\\n            uint256 stabilityFee\\n        )\\n    {\\n        return collateralTokens[collateralToken].calculateLoanBySecurityAmount(securityAmount);\\n    }\\n\\n    function getTotalValueLocked() public view returns (uint256 totalValueLocked) {\\n        for (uint256 i = 0; i < collateralTokensSet.elements.length; i++) {\\n            totalValueLocked += collateralTokens[IERC20(collateralTokensSet.elements[i])].getCollateralValue();\\n        }\\n        totalValueLocked += IDepositary(core.depositary()).getTotalValueLocked();\\n    }\\n\\n    function getTotalValueLocked(IERC20 token) public view returns (uint256 totalValueLocked) {\\n        totalValueLocked = collateralTokens[token].getCollateralValue();\\n        totalValueLocked += IDepositary(core.depositary()).getTotalValueLocked(token);\\n    }\\n\\n    function getLoanToValueRatio(uint256 loanId) public view returns (uint256 loanToValueRatio) {\\n        Loan.Data memory loan = loans[loanId];\\n        loanToValueRatio = loan.calculateLoanToValueRatio();\\n    }\\n\\n    function getLoanAccruedInterest(uint256 loanId) public view returns (uint256 accruedInterest) {\\n        Loan.Data memory loan = loans[loanId];\\n        accruedInterest = loan.calculateInterest();\\n    }\\n\\n    function checkHealth(uint256 loanId) public view returns (Health health) {\\n        uint256 loanToValueRatio = getLoanToValueRatio(loanId);\\n        health = loanToValueRatio >= core.liquidationLoanToValueRatio()\\n            ? Health.Liquidation\\n            : loanToValueRatio >= core.marginCallLoanToValueRatio()\\n            ? Health.MarginCall\\n            : Health.Ok;\\n    }\\n\\n    function _createLoan(\\n        Loan.Data memory loan,\\n        uint256 exchangeFee,\\n        uint256 developmentFee\\n    ) internal returns (Loan.Data memory) {\\n        if (loan.principalAmount == 0) {\\n            revert BaksDAOBorrowZeroAmount();\\n        }\\n        if (loan.principalAmount < core.minimumPrincipalAmount()) {\\n            revert BaksDAOBorrowBelowMinimumPrincipalAmount();\\n        }\\n\\n        IMintableAndBurnableERC20 baks = IMintableAndBurnableERC20(core.baks());\\n        baks.mint(address(this), loan.stabilizationFee);\\n        baks.mint(core.exchangeFund(), exchangeFee);\\n        baks.mint(core.developmentFund(), developmentFee);\\n        baks.mint(loan.borrower, loan.principalAmount);\\n\\n        uint256 id = loans.length;\\n        loan.id = id;\\n        loan.interest = core.interest();\\n\\n        loans.push(loan);\\n        loanIds[loan.borrower].push(id);\\n\\n        collateralTokens[loan.collateralToken].collateralAmount += loan.collateralAmount;\\n\\n        emit Borrow(\\n            id,\\n            loan.borrower,\\n            loan.collateralToken,\\n            loan.principalAmount,\\n            loan.collateralAmount,\\n            collateralTokens[loan.collateralToken].initialLoanToValueRatio\\n        );\\n\\n        return loan;\\n    }\\n\\n    function _deposit(uint256 loanId, uint256 amount) internal {\\n        if (amount == 0) {\\n            revert BaksDAODepositZeroAmount();\\n        }\\n\\n        Loan.Data storage loan = loans[loanId];\\n        loan.accrueInterest();\\n\\n        uint256 normalizedCollateralAmount = loan.collateralToken.normalizeAmount(amount);\\n        loan.collateralAmount += normalizedCollateralAmount;\\n        loan.lastInteractionAt = block.timestamp;\\n        collateralTokens[loan.collateralToken].collateralAmount += normalizedCollateralAmount;\\n\\n        emit Deposit(loanId, normalizedCollateralAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x5e51c6b088887840d859beaaf7b07cb0509f7f5fbae0c8c79902e425f435092d\",\"license\":\"BUSL-1.1\"},\"contracts/Core.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./libraries/Beneficiary.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\n\\ninterface ICore {\\n    /// @dev Thrown when trying to set platform fees that don't sum up to one.\\n    /// @param stabilizationFee The stabilization fee that was tried to set.\\n    /// @param exchangeFee The stabilization fee that was tried to set.\\n    /// @param developmentFee The stabilization fee that was tried to set.\\n    error BaksDAOPlatformFeesDontSumUpToOne(uint256 stabilizationFee, uint256 exchangeFee, uint256 developmentFee);\\n\\n    event PriceOracleUpdated(address priceOracle, address newPriceOracle);\\n\\n    event BaksUpdated(address baks, address newBaks);\\n    event VoiceUpdated(address voice, address newVoice);\\n\\n    event BankUpdated(address bank, address newBank);\\n    event DepositaryUpdated(address depositary, address newDepositary);\\n    event ExchangeFundUpdated(address exchangeFund, address newExchangeFund);\\n    event DevelopmentFundUpdated(address developmentFund, address newDevelopmentFund);\\n\\n    event OperatorUpdated(address operator, address newOperator);\\n    event LiquidatorUpdated(address liquidator, address newLiquidator);\\n\\n    event InterestUpdated(uint256 interest, uint256 newInterest);\\n    event MinimumPrincipalAmountUpdated(uint256 minimumPrincipalAmount, uint256 newMinimumPrincipalAmount);\\n    event StabilityFeeUpdated(uint256 stabilityFee, uint256 newStabilityFee);\\n    event RebalancingThresholdUpdated(uint256 rebalancingThreshold, uint256 newRebalancingThreshold);\\n    event PlatformFeesUpdated(\\n        uint256 stabilizationFee,\\n        uint256 newStabilizationFee,\\n        uint256 exchangeFee,\\n        uint256 newExchangeFee,\\n        uint256 developmentFee,\\n        uint256 newDevelopmentFee\\n    );\\n    event MarginCallLoanToValueRatioUpdated(uint256 marginCallLoanToValueRatio, uint256 newMarginCallLoanToValueRatio);\\n    event LiquidationLoanToValueRatioUpdated(\\n        uint256 liqudationLoanToValueRatio,\\n        uint256 newLiquidationLoanToValueRatio\\n    );\\n\\n    event MinimumMagisterDepositAmountUpdated(\\n        uint256 minimumMagisterDepositAmount,\\n        uint256 newMinimumMagisterDepositAmount\\n    );\\n    event WorkFeeUpdated(uint256 workFee, uint256 newWorkFee);\\n    event EarlyWithdrawalPeriodUpdated(uint256 earlyWithdrawalPeriod, uint256 newEarlyWithdrawalPeriod);\\n    event EarlyWithdrawalFeeUpdated(uint256 earlyWithdrawalFee, uint256 newEarlyWithdrawalFee);\\n\\n    event ServicingThresholdUpdated(uint256 servicingThreshold, uint256 newServicingThreshold);\\n    event MinimumLiquidityUpdated(uint256 minimumLiquidity, uint256 newMinimumLiquidity);\\n\\n    function wrappedNativeCurrency() external view returns (address);\\n\\n    function uniswapV2Router() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function baks() external view returns (address);\\n\\n    function voice() external view returns (address);\\n\\n    function bank() external view returns (address);\\n\\n    function depositary() external view returns (address);\\n\\n    function exchangeFund() external view returns (address);\\n\\n    function developmentFund() external view returns (address);\\n\\n    function operator() external view returns (address);\\n\\n    function liquidator() external view returns (address);\\n\\n    function interest() external view returns (uint256);\\n\\n    function minimumPrincipalAmount() external view returns (uint256);\\n\\n    function stabilityFee() external view returns (uint256);\\n\\n    function stabilizationFee() external view returns (uint256);\\n\\n    function exchangeFee() external view returns (uint256);\\n\\n    function developmentFee() external view returns (uint256);\\n\\n    function marginCallLoanToValueRatio() external view returns (uint256);\\n\\n    function liquidationLoanToValueRatio() external view returns (uint256);\\n\\n    function rebalancingThreshold() external view returns (uint256);\\n\\n    function minimumMagisterDepositAmount() external view returns (uint256);\\n\\n    function workFee() external view returns (uint256);\\n\\n    function earlyWithdrawalPeriod() external view returns (uint256);\\n\\n    function earlyWithdrawalFee() external view returns (uint256);\\n\\n    function servicingThreshold() external view returns (uint256);\\n\\n    function minimumLiquidity() external view returns (uint256);\\n\\n    function voiceMintingSchedule() external view returns (uint256[] memory);\\n\\n    function voiceTotalShares() external view returns (uint256);\\n\\n    function voiceMintingBeneficiaries() external view returns (uint256[] memory);\\n\\n    function isSuperUser(address account) external view returns (bool);\\n}\\n\\ncontract Core is Initializable, Governed, ICore {\\n    uint256 internal constant ONE = 100e16;\\n\\n    address public override wrappedNativeCurrency;\\n    address public override uniswapV2Router;\\n\\n    address public override priceOracle;\\n\\n    address public override baks;\\n    address public override voice;\\n\\n    address public override bank;\\n    address public override depositary;\\n    address public override exchangeFund;\\n    address public override developmentFund;\\n\\n    // Roles\\n    address public override operator;\\n    address public override liquidator;\\n\\n    // Bank parameters\\n    uint256 public override interest;\\n    uint256 public override minimumPrincipalAmount;\\n    uint256 public override stabilityFee;\\n    uint256 public override stabilizationFee;\\n    uint256 public override exchangeFee;\\n    uint256 public override developmentFee;\\n    uint256 public override marginCallLoanToValueRatio;\\n    uint256 public override liquidationLoanToValueRatio;\\n    uint256 public override rebalancingThreshold;\\n\\n    // Depositary parameters\\n    uint256 public override minimumMagisterDepositAmount;\\n    uint256 public override workFee;\\n    uint256 public override earlyWithdrawalPeriod;\\n    uint256 public override earlyWithdrawalFee;\\n\\n    // Exchange fund parameters\\n    uint256 public override servicingThreshold;\\n    uint256 public override minimumLiquidity;\\n\\n    // Voice\\n    uint256[] internal _voiceMintingSchedule;\\n    uint256[] internal _voiceMintingBeneficiaries;\\n    uint256 public override voiceTotalShares;\\n\\n    mapping(address => bool) public override isSuperUser;\\n\\n    function initialize(\\n        address _wrappedNativeCurrency,\\n        address _uniswapV2Router,\\n        address _operator,\\n        address _liquidator\\n    ) external initializer {\\n        setGovernor(msg.sender);\\n\\n        wrappedNativeCurrency = _wrappedNativeCurrency;\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        operator = _operator;\\n        liquidator = _liquidator;\\n\\n        interest = 11e16; // 11 %\\n        minimumPrincipalAmount = 50e18; // 50 BAKS\\n        stabilityFee = 15e15; // 1,5 %\\n        stabilizationFee = 85e16; // 85 %\\n        exchangeFee = 15e16; // 15 %\\n        developmentFee = 0;\\n        marginCallLoanToValueRatio = 75e16; // 75 %\\n        liquidationLoanToValueRatio = 83e16; // 83 %\\n        rebalancingThreshold = 1e16; // 1 %\\n\\n        minimumMagisterDepositAmount = 50000e18; // 50000 BAKS\\n        workFee = 2e16; // 2 %\\n        earlyWithdrawalPeriod = 72 hours;\\n        earlyWithdrawalFee = 1e15; // 0,1 %\\n\\n        servicingThreshold = 1e16; // 1%\\n        minimumLiquidity = 50000e18; // 50000 BAKS\\n\\n        _voiceMintingSchedule = [\\n            0x295be96e64066972000000,\\n            0x0422ca8b0a00a4250000000000000000295be96e64066972000000,\\n            0x084595161401484a000000000000000052b7d2dcc80cd2e4000000,\\n            0x108b2a2c28029094000000000000000052b7d2dcc80cd2e4000000,\\n            0x2116545850052128000000000000000052b7d2dcc80cd2e4000000,\\n            0x422ca8b0a00a4250000000000000000052b7d2dcc80cd2e4000000,\\n            0x84595161401484a0000000000000000052b7d2dcc80cd2e4000000,\\n            0x0108b2a2c280290940000000000000000052b7d2dcc80cd2e4000000,\\n            0x014adf4b7320334b90000000000000000052b7d2dcc80cd2e4000000,\\n            0x018d0bf423c03d8de0000000000000000052b7d2dcc80cd2e4000000,\\n            0x01cf389cd46047d030000000000000000052b7d2dcc80cd2e4000000,\\n            0x021165458500521280000000000000000052b7d2dcc80cd2e4000000,\\n            0x025391ee35a05c54d0000000000000000052b7d2dcc80cd2e4000000,\\n            0x0295be96e6406697200000000000000000a56fa5b99019a5c8000000,\\n            0x02d7eb3f96e070d9700000000000000000a56fa5b99019a5c8000000,\\n            0x031a17e847807b1bc00000000000000000a56fa5b99019a5c8000000,\\n            0x035c4490f820855e100000000000000000a56fa5b99019a5c8000000\\n        ];\\n\\n        isSuperUser[msg.sender] = true;\\n    }\\n\\n    function setPriceOracle(address newPriceOracle) external onlyGovernor {\\n        emit PriceOracleUpdated(priceOracle, newPriceOracle);\\n        priceOracle = newPriceOracle;\\n    }\\n\\n    function setBaks(address newBaks) external onlyGovernor {\\n        emit BaksUpdated(baks, newBaks);\\n        baks = newBaks;\\n    }\\n\\n    function setVoice(address newVoice) external onlyGovernor {\\n        emit VoiceUpdated(voice, newVoice);\\n        voice = newVoice;\\n    }\\n\\n    function setBank(address newBank) external onlyGovernor {\\n        emit BankUpdated(bank, newBank);\\n        bank = newBank;\\n    }\\n\\n    function setDepositary(address newDepositary) external onlyGovernor {\\n        emit DepositaryUpdated(depositary, newDepositary);\\n        depositary = newDepositary;\\n    }\\n\\n    function setExchangeFund(address newExchangeFund) external onlyGovernor {\\n        emit ExchangeFundUpdated(exchangeFund, newExchangeFund);\\n        exchangeFund = newExchangeFund;\\n    }\\n\\n    function setDevelopmentFund(address newDevelopmentFund) external onlyGovernor {\\n        emit DevelopmentFundUpdated(developmentFund, newDevelopmentFund);\\n        developmentFund = newDevelopmentFund;\\n    }\\n\\n    function setOperator(address newOperator) external onlyGovernor {\\n        emit OperatorUpdated(operator, newOperator);\\n        operator = newOperator;\\n    }\\n\\n    function setLiquidator(address newLiquidator) external onlyGovernor {\\n        emit LiquidatorUpdated(liquidator, newLiquidator);\\n        liquidator = newLiquidator;\\n    }\\n\\n    function setInterest(uint256 newInterest) external onlyGovernor {\\n        emit InterestUpdated(interest, newInterest);\\n        interest = newInterest;\\n    }\\n\\n    function setMinimumPrincipalAmount(uint256 newMinimumPrincipalAmount) external onlyGovernor {\\n        emit StabilityFeeUpdated(minimumPrincipalAmount, newMinimumPrincipalAmount);\\n        minimumPrincipalAmount = newMinimumPrincipalAmount;\\n    }\\n\\n    function setStabilityFee(uint256 newStabilityFee) external onlyGovernor {\\n        emit StabilityFeeUpdated(stabilityFee, newStabilityFee);\\n        stabilityFee = newStabilityFee;\\n    }\\n\\n    function setPlatformFees(\\n        uint256 newStabilizationFee,\\n        uint256 newExchangeFee,\\n        uint256 newDevelopmentFee\\n    ) external onlyGovernor {\\n        if (newStabilizationFee + newExchangeFee + newDevelopmentFee != ONE) {\\n            revert BaksDAOPlatformFeesDontSumUpToOne(newStabilizationFee, newExchangeFee, newDevelopmentFee);\\n        }\\n        emit PlatformFeesUpdated(\\n            stabilizationFee,\\n            newStabilizationFee,\\n            exchangeFee,\\n            newExchangeFee,\\n            developmentFee,\\n            newDevelopmentFee\\n        );\\n        stabilizationFee = newStabilizationFee;\\n        exchangeFee = newExchangeFee;\\n        developmentFee = newDevelopmentFee;\\n    }\\n\\n    function setMarginCallLoanToValueRatio(uint256 newMarginCallLoanToValueRatio) external onlyGovernor {\\n        emit MarginCallLoanToValueRatioUpdated(marginCallLoanToValueRatio, newMarginCallLoanToValueRatio);\\n        marginCallLoanToValueRatio = newMarginCallLoanToValueRatio;\\n    }\\n\\n    function setLiquidationLoanToValueRatio(uint256 newLiquidationLoanToValueRatio) external onlyGovernor {\\n        emit LiquidationLoanToValueRatioUpdated(liquidationLoanToValueRatio, newLiquidationLoanToValueRatio);\\n        liquidationLoanToValueRatio = newLiquidationLoanToValueRatio;\\n    }\\n\\n    function setRebalancingThreshold(uint256 newRebalancingThreshold) external onlyGovernor {\\n        emit RebalancingThresholdUpdated(rebalancingThreshold, newRebalancingThreshold);\\n        rebalancingThreshold = newRebalancingThreshold;\\n    }\\n\\n    function setMinimumMagisterDepositAmount(uint256 newMinimumMagisterDepositAmount) external onlyGovernor {\\n        emit MinimumMagisterDepositAmountUpdated(minimumMagisterDepositAmount, newMinimumMagisterDepositAmount);\\n        minimumMagisterDepositAmount = newMinimumMagisterDepositAmount;\\n    }\\n\\n    function setWorkFee(uint256 newWorkFee) external onlyGovernor {\\n        emit WorkFeeUpdated(workFee, newWorkFee);\\n        workFee = newWorkFee;\\n    }\\n\\n    function setEarlyWithdrawalPeriod(uint256 newEarlyWithdrawalPeriod) external onlyGovernor {\\n        emit EarlyWithdrawalPeriodUpdated(earlyWithdrawalPeriod, newEarlyWithdrawalPeriod);\\n        earlyWithdrawalPeriod = newEarlyWithdrawalPeriod;\\n    }\\n\\n    function setEarlyWithdrawalFee(uint256 newEarlyWithdrawalFee) external onlyGovernor {\\n        emit EarlyWithdrawalFeeUpdated(earlyWithdrawalFee, newEarlyWithdrawalFee);\\n        earlyWithdrawalFee = newEarlyWithdrawalFee;\\n    }\\n\\n    function setServicingThreshold(uint256 newServicingThreshold) external onlyGovernor {\\n        emit ServicingThresholdUpdated(servicingThreshold, newServicingThreshold);\\n        servicingThreshold = newServicingThreshold;\\n    }\\n\\n    function setMinimumLiquidity(uint256 newMinimumLiquidity) external onlyGovernor {\\n        emit MinimumLiquidityUpdated(minimumLiquidity, newMinimumLiquidity);\\n        minimumLiquidity = newMinimumLiquidity;\\n    }\\n\\n    function setVoiceMintingBeneficiaries(uint256[] calldata beneficiaries) external onlyGovernor {\\n        delete _voiceMintingBeneficiaries;\\n        _voiceMintingBeneficiaries = beneficiaries;\\n        voiceTotalShares = 0;\\n        for (uint256 i = 0; i < _voiceMintingBeneficiaries.length; i++) {\\n            (, uint256 share) = Beneficiary.split(_voiceMintingBeneficiaries[i]);\\n            voiceTotalShares += share;\\n        }\\n    }\\n\\n    function addSuperUser(address account) external onlyGovernor {\\n        isSuperUser[account] = true;\\n    }\\n\\n    function removeSuperUser(address account) external onlyGovernor {\\n        isSuperUser[account] = false;\\n    }\\n\\n    function voiceMintingBeneficiaries() external view override returns (uint256[] memory) {\\n        return _voiceMintingBeneficiaries;\\n    }\\n\\n    function voiceMintingSchedule() external view override returns (uint256[] memory) {\\n        return _voiceMintingSchedule;\\n    }\\n}\\n\\nabstract contract CoreInside {\\n    ICore public core;\\n\\n    error BaksDAOOnlyDepositaryAllowed();\\n    error BaksDAOOnlySuperUserAllowed();\\n\\n    modifier onlyDepositary() {\\n        if (msg.sender != address(core.depositary())) {\\n            revert BaksDAOOnlyDepositaryAllowed();\\n        }\\n        _;\\n    }\\n\\n    modifier onlySuperUser() {\\n        if (!core.isSuperUser(msg.sender)) {\\n            revert BaksDAOOnlySuperUserAllowed();\\n        }\\n        _;\\n    }\\n\\n    function initializeCoreInside(ICore _core) internal {\\n        core = _core;\\n    }\\n}\\n\",\"keccak256\":\"0x5a23b768a8129c8e1e8d263ac2271dcfc5d56c81d4cd5d9ca63ba2401fa40151\",\"license\":\"BUSL-1.1\"},\"contracts/Depositary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./libraries/AmountNormalization.sol\\\";\\nimport \\\"./libraries/Deposit.sol\\\";\\nimport \\\"./libraries/EnumerableAddressSet.sol\\\";\\nimport \\\"./libraries/FixedPointMath.sol\\\";\\nimport \\\"./libraries/Magister.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/Pool.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport {CoreInside, ICore} from \\\"./Core.sol\\\";\\nimport {Governed} from \\\"./Governance.sol\\\";\\nimport {IERC20} from \\\"./interfaces/ERC20.sol\\\";\\nimport {Initializable} from \\\"./libraries/Upgradability.sol\\\";\\nimport {IPriceOracle} from \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/IDepositary.sol\\\";\\nimport \\\"./interfaces/IBank.sol\\\";\\n\\nerror BaksDAOMagisterAlreadyWhitelisted(address magister);\\nerror BaksDAOMagisterBlacklisted(address magister);\\nerror BaksDAOOnlyDepositorOrMagisterAllowed();\\nerror BaksDAOWithdrawAmountExceedsPrincipal();\\nerror BaksDAOBelowMinimumMagisterDepositAmount();\\nerror BaksDAODepositZeroAmount();\\n\\ncontract Depositary is CoreInside, Governed, IDepositary, Initializable {\\n    using AmountNormalization for IERC20;\\n    using Deposit for Deposit.Data;\\n    using EnumerableAddressSet for EnumerableAddressSet.Set;\\n    using FixedPointMath for uint256;\\n    using Magister for Magister.Data;\\n    using Pool for Pool.Data;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant ONE = 100e16;\\n\\n    mapping(address => Magister.Data) public magisters;\\n    EnumerableAddressSet.Set internal magistersSet;\\n\\n    Pool.Data[] public pools;\\n\\n    Deposit.Data[] public deposits;\\n    mapping(uint256 => mapping(address => uint256)) public currentDepositIds;\\n\\n    event MagisterWhitelisted(address indexed magister);\\n    event MagisterBlacklisted(address indexed magister);\\n\\n    function initialize(ICore _core) external initializer {\\n        initializeCoreInside(_core);\\n        setGovernor(msg.sender);\\n\\n        // Add guard pool and deposit\\n        deposits.push(\\n            Deposit.Data({\\n                id: 0,\\n                isActive: false,\\n                depositor: address(0),\\n                magister: address(0),\\n                poolId: 0,\\n                principal: 0,\\n                depositorTotalAccruedRewards: 0,\\n                depositorWithdrawnRewards: 0,\\n                magisterTotalAccruedRewards: 0,\\n                magisterWithdrawnRewards: 0,\\n                createdAt: block.timestamp,\\n                lastDepositAt: block.timestamp,\\n                lastInteractionAt: block.timestamp,\\n                closedAt: block.timestamp\\n            })\\n        );\\n\\n        pools.push(\\n            Pool.Data({\\n                id: 0,\\n                depositToken: IERC20(address(0)),\\n                priceOracle: IPriceOracle(core.priceOracle()),\\n                isCompounding: false,\\n                depositsAmount: 0,\\n                depositorApr: 0,\\n                magisterApr: 0,\\n                depositorBonusApr: 0,\\n                magisterBonusApr: 0\\n            })\\n        );\\n    }\\n\\n    function deposit(uint256 poolId, uint256 amount) external {\\n        deposit(poolId, amount, address(this));\\n    }\\n\\n    function withdraw(uint256 depositId, uint256 amount) external {\\n        Deposit.Data storage d = deposits[depositId];\\n        Pool.Data storage p = pools[d.poolId];\\n\\n        if (!(msg.sender == d.depositor || msg.sender == d.magister)) {\\n            revert BaksDAOOnlyDepositorOrMagisterAllowed();\\n        }\\n\\n        uint256 normalizedAmount = p.depositToken.normalizeAmount(amount);\\n        accrueRewards(d.id);\\n\\n        uint256 magisterAmount = Math.min(d.magisterTotalAccruedRewards - d.magisterWithdrawnRewards, normalizedAmount);\\n        (\\n            uint256 depositorReward,\\n            uint256 depositorBonusReward,\\n            uint256 magisterReward,\\n            uint256 magisterBonusReward\\n        ) = splitRewards(d.poolId, d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards, magisterAmount);\\n\\n        if (msg.sender == d.magister) {\\n            IERC20(core.baks()).safeTransferFrom(core.exchangeFund(), d.magister, magisterReward);\\n            if (magisterBonusReward > 0) {\\n                IERC20(core.voice()).safeTransferFrom(core.exchangeFund(), d.magister, magisterBonusReward);\\n            }\\n\\n            d.magisterWithdrawnRewards += magisterAmount;\\n        } else {\\n            if (normalizedAmount > d.principal) {\\n                revert BaksDAOWithdrawAmountExceedsPrincipal();\\n            }\\n\\n            uint256 fee;\\n            if (p.isCompounding) {\\n                fee = core.workFee();\\n\\n                if (block.timestamp < d.lastDepositAt + core.earlyWithdrawalPeriod()) {\\n                    fee += core.earlyWithdrawalFee();\\n                }\\n\\n                depositorReward = depositorReward.mul(ONE - fee);\\n            }\\n\\n            if (p.depositToken != IERC20(core.baks()) && p.depositToken != IERC20(core.voice())) {\\n                p.depositToken.safeTransfer(d.depositor, normalizedAmount);\\n            }\\n            IERC20(core.baks()).safeTransferFrom(\\n                core.exchangeFund(),\\n                d.depositor,\\n                p.depositToken == IERC20(core.baks()) ? normalizedAmount + depositorReward : depositorReward\\n            );\\n            if (depositorBonusReward > 0) {\\n                IERC20(core.voice()).safeTransferFrom(core.exchangeFund(), d.depositor, depositorBonusReward);\\n            }\\n\\n            p.depositsAmount -= normalizedAmount;\\n            d.principal -= normalizedAmount;\\n            d.depositorWithdrawnRewards += d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards;\\n        }\\n\\n        d.lastInteractionAt = block.timestamp;\\n        if (d.principal == 0) {\\n            d.isActive = false;\\n            d.closedAt = block.timestamp;\\n            delete currentDepositIds[d.poolId][msg.sender];\\n        }\\n    }\\n\\n    function whitelistMagister(address magister) external onlyGovernor {\\n        if (magistersSet.contains(magister)) {\\n            revert BaksDAOMagisterAlreadyWhitelisted(magister);\\n        }\\n\\n        if (magistersSet.add(magister)) {\\n            Magister.Data storage m = magisters[magister];\\n            m.addr = magister;\\n            if (m.createdAt == 0) {\\n                m.createdAt = block.timestamp;\\n            }\\n            m.isActive = true;\\n\\n            emit MagisterWhitelisted(magister);\\n        }\\n    }\\n\\n    function blacklistMagister(address magister) external onlyGovernor {\\n        if (!magistersSet.contains(magister)) {\\n            revert BaksDAOMagisterBlacklisted(magister);\\n        }\\n\\n        if (magistersSet.remove(magister)) {\\n            magisters[magister].isActive = false;\\n            emit MagisterBlacklisted(magister);\\n        }\\n    }\\n\\n    function addPool(\\n        IERC20 depositToken,\\n        bool isCompounding,\\n        uint256 depositorApr,\\n        uint256 magisterApr,\\n        uint256 depositorBonusApr,\\n        uint256 magisterBonusApr\\n    ) external onlyGovernor {\\n        uint256 poolId = pools.length;\\n        pools.push(\\n            Pool.Data({\\n                id: poolId,\\n                depositToken: depositToken,\\n                priceOracle: IPriceOracle(core.priceOracle()),\\n                isCompounding: isCompounding,\\n                depositsAmount: 0,\\n                depositorApr: depositorApr,\\n                magisterApr: magisterApr,\\n                depositorBonusApr: depositorBonusApr,\\n                magisterBonusApr: magisterBonusApr\\n            })\\n        );\\n    }\\n\\n    function updatePool(\\n        uint256 poolId,\\n        bool isCompounding,\\n        uint256 depositorApr,\\n        uint256 magisterApr,\\n        uint256 depositorBonusApr,\\n        uint256 magisterBonusApr\\n    ) external onlyGovernor {\\n        Pool.Data storage pool = pools[poolId];\\n        pool.isCompounding = isCompounding;\\n        pool.depositorApr = depositorApr;\\n        pool.magisterApr = magisterApr;\\n        pool.depositorBonusApr = depositorBonusApr;\\n        pool.magisterBonusApr = magisterBonusApr;\\n    }\\n\\n    function getActiveMagisterAddresses() external view returns (address[] memory activeMagisterAddresses) {\\n        activeMagisterAddresses = magistersSet.elements;\\n    }\\n\\n    function getActiveMagisters() external view returns (Magister.Data[] memory activeMagisters) {\\n        uint256 length = magistersSet.elements.length;\\n        activeMagisters = new Magister.Data[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            activeMagisters[i] = magisters[magistersSet.elements[i]];\\n        }\\n    }\\n\\n    function getPoolsCount() external view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    function getPools() external view returns (Pool.Data[] memory) {\\n        return pools;\\n    }\\n\\n    function getMagisterDepositIds(address magister) external view returns (uint256[] memory) {\\n        return magisters[magister].depositIds;\\n    }\\n\\n    function getTotalValueLocked(IERC20 depositToken) external view returns (uint256 totalValueLocked) {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            if (pools[i].depositToken == depositToken) {\\n                totalValueLocked += pools[i].getDepositsValue();\\n            }\\n        }\\n    }\\n\\n    function getTotalValueLocked() external view returns (uint256 totalValueLocked) {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            totalValueLocked += pools[i].getDepositsValue();\\n        }\\n    }\\n\\n    function deposit(\\n        uint256 poolId,\\n        uint256 amount,\\n        address magister\\n    ) public {\\n        if (magister == msg.sender || !(magister == address(this) || magisters[magister].isActive)) {\\n            revert BaksDAOMagisterBlacklisted(magister);\\n        }\\n\\n        IERC20 baks = IERC20(core.baks());\\n        IERC20 voice = IERC20(core.voice());\\n\\n        Pool.Data storage p = pools[poolId];\\n        p.depositToken.safeTransferFrom(\\n            msg.sender,\\n            (p.depositToken == baks || p.depositToken == voice) ? core.exchangeFund() : address(this),\\n            amount\\n        );\\n\\n        uint256 normalizedAmount = p.depositToken.normalizeAmount(amount);\\n        p.depositsAmount += normalizedAmount;\\n\\n        if (currentDepositIds[poolId][msg.sender] == 0) {\\n            if (amount == 0) {\\n                revert BaksDAODepositZeroAmount();\\n            }\\n\\n            uint256 id = deposits.length;\\n            deposits.push(\\n                Deposit.Data({\\n                    id: id,\\n                    isActive: true,\\n                    magister: magister,\\n                    depositor: msg.sender,\\n                    poolId: poolId,\\n                    principal: normalizedAmount,\\n                    depositorTotalAccruedRewards: 0,\\n                    depositorWithdrawnRewards: 0,\\n                    magisterTotalAccruedRewards: 0,\\n                    magisterWithdrawnRewards: 0,\\n                    createdAt: block.timestamp,\\n                    lastDepositAt: block.timestamp,\\n                    lastInteractionAt: block.timestamp,\\n                    closedAt: 0\\n                })\\n            );\\n\\n            currentDepositIds[poolId][msg.sender] = id;\\n            if (magister != address(this)) {\\n                uint256 depositTokenPrice = IPriceOracle(core.priceOracle()).getNormalizedPrice(p.depositToken);\\n                if (normalizedAmount.mul(depositTokenPrice) < core.minimumMagisterDepositAmount()) {\\n                    revert BaksDAOBelowMinimumMagisterDepositAmount();\\n                }\\n\\n                magisters[magister].depositIds.push(id);\\n            }\\n            if (p.depositToken != baks) {\\n                IBank(core.bank()).onNewDeposit(p.depositToken, normalizedAmount);\\n            }\\n        } else {\\n            Deposit.Data storage d = deposits[currentDepositIds[poolId][msg.sender]];\\n            accrueRewards(d.id);\\n\\n            uint256 r = d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards;\\n            (uint256 depositorRewards, uint256 depositorBonusRewards, , ) = splitRewards(d.poolId, r, 0);\\n            baks.safeTransferFrom(core.exchangeFund(), d.depositor, depositorRewards);\\n            if (depositorBonusRewards > 0) {\\n                voice.safeTransferFrom(core.exchangeFund(), d.depositor, depositorBonusRewards);\\n            }\\n\\n            d.principal += normalizedAmount;\\n            d.depositorWithdrawnRewards += r;\\n            d.lastDepositAt = block.timestamp;\\n            d.lastInteractionAt = block.timestamp;\\n        }\\n    }\\n\\n    function getRewards(uint256 depositId) public view returns (uint256 depositorRewards, uint256 magisterRewards) {\\n        Deposit.Data memory d = deposits[depositId];\\n\\n        (uint256 dr, uint256 mr) = calculateRewards(depositId);\\n        depositorRewards = dr + d.depositorTotalAccruedRewards - d.depositorWithdrawnRewards;\\n        magisterRewards = mr + d.magisterTotalAccruedRewards - d.magisterWithdrawnRewards;\\n    }\\n\\n    function accrueRewards(uint256 depositId) internal {\\n        (uint256 depositorRewards, uint256 magisterRewards) = calculateRewards(depositId);\\n\\n        Deposit.Data storage d = deposits[depositId];\\n        IERC20 depositToken = pools[d.poolId].depositToken;\\n        uint256 depositTokenPrice = depositToken == IERC20(core.baks())\\n            ? ONE\\n            : IPriceOracle(core.priceOracle()).getNormalizedPrice(depositToken);\\n        if (d.magister != address(this) && magisters[d.magister].isActive) {\\n            d.magisterTotalAccruedRewards += magisterRewards;\\n            magisters[d.magister].totalIncome += magisterRewards.mul(depositTokenPrice);\\n        }\\n\\n        d.depositorTotalAccruedRewards += depositorRewards;\\n        if (magisters[msg.sender].isActive) {\\n            magisters[d.magister].totalIncome += depositorRewards.mul(depositTokenPrice);\\n        }\\n    }\\n\\n    function calculateRewards(uint256 depositId)\\n        internal\\n        view\\n        returns (uint256 depositorRewards, uint256 magisterRewards)\\n    {\\n        Deposit.Data memory d = deposits[depositId];\\n        Pool.Data memory p = pools[d.poolId];\\n\\n        uint256 totalRewards = d.principal.mul(\\n            p.calculateMultiplier(core.workFee(), block.timestamp - d.lastInteractionAt)\\n        );\\n        uint256 totalApr = p.getTotalApr();\\n\\n        depositorRewards = totalRewards.mulDiv(p.getDepositorApr(), totalApr);\\n        magisterRewards = totalRewards.mulDiv(p.getMagisterApr(), totalApr);\\n    }\\n\\n    function splitRewards(\\n        uint256 poolId,\\n        uint256 _depositorRewards,\\n        uint256 _magisterRewards\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 depositorRewards,\\n            uint256 depositorBonusRewards,\\n            uint256 magisterRewards,\\n            uint256 magisterBonusRewards\\n        )\\n    {\\n        IPriceOracle priceOracle = IPriceOracle(core.priceOracle());\\n\\n        Pool.Data memory p = pools[poolId];\\n\\n        uint256 depositorTotalApr = p.getDepositorApr();\\n        uint256 magisterTotalApr = p.getMagisterApr();\\n        uint256 depositTokenPrice = p.depositToken == IERC20(core.baks())\\n            ? ONE\\n            : priceOracle.getNormalizedPrice(p.depositToken);\\n\\n        depositorRewards = _depositorRewards.mul(depositTokenPrice);\\n        magisterRewards = _magisterRewards.mul(depositTokenPrice);\\n\\n        try priceOracle.getNormalizedPrice(IERC20(core.voice())) returns (uint256 bonusTokenPrice) {\\n            if (bonusTokenPrice > 0) {\\n                depositorBonusRewards = depositorRewards.mulDiv(\\n                    p.depositorBonusApr.mul(bonusTokenPrice),\\n                    depositorTotalApr\\n                );\\n                magisterBonusRewards = magisterRewards.mulDiv(\\n                    p.magisterBonusApr.mul(bonusTokenPrice),\\n                    magisterTotalApr\\n                );\\n\\n                depositorRewards = depositorRewards.mulDiv(p.depositorApr, depositorTotalApr);\\n                magisterRewards = magisterRewards.mulDiv(p.magisterApr, magisterTotalApr);\\n            }\\n        } catch {}\\n    }\\n}\\n\",\"keccak256\":\"0xe1c4f78acad18871ee6973d6f6e1e73dbbefe43e168125650053023e6a87681e\",\"license\":\"BUSL-1.1\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nerror GovernedOnlyGovernorAllowedToCall();\\nerror GovernedOnlyPendingGovernorAllowedToCall();\\nerror GovernedGovernorZeroAddress();\\nerror GovernedCantGoverItself();\\n\\nabstract contract Governed {\\n    address public governor;\\n    address public pendingGovernor;\\n\\n    event PendingGovernanceTransition(address indexed governor, address indexed newGovernor);\\n    event GovernanceTransited(address indexed governor, address indexed newGovernor);\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor) {\\n            revert GovernedOnlyGovernorAllowedToCall();\\n        }\\n        _;\\n    }\\n\\n    function transitGovernance(address newGovernor, bool force) external onlyGovernor {\\n        if (newGovernor == address(0)) {\\n            revert GovernedGovernorZeroAddress();\\n        }\\n        if (newGovernor == address(this)) {\\n            revert GovernedCantGoverItself();\\n        }\\n\\n        pendingGovernor = newGovernor;\\n        if (!force) {\\n            emit PendingGovernanceTransition(governor, newGovernor);\\n        } else {\\n            setGovernor(newGovernor);\\n        }\\n    }\\n\\n    function acceptGovernance() external {\\n        if (msg.sender != pendingGovernor) {\\n            revert GovernedOnlyPendingGovernorAllowedToCall();\\n        }\\n\\n        governor = pendingGovernor;\\n        emit GovernanceTransited(governor, pendingGovernor);\\n    }\\n\\n    function setGovernor(address newGovernor) internal {\\n        governor = newGovernor;\\n        emit GovernanceTransited(governor, newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x39eb94fcb72876408caf31d462e821259a1a35a48f56fafb09b442283432dd71\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IMintableAndBurnableERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x88fd15d408cc6fc41f6aecff5e0722a8b3ec59bc306635524e43715b3e2bf5c1\",\"license\":\"MIT\"},\"contracts/interfaces/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\n\\ninterface IBank {\\n    function onNewDeposit(IERC20 token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x627339a097eeb92e796afd39cc4b17f3d29c20b0caa5f1be781c7b5fec81378f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDepositary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\n\\ninterface IDepositary {\\n    function getTotalValueLocked() external view returns (uint256 totalValueLocked);\\n\\n    function getTotalValueLocked(IERC20 depositToken) external view returns (uint256 totalValueLocked);\\n}\\n\",\"keccak256\":\"0x5a9485a57234d5dc1f5c3c8cb7a9e48312c0e7f81a0a95dbe2ce7b68897be36a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\nimport \\\"./../libraries/FixedPointMath.sol\\\";\\n\\n/// @notice Thrown when oracle doesn't provide price for `token` token.\\n/// @param token The address of the token contract.\\nerror PriceOracleTokenUnknown(IERC20 token);\\n/// @notice Thrown when oracle provide stale price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleStalePrice(IERC20 token, uint256 price);\\n/// @notice Thrown when oracle provide negative, zero or in other ways invalid price `price` for `token` token.\\n/// @param token The address of the token contract.\\n/// @param price Provided price.\\nerror PriceOracleInvalidPrice(IERC20 token, int256 price);\\n\\ninterface IPriceOracle {\\n    /// @notice Gets normalized to 18 decimals price for the `token` token.\\n    /// @param token The address of the token contract.\\n    /// @return normalizedPrice Normalized price.\\n    function getNormalizedPrice(IERC20 token) external view returns (uint256 normalizedPrice);\\n}\\n\",\"keccak256\":\"0x3cfee478a9d2c5f5e7af40f2daedbce24d01ec3f552a21a9ac719fcef21d22c7\",\"license\":\"MIT\"},\"contracts/interfaces/IWrappedNativeCurrency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./ERC20.sol\\\";\\n\\ninterface IWrappedNativeCurrency is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0f0c790fb745fa55bd6d0cac3bab3b76aab9e2622b266b89d89dc1595556dc97\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror CallToNonContract(address target);\\n\\nlibrary Address {\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.call(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function delegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (!isContract(target)) {\\n            revert CallToNonContract(target);\\n        }\\n\\n        (bool success, bytes memory returnData) = target.delegatecall(data);\\n        return verifyCallResult(success, returnData, errorMessage);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(account)\\n        }\\n\\n        return codeSize > 0;\\n    }\\n\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returnData,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returnData;\\n        } else {\\n            if (returnData.length > 0) {\\n                assembly {\\n                    let returnDataSize := mload(returnData)\\n                    revert(add(returnData, 32), returnDataSize)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba7550b67e8e597fcbc05c61eb85d739d80547eb243b78dd1bfa933e8a3490f1\",\"license\":\"MIT\"},\"contracts/libraries/AmountNormalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\n\\nlibrary AmountNormalization {\\n    uint8 internal constant DECIMALS = 18;\\n\\n    function normalizeAmount(IERC20 self, uint256 denormalizedAmount) internal view returns (uint256 normalizedAmount) {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return denormalizedAmount * scale;\\n        }\\n        return denormalizedAmount;\\n    }\\n\\n    function denormalizeAmount(IERC20 self, uint256 normalizedAmount)\\n        internal\\n        view\\n        returns (uint256 denormalizedAmount)\\n    {\\n        uint256 scale = 10**(DECIMALS - self.decimals());\\n        if (scale != 1) {\\n            return normalizedAmount / scale;\\n        }\\n        return normalizedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x03e0ddb89c09023fd87f8af4db51bf903effbf488cbd28162f0bfb363f1c9058\",\"license\":\"MIT\"},\"contracts/libraries/Beneficiary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Beneficiary {\\n    function split(uint256 b) internal pure returns (address beneficiary, uint256 share) {\\n        share = b & type(uint96).max;\\n        beneficiary = address(uint160(b >> 96));\\n    }\\n}\\n\",\"keccak256\":\"0xf0d91a872e949239988ee480caa56123a7f2f9c2cf565412aab336433d93acfe\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/CollateralToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport \\\"./Loan.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary CollateralToken {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        IERC20 collateralToken;\\n        IPriceOracle priceOracle;\\n        uint256 stabilityFee;\\n        uint256 stabilizationFee;\\n        uint256 exchangeFee;\\n        uint256 developmentFee;\\n        uint256 initialLoanToValueRatio;\\n        uint256 marginCallLoanToValueRatio;\\n        uint256 liquidationLoanToValueRatio;\\n        uint256 collateralAmount;\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n\\n    function calculateLoanByPrincipalAmount(Data memory self, uint256 principalAmount)\\n        internal\\n        view\\n        returns (\\n            Loan.Data memory loan,\\n            uint256 exchangeFee,\\n            uint256 developmentFee,\\n            uint256 stabilityFee\\n        )\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n\\n        uint256 restOfIssuance = principalAmount.mul(ONE - self.initialLoanToValueRatio).div(\\n            self.initialLoanToValueRatio\\n        );\\n        uint256 stabilizationFee = restOfIssuance.mul(self.stabilizationFee);\\n        exchangeFee = restOfIssuance.mul(self.exchangeFee);\\n        developmentFee = restOfIssuance.mul(self.developmentFee);\\n\\n        uint256 collateralAmount = principalAmount.div(self.initialLoanToValueRatio.mul(collateralTokenPrice));\\n        stabilityFee = self.stabilityFee.mul(principalAmount).div(collateralTokenPrice);\\n\\n        loan = Loan.Data({\\n            id: 0,\\n            isActive: true,\\n            borrower: msg.sender,\\n            collateralToken: self.collateralToken,\\n            isNativeCurrency: false,\\n            priceOracle: self.priceOracle,\\n            interest: 0,\\n            stabilizationFee: stabilizationFee,\\n            principalAmount: principalAmount,\\n            interestAmount: 0,\\n            collateralAmount: collateralAmount,\\n            lastInteractionAt: block.timestamp\\n        });\\n    }\\n\\n    function calculateLoanByCollateralAmount(Data memory self, uint256 collateralAmount)\\n        internal\\n        view\\n        returns (\\n            Loan.Data memory loan,\\n            uint256 exchangeFee,\\n            uint256 developmentFee,\\n            uint256 stabilityFee\\n        )\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        uint256 principalAmount = collateralAmount.mul(self.initialLoanToValueRatio).mul(collateralTokenPrice);\\n\\n        uint256 restOfIssuance = principalAmount.mul(ONE - self.initialLoanToValueRatio).div(\\n            self.initialLoanToValueRatio\\n        );\\n        uint256 stabilizationFee = restOfIssuance.mul(self.stabilizationFee);\\n        exchangeFee = restOfIssuance.mul(self.exchangeFee);\\n        developmentFee = restOfIssuance.mul(self.developmentFee);\\n\\n        stabilityFee = self.stabilityFee.mul(principalAmount).div(collateralTokenPrice);\\n\\n        loan = Loan.Data({\\n            id: 0,\\n            isActive: true,\\n            borrower: msg.sender,\\n            collateralToken: self.collateralToken,\\n            isNativeCurrency: false,\\n            priceOracle: self.priceOracle,\\n            stabilizationFee: stabilizationFee,\\n            interest: 0,\\n            principalAmount: principalAmount,\\n            interestAmount: 0,\\n            collateralAmount: collateralAmount,\\n            lastInteractionAt: block.timestamp\\n        });\\n    }\\n\\n    function calculateLoanBySecurityAmount(Data memory self, uint256 securityAmount)\\n        internal\\n        view\\n        returns (\\n            Loan.Data memory loan,\\n            uint256 exchangeFee,\\n            uint256 developmentFee,\\n            uint256 stabilityFee\\n        )\\n    {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        uint256 c = self.stabilityFee.mul(self.initialLoanToValueRatio);\\n        uint256 principalAmount = securityAmount.mul(self.initialLoanToValueRatio).mul(collateralTokenPrice).div(\\n            c + ONE\\n        );\\n        return calculateLoanByPrincipalAmount(self, principalAmount);\\n    }\\n\\n    function getCollateralValue(Data memory self) internal view returns (uint256 collateralValue) {\\n        if (self.collateralAmount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        collateralValue = self.collateralAmount.mul(collateralTokenPrice);\\n    }\\n}\\n\",\"keccak256\":\"0x88ce6329d04c1572b226cd170c87a68a09dba0feea6d6cd6cdb87617d5cce83c\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Deposit {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        uint256 id;\\n        bool isActive;\\n        address depositor;\\n        address magister;\\n        uint256 poolId;\\n        uint256 principal;\\n        uint256 depositorTotalAccruedRewards;\\n        uint256 depositorWithdrawnRewards;\\n        uint256 magisterTotalAccruedRewards;\\n        uint256 magisterWithdrawnRewards;\\n        uint256 createdAt;\\n        uint256 lastDepositAt;\\n        uint256 lastInteractionAt;\\n        uint256 closedAt;\\n    }\\n}\\n\",\"keccak256\":\"0xea20fe116cc1d8c2d51be9ffde213a70217db2014d2a3eeea468b0cce6bbb1d1\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/EnumerableAddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary EnumerableAddressSet {\\n    struct Set {\\n        address[] elements;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    function add(Set storage self, address element) internal returns (bool) {\\n        if (contains(self, element)) {\\n            return false;\\n        }\\n\\n        self.elements.push(element);\\n        self.indexes[element] = self.elements.length;\\n\\n        return true;\\n    }\\n\\n    function remove(Set storage self, address element) internal returns (bool) {\\n        uint256 elementIndex = indexOf(self, element);\\n        if (elementIndex == 0) {\\n            return false;\\n        }\\n\\n        uint256 indexToRemove = elementIndex - 1;\\n        uint256 lastIndex = count(self) - 1;\\n        if (indexToRemove != lastIndex) {\\n            address lastElement = self.elements[lastIndex];\\n            self.elements[indexToRemove] = lastElement;\\n            self.indexes[lastElement] = elementIndex;\\n        }\\n        self.elements.pop();\\n        delete self.indexes[element];\\n\\n        return true;\\n    }\\n\\n    function indexOf(Set storage self, address element) internal view returns (uint256) {\\n        return self.indexes[element];\\n    }\\n\\n    function contains(Set storage self, address element) internal view returns (bool) {\\n        return indexOf(self, element) != 0;\\n    }\\n\\n    function count(Set storage self) internal view returns (uint256) {\\n        return self.elements.length;\\n    }\\n}\\n\",\"keccak256\":\"0x5a89f77a4b785e811178f5043d48315fc0ec91b362cd08eca73309ddbff4a654\",\"license\":\"MIT\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./Math.sol\\\";\\n\\nerror FixedPointMathMulDivOverflow(uint256 prod1, uint256 denominator);\\nerror FixedPointMathExpArgumentTooBig(uint256 a);\\nerror FixedPointMathExp2ArgumentTooBig(uint256 a);\\nerror FixedPointMathLog2ArgumentTooBig(uint256 a);\\n\\n/// @title Fixed point math implementation\\nlibrary FixedPointMath {\\n    uint256 internal constant SCALE = 1e18;\\n    uint256 internal constant HALF_SCALE = 5e17;\\n    /// @dev Largest power of two divisor of scale.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n    /// @dev Scale inverted mod 2**256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert FixedPointMathMulDivOverflow(prod1, SCALE);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(a, b, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := add(div(prod0, SCALE), roundUpUnit)\\n            }\\n            return result;\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        result = mulDiv(a, SCALE, b);\\n    }\\n\\n    /// @notice Calculates \\u230aa \\u00d7 b \\u00f7 denominator\\u230b with full precision.\\n    /// @dev Credit to Remco Bloemen under MIT license https://2\\u03c0.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= denominator) {\\n            revert FixedPointMathMulDivOverflow(prod1, denominator);\\n        }\\n\\n        if (prod1 == 0) {\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        unchecked {\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                denominator := div(denominator, lpotdod)\\n                prod0 := div(prod0, lpotdod)\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n            prod0 |= prod1 * lpotdod;\\n\\n            uint256 inverse = (3 * denominator) ^ 2;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n            inverse *= 2 - denominator * inverse;\\n\\n            result = prod0 * inverse;\\n        }\\n    }\\n\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        if (x >= 133_084258667509499441) {\\n            revert FixedPointMathExpArgumentTooBig(x);\\n        }\\n\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        if (x >= 192e18) {\\n            revert FixedPointMathExp2ArgumentTooBig(x);\\n        }\\n\\n        unchecked {\\n            x = (x << 64) / SCALE;\\n\\n            result = 0x800000000000000000000000000000000000000000000000;\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert FixedPointMathLog2ArgumentTooBig(x);\\n        }\\n        unchecked {\\n            uint256 n = Math.mostSignificantBit(x / SCALE);\\n\\n            result = n * SCALE;\\n\\n            uint256 y = x >> n;\\n\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                if (y >= 2 * SCALE) {\\n                    result += delta;\\n\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x71c26d3323eefeb3c355a976ba14a02ed35bb9dc461dae1b832cae44058aa0ff\",\"license\":\"MIT\"},\"contracts/libraries/Loan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Loan {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        uint256 id;\\n        bool isActive;\\n        address borrower;\\n        IERC20 collateralToken;\\n        bool isNativeCurrency;\\n        IPriceOracle priceOracle;\\n        uint256 interest;\\n        uint256 stabilizationFee;\\n        uint256 principalAmount;\\n        uint256 interestAmount;\\n        uint256 collateralAmount;\\n        uint256 lastInteractionAt;\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n    uint256 internal constant SECONDS_PER_YEAR = 31557600;\\n\\n    function accrueInterest(Data storage self) internal {\\n        self.interestAmount += calculateInterest(self);\\n    }\\n\\n    function calculateInterest(Data memory self) internal view returns (uint256 interest) {\\n        interest = self.principalAmount.mul(self.interest).mul(\\n            (block.timestamp - self.lastInteractionAt).mulDiv(ONE, SECONDS_PER_YEAR)\\n        );\\n    }\\n\\n    function getCollateralValue(Data memory self) internal view returns (uint256 collateralValue) {\\n        uint256 collateralTokenPrice = self.priceOracle.getNormalizedPrice(self.collateralToken);\\n        collateralValue = self.collateralAmount.mul(collateralTokenPrice);\\n    }\\n\\n    function calculateLoanToValueRatio(Data memory self) internal view returns (uint256 loanToValueRatio) {\\n        if (self.principalAmount == 0) {\\n            return 0;\\n        }\\n        if (self.collateralAmount == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        loanToValueRatio = (self.principalAmount + calculateInterest(self)).div(getCollateralValue(self));\\n    }\\n}\\n\",\"keccak256\":\"0xcac92515a9deaec5e3f867584a6972caf19ad3752b97e33eb8266179ef5ff690\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Magister.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Magister {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        bool isActive;\\n        uint256 createdAt;\\n        address addr;\\n        uint256 totalIncome;\\n        uint256[] depositIds;\\n    }\\n}\\n\",\"keccak256\":\"0x7026bf2388976af39a24b77c68b48759efefc66073885ec99c17a4dbe40ce53f\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary Math {\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a >= 0 ? uint256(a) : uint256(-a);\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n        uint256 xAux = x;\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        uint256 repeat = 7;\\n        while (repeat > 0) {\\n            result = (result + x / result) >> 1;\\n            repeat--;\\n        }\\n        uint256 roundedDownResult = x / result;\\n\\n        return result >= roundedDownResult ? roundedDownResult : result;\\n    }\\n\\n    function fpsqrt(uint256 a) internal pure returns (uint256 result) {\\n        if (a == 0) result = 0;\\n        else result = sqrt(a) * 1e9;\\n    }\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x65702f55f84a336879fb5ce6747897873c83742a496b759b105326346934b7da\",\"license\":\"MIT\"},\"contracts/libraries/MintingStage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary MintingStage {\\n    function split(uint256 mintingStage) internal pure returns (uint256 totalValueLocked, uint256 amount) {\\n        amount = mintingStage & type(uint128).max;\\n        totalValueLocked = mintingStage >> 128;\\n    }\\n}\\n\",\"keccak256\":\"0x244d6fd9a4f17bfa476a2b1a8e8e3ae420daeaf5afd4cd72e44a0a4e915f886f\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./FixedPointMath.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport {IPriceOracle} from \\\"./../interfaces/IPriceOracle.sol\\\";\\n\\nlibrary Pool {\\n    using FixedPointMath for uint256;\\n\\n    struct Data {\\n        uint256 id;\\n        IERC20 depositToken;\\n        IPriceOracle priceOracle;\\n        bool isCompounding;\\n        uint256 depositsAmount;\\n        uint256 depositorApr;\\n        uint256 magisterApr;\\n        uint256 depositorBonusApr;\\n        uint256 magisterBonusApr;\\n    }\\n\\n    uint256 internal constant ONE = 100e16;\\n    uint256 internal constant SECONDS_PER_YEAR = 31557600;\\n\\n    function getDepositsValue(Data memory self) internal view returns (uint256 depositsValue) {\\n        if (self.depositsAmount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 depositTokenPrice = self.priceOracle.getNormalizedPrice(self.depositToken);\\n        depositsValue = self.depositsAmount.mul(depositTokenPrice);\\n    }\\n\\n    function calculateMultiplier(\\n        Data memory self,\\n        uint256 fee,\\n        uint256 timeDelta\\n    ) internal pure returns (uint256 multiplier) {\\n        uint256 totalApr = getTotalApr(self);\\n        if (!self.isCompounding) {\\n            multiplier = totalApr.mul(timeDelta.mulDiv(ONE, SECONDS_PER_YEAR));\\n        } else {\\n            multiplier =\\n                FixedPointMath.pow(ONE + (ONE - fee).mul(totalApr).div(SECONDS_PER_YEAR * ONE), timeDelta * ONE) -\\n                ONE;\\n        }\\n    }\\n\\n    function getDepositorApr(Data memory self) internal pure returns (uint256 depositorApr) {\\n        depositorApr = self.depositorApr + self.depositorBonusApr;\\n    }\\n\\n    function getMagisterApr(Data memory self) internal pure returns (uint256 magisterApr) {\\n        magisterApr = self.magisterApr + self.magisterBonusApr;\\n    }\\n\\n    function getTotalApr(Data memory self) internal pure returns (uint256 totalApr) {\\n        totalApr = getDepositorApr(self) + getMagisterApr(self);\\n    }\\n}\\n\",\"keccak256\":\"0xdb3ceb72979d35ec6fea033784e5f06893c5138bad5001ef3d15f1c343ea4564\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror ReentrancyGuardReentrantCall();\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private status;\\n\\n    modifier nonReentrant() {\\n        if (status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        status = ENTERED;\\n\\n        _;\\n\\n        status = NOT_ENTERED;\\n    }\\n\\n    function initializeReentrancyGuard() internal {\\n        status = NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x835209f9c4f205f63add0eef372bfec3798a89d40f83e70262128edc81a49115\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"./../interfaces/ERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\nerror SafeERC20NoReturnData();\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        callWithOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, amount));\\n    }\\n\\n    function callWithOptionalReturn(IERC20 token, bytes memory data) internal {\\n        address tokenAddress = address(token);\\n\\n        bytes memory returnData = tokenAddress.functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returnData.length > 0) {\\n            if (!abi.decode(returnData, (bool))) {\\n                revert SafeERC20NoReturnData();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bf8463bfe7a7352ddc06faf7069e89e1028d1c6dc8d4b34f59fb7eb869b661c\",\"license\":\"MIT\"},\"contracts/libraries/Upgradability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./Address.sol\\\";\\n\\nerror EIP1967ImplementationIsNotContract(address implementation);\\nerror ContractAlreadyInitialized();\\nerror OnlyProxyCallAllowed();\\nerror OnlyCurrentImplementationAllowed();\\n\\nlibrary EIP1967 {\\n    using Address for address;\\n\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    event Upgraded(address indexed newImplementation);\\n\\n    function upgradeTo(address newImplementation) internal {\\n        if (!newImplementation.isContract()) {\\n            revert EIP1967ImplementationIsNotContract(newImplementation);\\n        }\\n\\n        assembly {\\n            sstore(IMPLEMENTATION_SLOT, newImplementation)\\n        }\\n\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    function getImplementation() internal view returns (address implementation) {\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_SLOT)\\n        }\\n    }\\n}\\n\\ncontract Proxy {\\n    using Address for address;\\n\\n    constructor(address implementation, bytes memory data) {\\n        EIP1967.upgradeTo(implementation);\\n        implementation.delegateCall(data, \\\"Proxy: construction failed\\\");\\n    }\\n\\n    receive() external payable {\\n        delegateCall();\\n    }\\n\\n    fallback() external payable {\\n        delegateCall();\\n    }\\n\\n    function delegateCall() internal {\\n        address implementation = EIP1967.getImplementation();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Upgradeable {\\n    address private immutable self = address(this);\\n\\n    modifier onlyProxy() {\\n        if (address(this) == self) {\\n            revert OnlyProxyCallAllowed();\\n        }\\n        if (EIP1967.getImplementation() != self) {\\n            revert OnlyCurrentImplementationAllowed();\\n        }\\n        _;\\n    }\\n\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        EIP1967.upgradeTo(newImplementation);\\n    }\\n}\\n\\nabstract contract Initializable {\\n    bool private initializing;\\n    bool private initialized;\\n\\n    modifier initializer() {\\n        if (!initializing && initialized) {\\n            revert ContractAlreadyInitialized();\\n        }\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3091e63c4fcc7642bcc850ec9c37030b6b7c0c210dcace49f8ba2b930211f88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615ab980620000216000396000f3fe6080604052600436106102025760003560e01c8063b26025aa1161011d578063d8aed145116100b0578063e1ec3c681161007f578063e3056a3411610064578063e3056a34146107a6578063e3930249146107c6578063f2f4eb26146107e657600080fd5b8063e1ec3c68146106fb578063e2bbb1581461078657600080fd5b8063d8aed14514610661578063d988ef2014610681578063ddc12526146106ae578063dfe8f671146106ce57600080fd5b8063cada1a46116100ec578063cada1a4614610548578063cf1762251461055d578063cffbc2971461057f578063d34cf64c1461064e57600080fd5b8063b26025aa146104d3578063b38e4816146104e8578063c4d66de814610508578063c78bede81461052857600080fd5b80634b8a35291161019557806387eae8191161016457806387eae819146104535780638e877d99146104735780638fa1552e146104935780639a5872f4146104b357600080fd5b80634b8a3529146103de57806369dae6c6146103fe5780637d7c2a1c1461041e578063863a03e01461043357600080fd5b8063238efcbc116101d1578063238efcbc14610359578063415f12401461036e57806344dbdd901461038e5780634721f2db146103be57600080fd5b80630b5a017a146102b45780630c340a24146102dd57806314706e14146103155780631cec9e751461033957600080fd5b366102af5760008054906101000a90046001600160a01b03166001600160a01b031663e7f3028c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027c919061539a565b6001600160a01b0316336001600160a01b0316146102ad57604051634b908c4f60e01b815260040160405180910390fd5b005b600080fd5b6102c76102c23660046153b7565b610806565b6040516102d4919061548e565b60405180910390f35b3480156102e957600080fd5b506001546102fd906001600160a01b031681565b6040516001600160a01b0390911681526020016102d4565b34801561032157600080fd5b5061032b60095481565b6040519081526020016102d4565b34801561034557600080fd5b5061032b6103543660046153b7565b610a8b565b34801561036557600080fd5b506102ad610b6d565b34801561037a57600080fd5b506102ad6103893660046153b7565b610be6565b34801561039a57600080fd5b506103ae6103a936600461549d565b611050565b6040516102d494939291906154c9565b3480156103ca57600080fd5b506102ad6103d936600461549d565b611100565b3480156103ea57600080fd5b506102c76103f936600461549d565b61120f565b34801561040a57600080fd5b5061032b6104193660046154f6565b61134d565b34801561042a57600080fd5b506102ad6114d3565b34801561043f57600080fd5b506102ad61044e3660046154f6565b61181d565b34801561045f57600080fd5b506102ad61046e36600461549d565b6119ff565b34801561047f57600080fd5b506102ad61048e36600461549d565b61207e565b34801561049f57600080fd5b506103ae6104ae36600461549d565b6125ed565b3480156104bf57600080fd5b5061032b6104ce3660046153b7565b61268d565b3480156104df57600080fd5b5061032b612768565b3480156104f457600080fd5b506103ae61050336600461549d565b612937565b34801561051457600080fd5b506102ad6105233660046154f6565b6129d7565b34801561053457600080fd5b506102ad6105433660046154f6565b612adf565b34801561055457600080fd5b506102ad612bf2565b34801561056957600080fd5b50610572612fda565b6040516102d49190615513565b34801561058b57600080fd5b506105f961059a3660046154f6565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015496860154600787015460088801546009909801546001600160a01b0397881699979096169794969395929491929091908a565b604080516001600160a01b039b8c1681529a90991660208b0152978901969096526060880194909452608087019290925260a086015260c085015260e0840152610100830152610120820152610140016102d4565b6102ad61065c3660046153b7565b61318c565b34801561066d57600080fd5b506102ad61067c3660046155c2565b61338d565b34801561068d57600080fd5b506106a161069c3660046154f6565b6137ea565b6040516102d491906155e4565b3480156106ba57600080fd5b506102ad6106c9366004615641565b6139a2565b3480156106da57600080fd5b506106ee6106e93660046153b7565b613a85565b6040516102d49190615690565b34801561070757600080fd5b5061071b6107163660046153b7565b613ba2565b604080519c8d529a151560208d01526001600160a01b03998a169a8c019a909a5296881660608b015294151560808a01529590921660a088015260c087015260e0860152610100850192909252610120840191909152610140830152610160820152610180016102d4565b34801561079257600080fd5b506102ad6107a13660046155c2565b613c24565b3480156107b257600080fd5b506002546102fd906001600160a01b031681565b3480156107d257600080fd5b5061032b6107e136600461549d565b613d0c565b3480156107f257600080fd5b506000546102fd906001600160a01b031681565b61080e615305565b6002600354141561083257604051633ee5aeb560e01b815260040160405180910390fd5b600260035560008054604080516339fcc0a360e21b815290516001600160a01b039092169163e7f3028c916004808201926020929091908290030181865afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a6919061539a565b90506000806000806108b88588612937565b60016080850152610140840151939750919550935091506000906108dd9083906156ce565b90508034101561090857604051631e59fc6f60e01b8152600481018290526024015b60405180910390fd5b856001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561094357600080fd5b505af1158015610957573d6000803e3d6000fd5b50505050506109f860008054906101000a90046001600160a01b03166001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d4919061539a565b6109e76001600160a01b03891685613d3d565b6001600160a01b0389169190613ddc565b34818103908214610a6e57604051600090339083908381818185875af1925050503d8060008114610a45576040519150601f19603f3d011682016040523d82523d6000602084013e610a4a565b606091505b5050905080610a6c57604051638762150d60e01b815260040160405180910390fd5b505b610a79868686613e54565b60016003559998505050505050505050565b60008060048381548110610aa157610aa16156e6565b60009182526020918290206040805161018081018252600a90930290910180548352600181015460ff8082161515958501959095526001600160a01b036101009182900481169385019390935260028201548084166060860152600160a01b900490941615156080840152600381015490911660a0830152600481015460c0830152600581015460e0830152600681015492820192909252600782015461012082015260088201546101408201526009909101546101608201529050610b6681614504565b9392505050565b6002546001600160a01b03163314610b985760405163aec80d4b60e01b815260040160405180910390fd5b600254600180546001600160a01b0319166001600160a01b03909216918217905560405181907f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e90600090a3565b600454819081101580610c20575060048181548110610c0757610c076156e6565b600091825260209091206001600a90920201015460ff16155b15610c41576040516372c4e6fd60e01b8152600481018290526024016108ff565b816002610c4d82613a85565b6002811115610c5e57610c5e61567a565b14610c7e57604051621e4f3560e61b8152600481018290526024016108ff565b600060048481548110610c9357610c936156e6565b600091825260208083206008600a909302019182015460028301546001600160a01b03168452600690915260408320600901805492945090929091610cd99084906156fc565b909155505060005460408051638a2381d760e01b81529051610d81926001600160a01b031691638a2381d79160048083019260209291908290030181865afa158015610d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4d919061539a565b60088301546002840154610d6c916001600160a01b0390911690613d3d565b60028401546001600160a01b03169190613ddc565b60008060009054906101000a90046001600160a01b03166001600160a01b0316634c4e61e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df9919061539a565b604080516101808101825284548152600185015460ff808216151560208401526001600160a01b036101009283900481169484019490945260028701548085166060850152600160a01b90041615156080830152600386015490921660a0820152600485015460c0820152600585015460e0820152600685015491810191909152600784015461012082015260088401546101408201526009840154610160820152909150600090610eaa9061455a565b9050816001600160a01b0316639dc29fac60008054906101000a90046001600160a01b03166001600160a01b0316634046ebae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f30919061539a565b60068601546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610f7b57600080fd5b505af1158015610f8f573d6000803e3d6000fd5b50505050816001600160a01b0316639dc29fac30856006015484610fb391906156fc565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610ff957600080fd5b505af115801561100d573d6000803e3d6000fd5b50505060018401805460ff191690555060405186907fc9e9d7cf3944e82f1fe222573e1c9acf5a2f6cd29aa9639bc8078065f091bb6b90600090a2505050505050565b611058615305565b6001600160a01b0380841660009081526006602081815260408084208151610140810183528154871681526001820154909616928601929092526002820154908501526003810154606085015260048101546080850152600581015460a08501529081015460c0840152600781015460e084015260088101546101008401526009015461012083015290819081906110f090866145e5565b9299919850965090945092505050565b6001546001600160a01b0316331461112b576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205461116c57604051634cbfe6c960e11b81526001600160a01b03831660048201526024016108ff565b6001600160a01b0382166000908152600660205260409020600781015482106111ba57604051630d12026b60e31b81526001600160a01b0384166004820152602481018390526044016108ff565b6006810180549083905560408051828152602081018590526001600160a01b038616917fc6a8c526618a1ece6f5d33564501b92330c354faa23902079359e52c8efd72f391015b60405180910390a250505050565b611217615305565b6001600160a01b038316600090815260086020526040902054839061125a576040516308cfe49560e31b81526001600160a01b03821660048201526024016108ff565b60008060008061126a8888612937565b93509350935093506113103360008054906101000a90046001600160a01b03166001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb919061539a565b6112fe6001600160a01b038c1685613d3d565b6001600160a01b038c169291906146e1565b61133633306112fe8761014001518c6001600160a01b0316613d3d90919063ffffffff16565b611341848484613e54565b98975050505050505050565b6001600160a01b0380821660009081526006602081815260408084208151610140810183528154871681526001820154909616928601929092526002820154908501526003810154606085015260048101546080850152600581015460a08501529081015460c0840152600781015460e0840152600881015461010084015260090154610120830152906113e090614719565b905060008054906101000a90046001600160a01b03166001600160a01b0316630e0603786040518163ffffffff1660e01b8152600401602060405180830381865afa158015611433573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611457919061539a565b6040516334ed736360e11b81526001600160a01b03848116600483015291909116906369dae6c690602401602060405180830381865afa15801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c39190615713565b6114cd90826156ce565b92915050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316634c4e61e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154b919061539a565b90506000611557612768565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bd9190615713565b905060006115cb838361572c565b905060006115d8826147ba565b905060006115e682856147d6565b905060008054906101000a90046001600160a01b03166001600160a01b031663ee0e54cb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d9190615713565b81101561167d576040516363b74cfb60e01b815260040160405180910390fd5b600083131561177b57604051632770a7eb60e21b8152306004820152602481018390526001600160a01b03871690639dc29fac90604401600060405180830381600087803b1580156116ce57600080fd5b505af19250505080156116df575060015b611776576040516370a0823160e01b81523060048201526000906001600160a01b038816906370a0823190602401602060405180830381865afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e9190615713565b905061175a81846156fc565b60405163dc14e6f760e01b81526004016108ff91815260200190565b6117dc565b6040516340c10f1960e01b8152306004820152602481018390526001600160a01b038716906340c10f1990604401600060405180830381600087803b1580156117c357600080fd5b505af11580156117d7573d6000803e3d6000fd5b505050505b60408051848152600060208201527fa28b2542ba9417cd775031511e43f71654a0b34eeb1acafae2c5d5a06b365abc910160405180910390a1505050505050565b6001546001600160a01b03163314611848576040516305e7700560e51b815260040160405180910390fd5b60005460408051634c4e61e960e01b8152905183926001600160a01b031691634c4e61e99160048083019260209291908290030181865afa158015611891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b5919061539a565b6001600160a01b0316816001600160a01b031614806118eb57506001600160a01b03811660009081526008602052604090205415155b156119135760405162919e6d60e01b81526001600160a01b03831660048201526024016108ff565b6000546040805163570ca73560e01b815290516119fb926001600160a01b03169163570ca7359160048083019260209291908290030181865afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611982919061539a565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa1580156119c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ea9190615713565b6001600160a01b0385169190613ddc565b5050565b6001546001600160a01b03163314611a2a576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205415611a6c5760405163ca6d908160e01b81526001600160a01b03831660048201526024016108ff565b60008054906101000a90046001600160a01b03166001600160a01b031663d876d98e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae19190615713565b8110611b1257604051630d12026b60e31b81526001600160a01b0383166004820152602481018290526044016108ff565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b769190615784565b905060ff8116611ba45760405163016058a160e51b81526001600160a01b03841660048201526024016108ff565b601260ff82161115611bdd5760405163dbba24db60e01b81526001600160a01b038416600482015260ff821660248201526044016108ff565b611be86007846147eb565b1561207957604051806101400160405280846001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d919061539a565b6001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663361416e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d009190615713565b815260200160008054906101000a90046001600160a01b03166001600160a01b03166342580dbe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7a9190615713565b815260200160008054906101000a90046001600160a01b03166001600160a01b0316632ecd3be46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df49190615713565b815260200160008054906101000a90046001600160a01b03166001600160a01b031663a5f3d0036040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6e9190615713565b815260200183815260200160008054906101000a90046001600160a01b03166001600160a01b031663d876d98e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eee9190615713565b815260200160008054906101000a90046001600160a01b03166001600160a01b0316634433c5e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f689190615713565b8152600060209182018190526001600160a01b0386811680835260068085526040808520875181546001600160a01b031990811691871691909117825596880151600182018054909816951694909417909555858501516002840155606086015160038401556080860151600484015560a0860151600584015560c08601519083015560e0850151600783015561010085015160088301556101209094015160099091015590517f55dcc5a02a669292f3baba7762915a1182901a9c28a30cc15d3325afcbb4bccc9190a26040805160008152602081018490526001600160a01b038516917fc6a8c526618a1ece6f5d33564501b92330c354faa23902079359e52c8efd72f3910160405180910390a25b505050565b60008054906101000a90046001600160a01b03166001600160a01b0316630e0603786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f3919061539a565b6001600160a01b0316336001600160a01b0316146121245760405163c4ff0b3560e01b815260040160405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b0316634c4e61e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219c919061539a565b9050806001600160a01b0316836001600160a01b031614156121bd57505050565b60005460408051632630c12f60e01b8152905161229f926001600160a01b031691632630c12f9160048083019260209291908290030181865afa158015612208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222c919061539a565b604051630787c49960e21b81526001600160a01b0386811660048301529190911690631e1f126490602401602060405180830381865afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122989190615713565b839061485b565b9150806001600160a01b03166340c10f193061233060008054906101000a90046001600160a01b03166001600160a01b03166342580dbe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123299190615713565b869061485b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561237657600080fd5b505af115801561238a573d6000803e3d6000fd5b50505050806001600160a01b03166340c10f1960008054906101000a90046001600160a01b03166001600160a01b0316634c12d4716040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612412919061539a565b60005460408051630bb34ef960e21b8152905161245d926001600160a01b031691632ecd3be49160048083019260209291908290030181865afa158015612305573d6000803e3d6000fd5b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156124a357600080fd5b505af11580156124b7573d6000803e3d6000fd5b50505050806001600160a01b03166340c10f1960008054906101000a90046001600160a01b03166001600160a01b0316638a2381d76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561251b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253f919061539a565b6000546040805163a5f3d00360e01b8152905161258a926001600160a01b03169163a5f3d0039160048083019260209291908290030181865afa158015612305573d6000803e3d6000fd5b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156125d057600080fd5b505af11580156125e4573d6000803e3d6000fd5b50505050505050565b6125f5615305565b6001600160a01b0380841660009081526006602081815260408084208151610140810183528154871681526001820154909616928601929092526002820154908501526003810154606085015260048101546080850152600581015460a08501529081015460c0840152600781015460e084015260088101546101008401526009015461012083015290819081906110f0908661492b565b600080600483815481106126a3576126a36156e6565b60009182526020918290206040805161018081018252600a90930290910180548352600181015460ff8082161515958501959095526001600160a01b036101009182900481169385019390935260028201548084166060860152600160a01b900490941615156080840152600381015490911660a0830152600481015460c0830152600581015460e0830152600681015492820192909252600782015461012082015260088201546101408201526009909101546101608201529050610b6681614af2565b6000805b600754811015612851576128336006600060076000018481548110612793576127936156e6565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091208251610140810184528154851681526001820154909416918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e0830152600881015461010083015260090154610120820152614719565b61283d90836156ce565b915080612849816157a7565b91505061276c565b5060008054906101000a90046001600160a01b03166001600160a01b0316630e0603786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c7919061539a565b6001600160a01b031663b26025aa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129289190615713565b61293290826156ce565b905090565b61293f615305565b6001600160a01b0380841660009081526006602081815260408084208151610140810183528154871681526001820154909616928601929092526002820154908501526003810154606085015260048101546080850152600581015460a08501529081015460c0840152600781015460e084015260088101546101008401526009015461012083015290819081906110f09086614b34565b600254600160a01b900460ff16158015612a0c57506002547501000000000000000000000000000000000000000000900460ff165b15612a2a57604051631ee1e30360e21b815260040160405180910390fd5b600254600160a01b900460ff16158015612a7f57600280547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1675010100000000000000000000000000000000000000001790555b612a896001600355565b600080546001600160a01b0319166001600160a01b038416179055612aad33614d01565b80156119fb57600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690555050565b6001546001600160a01b03163314612b0a576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b038116600090815260086020526040902054612b4b57604051634cbfe6c960e11b81526001600160a01b03821660048201526024016108ff565b612b56600782614d4d565b15612bef576001600160a01b038116600081815260066020819052604080832080546001600160a01b0319908116825560018201805490911690556002810184905560038101849055600481018490556005810184905591820183905560078201839055600882018390556009909101829055517f6d08717837ebdfd34a4ddffe3e4566e0a68e8dde2464854e9242a8f7e6399a339190a25b50565b60008060009054906101000a90046001600160a01b03166001600160a01b0316639dca3fe36040518163ffffffff1660e01b8152600401600060405180830381865afa158015612c46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c6e91908101906157d8565b90506000815190508060095410612c985760405163452402b760e11b815260040160405180910390fd5b6000612ca2612768565b6009549091506000905b83811015612d2b57600080612cf2878481518110612ccc57612ccc6156e6565b6020026020010151608081901c916fffffffffffffffffffffffffffffffff9190911690565b9150915081851015612d0a5750506009819055612d2b565b612d1481856156ce565b935050508080612d23906157a7565b915050612cac565b5080612d4a57604051631d3e08c760e21b815260040160405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b0316638b02d3176040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc2919061539a565b6040516340c10f1960e01b8152306004820152602481018490529091506001600160a01b038216906340c10f1990604401600060405180830381600087803b158015612e0d57600080fd5b505af1158015612e21573d6000803e3d6000fd5b5050505060008060009054906101000a90046001600160a01b03166001600160a01b0316635747cb136040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9d9190615713565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663e5265d886040518163ffffffff1660e01b8152600401600060405180830381865afa158015612ef3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f1b91908101906157d8565b905060005b8151811015612f9657600080612f63848481518110612f4157612f416156e6565b6020026020010151606081901c916bffffffffffffffffffffffff9190911690565b9092509050612f818286612f77848b61588a565b6109e791906158a9565b50508080612f8e906157a7565b915050612f20565b506040805160008152602081018690527fa28b2542ba9417cd775031511e43f71654a0b34eeb1acafae2c5d5a06b365abc910160405180910390a150505050505050565b6007546060908067ffffffffffffffff811115612ff957612ff96157c2565b60405190808252806020026020018201604052801561309257816020015b61307f60405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816130175790505b50915060005b818110156131875760066000600760000183815481106130ba576130ba6156e6565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091208251610140810184528154851681526001820154909416918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e08301526008810154610100830152600901546101208201528351849083908110613169576131696156e6565b6020026020010181905250808061317f906157a7565b915050613098565b505090565b600260035414156131b057604051633ee5aeb560e01b815260040160405180910390fd5b60026003556004548190811015806131ef5750600481815481106131d6576131d66156e6565b600091825260209091206001600a90920201015460ff16155b15613210576040516372c4e6fd60e01b8152600481018290526024016108ff565b81600261321c82613a85565b600281111561322d5761322d61567a565b141561324f57604051633d240fc360e01b8152600481018290526024016108ff565b60008060009054906101000a90046001600160a01b03166001600160a01b031663e7f3028c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c7919061539a565b9050806001600160a01b0316600485815481106132e6576132e66156e6565b600091825260209091206002600a9092020101546001600160a01b03161461332457604051635d64f43b60e01b8152600481018590526024016108ff565b806001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561335f57600080fd5b505af1158015613373573d6000803e3d6000fd5b50505050506133828434614e86565b505060016003555050565b600260035414156133b157604051633ee5aeb560e01b815260040160405180910390fd5b60026003556004548290811015806133f05750600481815481106133d7576133d76156e6565b600091825260209091206001600a90920201015460ff16155b15613411576040516372c4e6fd60e01b8152600481018290526024016108ff565b82600261341d82613a85565b600281111561342e5761342e61567a565b141561345057604051633d240fc360e01b8152600481018290526024016108ff565b8261346e57604051631d23e67d60e21b815260040160405180910390fd5b600060048581548110613483576134836156e6565b90600052602060002090600a0201905061349c81614f78565b6134b9816007015482600601546134b391906156ce565b8561503e565b935060008085836007015410156135075760078301546134d990876156fc565b905082600701549150808360060160008282546134f691906156fc565b909155505060006007840155613524565b8591508183600701600082825461351e91906156fc565b90915550505b60008060009054906101000a90046001600160a01b03166001600160a01b0316634c4e61e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359c919061539a565b9050821561362f5761362f3360008054906101000a90046001600160a01b03166001600160a01b0316638a2381d76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361d919061539a565b6001600160a01b0384169190866146e1565b811561364a5761364a6001600160a01b0382163330856146e1565b42600985015560068401541561369957877f552544cb36551120f07c66c5cd4b2987725a0c72198587f2ce796099bb66c58c8860405161368c91815260200190565b60405180910390a26137db565b600884015460028501546000916136b9916001600160a01b031690613d3d565b600886015460028701546001600160a01b03166000908152600660205260408120600901805493945091926136ef9084906156fc565b90915550506000600886015560058501546001600160a01b03831690639dc29fac90309061371d908c6156ce565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561376357600080fd5b505af1158015613777573d6000803e3d6000fd5b50505060018601805460ff191690555060405189907f33a382daad6aace935340a474d09fec82af4bec7e2b69518d283231b03a65f2490600090a2600185015460028601546137d9916001600160a01b03918216916101009091041683613ddc565b505b50506001600355505050505050565b6001600160a01b0381166000908152600560205260409020546060908067ffffffffffffffff81111561381f5761381f6157c2565b60405190808252806020026020018201604052801561385857816020015b613845615305565b81526020019060019003908161383d5790505b50915060005b8181101561399b576001600160a01b038416600090815260056020526040902080546004919083908110613894576138946156e6565b9060005260206000200154815481106138af576138af6156e6565b60009182526020918290206040805161018081018252600a90930290910180548352600181015460ff8082161515958501959095526001600160a01b036101009182900481169385019390935260028201548084166060860152600160a01b900490941615156080840152600381015490911660a0830152600481015460c0830152600581015460e083015260068101549282019290925260078201546101208201526008820154610140820152600990910154610160820152835184908390811061397d5761397d6156e6565b60200260200101819052508080613993906157a7565b91505061385e565b5050919050565b6001546001600160a01b031633146139cd576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b0382166139f45760405163604b48b960e11b815260040160405180910390fd5b6001600160a01b038216301415613a1e576040516306b3e95d60e21b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b03841617905580613a7c576001546040516001600160a01b038085169216907fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb190600090a35050565b6119fb82614d01565b600080613a9183610a8b565b905060008054906101000a90046001600160a01b03166001600160a01b0316634433c5e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b089190615713565b811015613b995760008054906101000a90046001600160a01b03166001600160a01b031663d876d98e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b849190615713565b811015613b92576000610b66565b6001610b66565b60029392505050565b60048181548110613bb257600080fd5b60009182526020909120600a9091020180546001820154600283015460038401546004850154600586015460068701546007880154600889015460099099015497995060ff808816996101009098046001600160a01b039081169981891699600160a01b90990490921697961695908c565b600454829081101580613c5e575060048181548110613c4557613c456156e6565b600091825260209091206001600a90920201015460ff16155b15613c7f576040516372c4e6fd60e01b8152600481018290526024016108ff565b826002613c8b82613a85565b6002811115613c9c57613c9c61567a565b1415613cbe57604051633d240fc360e01b8152600481018290526024016108ff565b613cfc33308560048881548110613cd757613cd76156e6565b600091825260209091206002600a9092020101546001600160a01b03169291906146e1565b613d068484614e86565b50505050565b60056020528160005260406000208181548110613d2857600080fd5b90600052602060002001600091509150505481565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613da29190615784565b613dad9060126158cb565b613db890600a6159d2565b905080600114613dd457613dcc81846158a9565b9150506114cd565b509092915050565b6040516001600160a01b03831660248201526044810182905261207990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152615054565b613e5c615305565b610100840151613e7f576040516379d1504360e01b815260040160405180910390fd5b60008054906101000a90046001600160a01b03166001600160a01b0316630b68a5806040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ef49190615713565b8461010001511015613f1957604051631efe3f1960e11b815260040160405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b0316634c4e61e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f91919061539a565b60e08601516040516340c10f1960e01b815230600482015260248101919091529091506001600160a01b038216906340c10f1990604401600060405180830381600087803b158015613fe257600080fd5b505af1158015613ff6573d6000803e3d6000fd5b50505050806001600160a01b03166340c10f1960008054906101000a90046001600160a01b03166001600160a01b0316634c12d4716040518163ffffffff1660e01b8152600401602060405180830381865afa15801561405a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061407e919061539a565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b1580156140c657600080fd5b505af11580156140da573d6000803e3d6000fd5b50505050806001600160a01b03166340c10f1960008054906101000a90046001600160a01b03166001600160a01b0316638a2381d76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561413e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614162919061539a565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b1580156141aa57600080fd5b505af11580156141be573d6000803e3d6000fd5b5050505060408581015161010087015191516340c10f1960e01b81526001600160a01b03918216600482015260248101929092528216906340c10f1990604401600060405180830381600087803b15801561421857600080fd5b505af115801561422c573d6000803e3d6000fd5b505060048054808952600054604080516361c97bb360e11b815290519295506001600160a01b03909116935063c392f76692818101926020929091908290030181865afa158015614281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a59190615713565b8660c001818152505060048690806001815401808255809150506001900390600052602060002090600a02016000909190919091506000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160020160146101000a81548160ff02191690831515021790555060a08201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c0820151816004015560e08201518160050155610100820151816006015561012082015181600701556101408201518160080155610160820151816009015550506005600087604001516001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150558561014001516006600088606001516001600160a01b03166001600160a01b03168152602001908152602001600020600901600082825461447e91906156ce565b90915550506060808701516040808901516101008a01516101408b01516001600160a01b0394851660008181526006602081815291879020015486519485529084019290925293820152919392169184917f1c719a9a8ef2d44db7255e8d65b4a18a23f44758d6ebc0d6b80fe018d25433fb910160405180910390a45093949350505050565b60008161010001516000141561451c57506000919050565b61014082015161452f5750600019919050565b6114cd61453b8361455a565b61454484614af2565b84610100015161455491906156ce565b906147d6565b60a08101516060820151604051630787c49960e21b81526001600160a01b03918216600482015260009283921690631e1f126490602401602060405180830381865afa1580156145ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d29190615713565b610140840151909150610b66908261485b565b6145ed615305565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000928392839283929190911690631e1f126490602401602060405180830381865afa158015614645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146699190615713565b905060006146888860c00151896040015161485b90919063ffffffff16565b905060006146c26146a1670de0b6b3a7640000846156ce565b614554856146bc8d60c001518d61485b90919063ffffffff16565b9061485b565b90506146ce8982614b34565b929c919b50995090975095505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052613d069085906323b872dd60e01b90608401613e08565b60008161012001516000141561473157506000919050565b60208201518251604051630787c49960e21b81526001600160a01b0391821660048201526000929190911690631e1f126490602401602060405180830381865afa158015614783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a79190615713565b610120840151909150610b66908261485b565b6000808212156147d2576147cd826159e1565b6114cd565b5090565b6000610b6683670de0b6b3a7640000846150de565b6001600160a01b038116600090815260018301602052604081205415614813575060006114cd565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106148ad5760405163072fa3c960e31b815260048101829052670de0b6b3a764000060248201526044016108ff565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826148e75780670de0b6b3a76400008504019450505050506114cd565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b614933615305565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000928392839283929190911690631e1f126490602401602060405180830381865afa15801561498b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149af9190615713565b905060006149ce826146bc8a60c001518a61485b90919063ffffffff16565b60c08901519091506000906149f9906145546149f282670de0b6b3a76400006156fc565b859061485b565b90506000614a148a606001518361485b90919063ffffffff16565b9050614a2d8a608001518361485b90919063ffffffff16565b9650614a468a60a001518361485b90919063ffffffff16565b9550614a6384614554858d6040015161485b90919063ffffffff16565b945060405180610180016040528060008152602001600115158152602001336001600160a01b031681526020018b600001516001600160a01b031681526020016000151581526020018b602001516001600160a01b0316815260200160008152602001828152602001848152602001600081526020018a81526020014281525097505050505092959194509250565b60006114cd614b20670de0b6b3a76400006301e187e085610160015142614b1991906156fc565b91906150de565b60c08401516101008501516146bc9161485b565b614b3c615305565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000928392839283929190911690631e1f126490602401602060405180830381865afa158015614b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bb89190615713565b60c0880151909150600090614be390614554614bdc82670de0b6b3a76400006156fc565b8a9061485b565b90506000614bfe89606001518361485b90919063ffffffff16565b9050614c1789608001518361485b90919063ffffffff16565b9550614c308960a001518361485b90919063ffffffff16565b94506000614c55614c4e858c60c0015161485b90919063ffffffff16565b8a906147d6565b9050614c72846145548b8d6040015161485b90919063ffffffff16565b945060405180610180016040528060008152602001600115158152602001336001600160a01b031681526020018b600001516001600160a01b031681526020016000151581526020018b602001516001600160a01b03168152602001600081526020018381526020018a8152602001600081526020018281526020014281525097505050505092959194509250565b600180546001600160a01b0319166001600160a01b03831690811790915560405181907f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e90600090a350565b6001600160a01b038116600090815260018301602052604081205480614d775760009150506114cd565b6000614d846001836156fc565b905060006001614d92875490565b614d9c91906156fc565b9050808214614e28576000866000018281548110614dbc57614dbc6156e6565b60009182526020909120015487546001600160a01b0390911691508190889085908110614deb57614deb6156e6565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018801909152604090208390555b8554869080614e3957614e396159fe565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260018881019091526040822091909155935050505092915050565b80614ea457604051635491c16d60e01b815260040160405180910390fd5b600060048381548110614eb957614eb96156e6565b90600052602060002090600a02019050614ed281614f78565b6002810154600090614eed906001600160a01b03168461519a565b905080826008016000828254614f0391906156ce565b90915550504260098084019190915560028301546001600160a01b031660009081526006602052604081209091018054839290614f419084906156ce565b909155505060405181815284907fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c5590602001611201565b604080516101808101825282548152600183015460ff808216151560208401526001600160a01b036101009283900481169484019490945260028501548085166060850152600160a01b90041615156080830152600384015490921660a0820152600483015460c0820152600583015460e082015260068301549181019190915260078201546101208201526008820154610140820152600982015461016082015261502390614af2565b81600701600082825461503691906156ce565b909155505050565b600081831061504d5781610b66565b5090919050565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649082015282906000906150a3906001600160a01b038416908590615229565b805190915015613d0657808060200190518101906150c19190615a14565b613d0657604051639b8d506160e01b815260040160405180910390fd5b600080806000198587098587029250828110838203039150508381106151215760405163072fa3c960e31b815260048101829052602481018590526044016108ff565b8061513157508290049050610b66565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156151db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151ff9190615784565b61520a9060126158cb565b61521590600a6159d2565b905080600114613dd457613dcc818461588a565b6060833b6152555760405163dc5dd7fd60e01b81526001600160a01b03851660048201526024016108ff565b600080856001600160a01b0316856040516152709190615a5d565b6000604051808303816000865af19150503d80600081146152ad576040519150601f19603f3d011682016040523d82523d6000602084013e6152b2565b606091505b50915091506152c28282866152cc565b9695505050505050565b606083156152db575081610b66565b8251156152eb5782518060208501fd5b8160405162461bcd60e51b81526004016108ff9190615a79565b6040518061018001604052806000815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114612bef57600080fd5b6000602082840312156153ac57600080fd5b8151610b6681615385565b6000602082840312156153c957600080fd5b5035919050565b8051825260208101516153e7602084018215159052565b50604081015161540260408401826001600160a01b03169052565b50606081015161541d60608401826001600160a01b03169052565b506080810151615431608084018215159052565b5060a081015161544c60a08401826001600160a01b03169052565b5060c0818101519083015260e0808201519083015261010080820151908301526101208082015190830152610140808201519083015261016090810151910152565b61018081016114cd82846153d0565b600080604083850312156154b057600080fd5b82356154bb81615385565b946020939093013593505050565b6101e081016154d882876153d0565b84610180830152836101a0830152826101c083015295945050505050565b60006020828403121561550857600080fd5b8135610b6681615385565b602080825282518282018190526000919060409081850190868401855b828110156155b557815180516001600160a01b0390811686528782015116878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e08082015190860152610100808201519086015261012090810151908501526101409093019290850190600101615530565b5091979650505050505050565b600080604083850312156155d557600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015615627576156138385516153d0565b928401926101809290920191600101615600565b50909695505050505050565b8015158114612bef57600080fd5b6000806040838503121561565457600080fd5b823561565f81615385565b9150602083013561566f81615633565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106156b257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052601160045260246000fd5b600082198211156156e1576156e16156b8565b500190565b634e487b7160e01b600052603260045260246000fd5b60008282101561570e5761570e6156b8565b500390565b60006020828403121561572557600080fd5b5051919050565b60008083128015600160ff1b85018412161561574a5761574a6156b8565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561577e5761577e6156b8565b50500390565b60006020828403121561579657600080fd5b815160ff81168114610b6657600080fd5b60006000198214156157bb576157bb6156b8565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156157eb57600080fd5b825167ffffffffffffffff8082111561580357600080fd5b818501915085601f83011261581757600080fd5b815181811115615829576158296157c2565b8060051b604051601f19603f8301168101818110858211171561584e5761584e6157c2565b60405291825284820192508381018501918883111561586c57600080fd5b938501935b8285101561134157845184529385019392850192615871565b60008160001904831182151516156158a4576158a46156b8565b500290565b6000826158c657634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff8416808210156158e5576158e56156b8565b90039392505050565b600181815b8085111561592957816000190482111561590f5761590f6156b8565b8085161561591c57918102915b93841c93908002906158f3565b509250929050565b600082615940575060016114cd565b8161594d575060006114cd565b8160018114615963576002811461596d57615989565b60019150506114cd565b60ff84111561597e5761597e6156b8565b50506001821b6114cd565b5060208310610133831016604e8410600b84101617156159ac575081810a6114cd565b6159b683836158ee565b80600019048211156159ca576159ca6156b8565b029392505050565b6000610b6660ff841683615931565b6000600160ff1b8214156159f7576159f76156b8565b5060000390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615a2657600080fd5b8151610b6681615633565b60005b83811015615a4c578181015183820152602001615a34565b83811115613d065750506000910152565b60008251615a6f818460208701615a31565b9190910192915050565b6020815260008251806020840152615a98816040850160208701615a31565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x6080604052600436106102025760003560e01c8063b26025aa1161011d578063d8aed145116100b0578063e1ec3c681161007f578063e3056a3411610064578063e3056a34146107a6578063e3930249146107c6578063f2f4eb26146107e657600080fd5b8063e1ec3c68146106fb578063e2bbb1581461078657600080fd5b8063d8aed14514610661578063d988ef2014610681578063ddc12526146106ae578063dfe8f671146106ce57600080fd5b8063cada1a46116100ec578063cada1a4614610548578063cf1762251461055d578063cffbc2971461057f578063d34cf64c1461064e57600080fd5b8063b26025aa146104d3578063b38e4816146104e8578063c4d66de814610508578063c78bede81461052857600080fd5b80634b8a35291161019557806387eae8191161016457806387eae819146104535780638e877d99146104735780638fa1552e146104935780639a5872f4146104b357600080fd5b80634b8a3529146103de57806369dae6c6146103fe5780637d7c2a1c1461041e578063863a03e01461043357600080fd5b8063238efcbc116101d1578063238efcbc14610359578063415f12401461036e57806344dbdd901461038e5780634721f2db146103be57600080fd5b80630b5a017a146102b45780630c340a24146102dd57806314706e14146103155780631cec9e751461033957600080fd5b366102af5760008054906101000a90046001600160a01b03166001600160a01b031663e7f3028c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027c919061539a565b6001600160a01b0316336001600160a01b0316146102ad57604051634b908c4f60e01b815260040160405180910390fd5b005b600080fd5b6102c76102c23660046153b7565b610806565b6040516102d4919061548e565b60405180910390f35b3480156102e957600080fd5b506001546102fd906001600160a01b031681565b6040516001600160a01b0390911681526020016102d4565b34801561032157600080fd5b5061032b60095481565b6040519081526020016102d4565b34801561034557600080fd5b5061032b6103543660046153b7565b610a8b565b34801561036557600080fd5b506102ad610b6d565b34801561037a57600080fd5b506102ad6103893660046153b7565b610be6565b34801561039a57600080fd5b506103ae6103a936600461549d565b611050565b6040516102d494939291906154c9565b3480156103ca57600080fd5b506102ad6103d936600461549d565b611100565b3480156103ea57600080fd5b506102c76103f936600461549d565b61120f565b34801561040a57600080fd5b5061032b6104193660046154f6565b61134d565b34801561042a57600080fd5b506102ad6114d3565b34801561043f57600080fd5b506102ad61044e3660046154f6565b61181d565b34801561045f57600080fd5b506102ad61046e36600461549d565b6119ff565b34801561047f57600080fd5b506102ad61048e36600461549d565b61207e565b34801561049f57600080fd5b506103ae6104ae36600461549d565b6125ed565b3480156104bf57600080fd5b5061032b6104ce3660046153b7565b61268d565b3480156104df57600080fd5b5061032b612768565b3480156104f457600080fd5b506103ae61050336600461549d565b612937565b34801561051457600080fd5b506102ad6105233660046154f6565b6129d7565b34801561053457600080fd5b506102ad6105433660046154f6565b612adf565b34801561055457600080fd5b506102ad612bf2565b34801561056957600080fd5b50610572612fda565b6040516102d49190615513565b34801561058b57600080fd5b506105f961059a3660046154f6565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015496860154600787015460088801546009909801546001600160a01b0397881699979096169794969395929491929091908a565b604080516001600160a01b039b8c1681529a90991660208b0152978901969096526060880194909452608087019290925260a086015260c085015260e0840152610100830152610120820152610140016102d4565b6102ad61065c3660046153b7565b61318c565b34801561066d57600080fd5b506102ad61067c3660046155c2565b61338d565b34801561068d57600080fd5b506106a161069c3660046154f6565b6137ea565b6040516102d491906155e4565b3480156106ba57600080fd5b506102ad6106c9366004615641565b6139a2565b3480156106da57600080fd5b506106ee6106e93660046153b7565b613a85565b6040516102d49190615690565b34801561070757600080fd5b5061071b6107163660046153b7565b613ba2565b604080519c8d529a151560208d01526001600160a01b03998a169a8c019a909a5296881660608b015294151560808a01529590921660a088015260c087015260e0860152610100850192909252610120840191909152610140830152610160820152610180016102d4565b34801561079257600080fd5b506102ad6107a13660046155c2565b613c24565b3480156107b257600080fd5b506002546102fd906001600160a01b031681565b3480156107d257600080fd5b5061032b6107e136600461549d565b613d0c565b3480156107f257600080fd5b506000546102fd906001600160a01b031681565b61080e615305565b6002600354141561083257604051633ee5aeb560e01b815260040160405180910390fd5b600260035560008054604080516339fcc0a360e21b815290516001600160a01b039092169163e7f3028c916004808201926020929091908290030181865afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a6919061539a565b90506000806000806108b88588612937565b60016080850152610140840151939750919550935091506000906108dd9083906156ce565b90508034101561090857604051631e59fc6f60e01b8152600481018290526024015b60405180910390fd5b856001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561094357600080fd5b505af1158015610957573d6000803e3d6000fd5b50505050506109f860008054906101000a90046001600160a01b03166001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d4919061539a565b6109e76001600160a01b03891685613d3d565b6001600160a01b0389169190613ddc565b34818103908214610a6e57604051600090339083908381818185875af1925050503d8060008114610a45576040519150601f19603f3d011682016040523d82523d6000602084013e610a4a565b606091505b5050905080610a6c57604051638762150d60e01b815260040160405180910390fd5b505b610a79868686613e54565b60016003559998505050505050505050565b60008060048381548110610aa157610aa16156e6565b60009182526020918290206040805161018081018252600a90930290910180548352600181015460ff8082161515958501959095526001600160a01b036101009182900481169385019390935260028201548084166060860152600160a01b900490941615156080840152600381015490911660a0830152600481015460c0830152600581015460e0830152600681015492820192909252600782015461012082015260088201546101408201526009909101546101608201529050610b6681614504565b9392505050565b6002546001600160a01b03163314610b985760405163aec80d4b60e01b815260040160405180910390fd5b600254600180546001600160a01b0319166001600160a01b03909216918217905560405181907f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e90600090a3565b600454819081101580610c20575060048181548110610c0757610c076156e6565b600091825260209091206001600a90920201015460ff16155b15610c41576040516372c4e6fd60e01b8152600481018290526024016108ff565b816002610c4d82613a85565b6002811115610c5e57610c5e61567a565b14610c7e57604051621e4f3560e61b8152600481018290526024016108ff565b600060048481548110610c9357610c936156e6565b600091825260208083206008600a909302019182015460028301546001600160a01b03168452600690915260408320600901805492945090929091610cd99084906156fc565b909155505060005460408051638a2381d760e01b81529051610d81926001600160a01b031691638a2381d79160048083019260209291908290030181865afa158015610d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4d919061539a565b60088301546002840154610d6c916001600160a01b0390911690613d3d565b60028401546001600160a01b03169190613ddc565b60008060009054906101000a90046001600160a01b03166001600160a01b0316634c4e61e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df9919061539a565b604080516101808101825284548152600185015460ff808216151560208401526001600160a01b036101009283900481169484019490945260028701548085166060850152600160a01b90041615156080830152600386015490921660a0820152600485015460c0820152600585015460e0820152600685015491810191909152600784015461012082015260088401546101408201526009840154610160820152909150600090610eaa9061455a565b9050816001600160a01b0316639dc29fac60008054906101000a90046001600160a01b03166001600160a01b0316634046ebae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f30919061539a565b60068601546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610f7b57600080fd5b505af1158015610f8f573d6000803e3d6000fd5b50505050816001600160a01b0316639dc29fac30856006015484610fb391906156fc565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610ff957600080fd5b505af115801561100d573d6000803e3d6000fd5b50505060018401805460ff191690555060405186907fc9e9d7cf3944e82f1fe222573e1c9acf5a2f6cd29aa9639bc8078065f091bb6b90600090a2505050505050565b611058615305565b6001600160a01b0380841660009081526006602081815260408084208151610140810183528154871681526001820154909616928601929092526002820154908501526003810154606085015260048101546080850152600581015460a08501529081015460c0840152600781015460e084015260088101546101008401526009015461012083015290819081906110f090866145e5565b9299919850965090945092505050565b6001546001600160a01b0316331461112b576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205461116c57604051634cbfe6c960e11b81526001600160a01b03831660048201526024016108ff565b6001600160a01b0382166000908152600660205260409020600781015482106111ba57604051630d12026b60e31b81526001600160a01b0384166004820152602481018390526044016108ff565b6006810180549083905560408051828152602081018590526001600160a01b038616917fc6a8c526618a1ece6f5d33564501b92330c354faa23902079359e52c8efd72f391015b60405180910390a250505050565b611217615305565b6001600160a01b038316600090815260086020526040902054839061125a576040516308cfe49560e31b81526001600160a01b03821660048201526024016108ff565b60008060008061126a8888612937565b93509350935093506113103360008054906101000a90046001600160a01b03166001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb919061539a565b6112fe6001600160a01b038c1685613d3d565b6001600160a01b038c169291906146e1565b61133633306112fe8761014001518c6001600160a01b0316613d3d90919063ffffffff16565b611341848484613e54565b98975050505050505050565b6001600160a01b0380821660009081526006602081815260408084208151610140810183528154871681526001820154909616928601929092526002820154908501526003810154606085015260048101546080850152600581015460a08501529081015460c0840152600781015460e0840152600881015461010084015260090154610120830152906113e090614719565b905060008054906101000a90046001600160a01b03166001600160a01b0316630e0603786040518163ffffffff1660e01b8152600401602060405180830381865afa158015611433573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611457919061539a565b6040516334ed736360e11b81526001600160a01b03848116600483015291909116906369dae6c690602401602060405180830381865afa15801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c39190615713565b6114cd90826156ce565b92915050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316634c4e61e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154b919061539a565b90506000611557612768565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bd9190615713565b905060006115cb838361572c565b905060006115d8826147ba565b905060006115e682856147d6565b905060008054906101000a90046001600160a01b03166001600160a01b031663ee0e54cb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d9190615713565b81101561167d576040516363b74cfb60e01b815260040160405180910390fd5b600083131561177b57604051632770a7eb60e21b8152306004820152602481018390526001600160a01b03871690639dc29fac90604401600060405180830381600087803b1580156116ce57600080fd5b505af19250505080156116df575060015b611776576040516370a0823160e01b81523060048201526000906001600160a01b038816906370a0823190602401602060405180830381865afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e9190615713565b905061175a81846156fc565b60405163dc14e6f760e01b81526004016108ff91815260200190565b6117dc565b6040516340c10f1960e01b8152306004820152602481018390526001600160a01b038716906340c10f1990604401600060405180830381600087803b1580156117c357600080fd5b505af11580156117d7573d6000803e3d6000fd5b505050505b60408051848152600060208201527fa28b2542ba9417cd775031511e43f71654a0b34eeb1acafae2c5d5a06b365abc910160405180910390a1505050505050565b6001546001600160a01b03163314611848576040516305e7700560e51b815260040160405180910390fd5b60005460408051634c4e61e960e01b8152905183926001600160a01b031691634c4e61e99160048083019260209291908290030181865afa158015611891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b5919061539a565b6001600160a01b0316816001600160a01b031614806118eb57506001600160a01b03811660009081526008602052604090205415155b156119135760405162919e6d60e01b81526001600160a01b03831660048201526024016108ff565b6000546040805163570ca73560e01b815290516119fb926001600160a01b03169163570ca7359160048083019260209291908290030181865afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611982919061539a565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa1580156119c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ea9190615713565b6001600160a01b0385169190613ddc565b5050565b6001546001600160a01b03163314611a2a576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205415611a6c5760405163ca6d908160e01b81526001600160a01b03831660048201526024016108ff565b60008054906101000a90046001600160a01b03166001600160a01b031663d876d98e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae19190615713565b8110611b1257604051630d12026b60e31b81526001600160a01b0383166004820152602481018290526044016108ff565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b769190615784565b905060ff8116611ba45760405163016058a160e51b81526001600160a01b03841660048201526024016108ff565b601260ff82161115611bdd5760405163dbba24db60e01b81526001600160a01b038416600482015260ff821660248201526044016108ff565b611be86007846147eb565b1561207957604051806101400160405280846001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d919061539a565b6001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663361416e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d009190615713565b815260200160008054906101000a90046001600160a01b03166001600160a01b03166342580dbe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7a9190615713565b815260200160008054906101000a90046001600160a01b03166001600160a01b0316632ecd3be46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df49190615713565b815260200160008054906101000a90046001600160a01b03166001600160a01b031663a5f3d0036040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6e9190615713565b815260200183815260200160008054906101000a90046001600160a01b03166001600160a01b031663d876d98e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eee9190615713565b815260200160008054906101000a90046001600160a01b03166001600160a01b0316634433c5e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f689190615713565b8152600060209182018190526001600160a01b0386811680835260068085526040808520875181546001600160a01b031990811691871691909117825596880151600182018054909816951694909417909555858501516002840155606086015160038401556080860151600484015560a0860151600584015560c08601519083015560e0850151600783015561010085015160088301556101209094015160099091015590517f55dcc5a02a669292f3baba7762915a1182901a9c28a30cc15d3325afcbb4bccc9190a26040805160008152602081018490526001600160a01b038516917fc6a8c526618a1ece6f5d33564501b92330c354faa23902079359e52c8efd72f3910160405180910390a25b505050565b60008054906101000a90046001600160a01b03166001600160a01b0316630e0603786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f3919061539a565b6001600160a01b0316336001600160a01b0316146121245760405163c4ff0b3560e01b815260040160405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b0316634c4e61e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219c919061539a565b9050806001600160a01b0316836001600160a01b031614156121bd57505050565b60005460408051632630c12f60e01b8152905161229f926001600160a01b031691632630c12f9160048083019260209291908290030181865afa158015612208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222c919061539a565b604051630787c49960e21b81526001600160a01b0386811660048301529190911690631e1f126490602401602060405180830381865afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122989190615713565b839061485b565b9150806001600160a01b03166340c10f193061233060008054906101000a90046001600160a01b03166001600160a01b03166342580dbe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123299190615713565b869061485b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561237657600080fd5b505af115801561238a573d6000803e3d6000fd5b50505050806001600160a01b03166340c10f1960008054906101000a90046001600160a01b03166001600160a01b0316634c12d4716040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612412919061539a565b60005460408051630bb34ef960e21b8152905161245d926001600160a01b031691632ecd3be49160048083019260209291908290030181865afa158015612305573d6000803e3d6000fd5b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156124a357600080fd5b505af11580156124b7573d6000803e3d6000fd5b50505050806001600160a01b03166340c10f1960008054906101000a90046001600160a01b03166001600160a01b0316638a2381d76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561251b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253f919061539a565b6000546040805163a5f3d00360e01b8152905161258a926001600160a01b03169163a5f3d0039160048083019260209291908290030181865afa158015612305573d6000803e3d6000fd5b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156125d057600080fd5b505af11580156125e4573d6000803e3d6000fd5b50505050505050565b6125f5615305565b6001600160a01b0380841660009081526006602081815260408084208151610140810183528154871681526001820154909616928601929092526002820154908501526003810154606085015260048101546080850152600581015460a08501529081015460c0840152600781015460e084015260088101546101008401526009015461012083015290819081906110f0908661492b565b600080600483815481106126a3576126a36156e6565b60009182526020918290206040805161018081018252600a90930290910180548352600181015460ff8082161515958501959095526001600160a01b036101009182900481169385019390935260028201548084166060860152600160a01b900490941615156080840152600381015490911660a0830152600481015460c0830152600581015460e0830152600681015492820192909252600782015461012082015260088201546101408201526009909101546101608201529050610b6681614af2565b6000805b600754811015612851576128336006600060076000018481548110612793576127936156e6565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091208251610140810184528154851681526001820154909416918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e0830152600881015461010083015260090154610120820152614719565b61283d90836156ce565b915080612849816157a7565b91505061276c565b5060008054906101000a90046001600160a01b03166001600160a01b0316630e0603786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c7919061539a565b6001600160a01b031663b26025aa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129289190615713565b61293290826156ce565b905090565b61293f615305565b6001600160a01b0380841660009081526006602081815260408084208151610140810183528154871681526001820154909616928601929092526002820154908501526003810154606085015260048101546080850152600581015460a08501529081015460c0840152600781015460e084015260088101546101008401526009015461012083015290819081906110f09086614b34565b600254600160a01b900460ff16158015612a0c57506002547501000000000000000000000000000000000000000000900460ff165b15612a2a57604051631ee1e30360e21b815260040160405180910390fd5b600254600160a01b900460ff16158015612a7f57600280547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1675010100000000000000000000000000000000000000001790555b612a896001600355565b600080546001600160a01b0319166001600160a01b038416179055612aad33614d01565b80156119fb57600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690555050565b6001546001600160a01b03163314612b0a576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b038116600090815260086020526040902054612b4b57604051634cbfe6c960e11b81526001600160a01b03821660048201526024016108ff565b612b56600782614d4d565b15612bef576001600160a01b038116600081815260066020819052604080832080546001600160a01b0319908116825560018201805490911690556002810184905560038101849055600481018490556005810184905591820183905560078201839055600882018390556009909101829055517f6d08717837ebdfd34a4ddffe3e4566e0a68e8dde2464854e9242a8f7e6399a339190a25b50565b60008060009054906101000a90046001600160a01b03166001600160a01b0316639dca3fe36040518163ffffffff1660e01b8152600401600060405180830381865afa158015612c46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c6e91908101906157d8565b90506000815190508060095410612c985760405163452402b760e11b815260040160405180910390fd5b6000612ca2612768565b6009549091506000905b83811015612d2b57600080612cf2878481518110612ccc57612ccc6156e6565b6020026020010151608081901c916fffffffffffffffffffffffffffffffff9190911690565b9150915081851015612d0a5750506009819055612d2b565b612d1481856156ce565b935050508080612d23906157a7565b915050612cac565b5080612d4a57604051631d3e08c760e21b815260040160405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b0316638b02d3176040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc2919061539a565b6040516340c10f1960e01b8152306004820152602481018490529091506001600160a01b038216906340c10f1990604401600060405180830381600087803b158015612e0d57600080fd5b505af1158015612e21573d6000803e3d6000fd5b5050505060008060009054906101000a90046001600160a01b03166001600160a01b0316635747cb136040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9d9190615713565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663e5265d886040518163ffffffff1660e01b8152600401600060405180830381865afa158015612ef3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f1b91908101906157d8565b905060005b8151811015612f9657600080612f63848481518110612f4157612f416156e6565b6020026020010151606081901c916bffffffffffffffffffffffff9190911690565b9092509050612f818286612f77848b61588a565b6109e791906158a9565b50508080612f8e906157a7565b915050612f20565b506040805160008152602081018690527fa28b2542ba9417cd775031511e43f71654a0b34eeb1acafae2c5d5a06b365abc910160405180910390a150505050505050565b6007546060908067ffffffffffffffff811115612ff957612ff96157c2565b60405190808252806020026020018201604052801561309257816020015b61307f60405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816130175790505b50915060005b818110156131875760066000600760000183815481106130ba576130ba6156e6565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091208251610140810184528154851681526001820154909416918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e08301526008810154610100830152600901546101208201528351849083908110613169576131696156e6565b6020026020010181905250808061317f906157a7565b915050613098565b505090565b600260035414156131b057604051633ee5aeb560e01b815260040160405180910390fd5b60026003556004548190811015806131ef5750600481815481106131d6576131d66156e6565b600091825260209091206001600a90920201015460ff16155b15613210576040516372c4e6fd60e01b8152600481018290526024016108ff565b81600261321c82613a85565b600281111561322d5761322d61567a565b141561324f57604051633d240fc360e01b8152600481018290526024016108ff565b60008060009054906101000a90046001600160a01b03166001600160a01b031663e7f3028c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c7919061539a565b9050806001600160a01b0316600485815481106132e6576132e66156e6565b600091825260209091206002600a9092020101546001600160a01b03161461332457604051635d64f43b60e01b8152600481018590526024016108ff565b806001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561335f57600080fd5b505af1158015613373573d6000803e3d6000fd5b50505050506133828434614e86565b505060016003555050565b600260035414156133b157604051633ee5aeb560e01b815260040160405180910390fd5b60026003556004548290811015806133f05750600481815481106133d7576133d76156e6565b600091825260209091206001600a90920201015460ff16155b15613411576040516372c4e6fd60e01b8152600481018290526024016108ff565b82600261341d82613a85565b600281111561342e5761342e61567a565b141561345057604051633d240fc360e01b8152600481018290526024016108ff565b8261346e57604051631d23e67d60e21b815260040160405180910390fd5b600060048581548110613483576134836156e6565b90600052602060002090600a0201905061349c81614f78565b6134b9816007015482600601546134b391906156ce565b8561503e565b935060008085836007015410156135075760078301546134d990876156fc565b905082600701549150808360060160008282546134f691906156fc565b909155505060006007840155613524565b8591508183600701600082825461351e91906156fc565b90915550505b60008060009054906101000a90046001600160a01b03166001600160a01b0316634c4e61e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359c919061539a565b9050821561362f5761362f3360008054906101000a90046001600160a01b03166001600160a01b0316638a2381d76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361d919061539a565b6001600160a01b0384169190866146e1565b811561364a5761364a6001600160a01b0382163330856146e1565b42600985015560068401541561369957877f552544cb36551120f07c66c5cd4b2987725a0c72198587f2ce796099bb66c58c8860405161368c91815260200190565b60405180910390a26137db565b600884015460028501546000916136b9916001600160a01b031690613d3d565b600886015460028701546001600160a01b03166000908152600660205260408120600901805493945091926136ef9084906156fc565b90915550506000600886015560058501546001600160a01b03831690639dc29fac90309061371d908c6156ce565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561376357600080fd5b505af1158015613777573d6000803e3d6000fd5b50505060018601805460ff191690555060405189907f33a382daad6aace935340a474d09fec82af4bec7e2b69518d283231b03a65f2490600090a2600185015460028601546137d9916001600160a01b03918216916101009091041683613ddc565b505b50506001600355505050505050565b6001600160a01b0381166000908152600560205260409020546060908067ffffffffffffffff81111561381f5761381f6157c2565b60405190808252806020026020018201604052801561385857816020015b613845615305565b81526020019060019003908161383d5790505b50915060005b8181101561399b576001600160a01b038416600090815260056020526040902080546004919083908110613894576138946156e6565b9060005260206000200154815481106138af576138af6156e6565b60009182526020918290206040805161018081018252600a90930290910180548352600181015460ff8082161515958501959095526001600160a01b036101009182900481169385019390935260028201548084166060860152600160a01b900490941615156080840152600381015490911660a0830152600481015460c0830152600581015460e083015260068101549282019290925260078201546101208201526008820154610140820152600990910154610160820152835184908390811061397d5761397d6156e6565b60200260200101819052508080613993906157a7565b91505061385e565b5050919050565b6001546001600160a01b031633146139cd576040516305e7700560e51b815260040160405180910390fd5b6001600160a01b0382166139f45760405163604b48b960e11b815260040160405180910390fd5b6001600160a01b038216301415613a1e576040516306b3e95d60e21b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b03841617905580613a7c576001546040516001600160a01b038085169216907fc606c9af1451cadeb333f6ff7b24a5540974f4e800bac274fa7fff9edc305cb190600090a35050565b6119fb82614d01565b600080613a9183610a8b565b905060008054906101000a90046001600160a01b03166001600160a01b0316634433c5e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b089190615713565b811015613b995760008054906101000a90046001600160a01b03166001600160a01b031663d876d98e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b849190615713565b811015613b92576000610b66565b6001610b66565b60029392505050565b60048181548110613bb257600080fd5b60009182526020909120600a9091020180546001820154600283015460038401546004850154600586015460068701546007880154600889015460099099015497995060ff808816996101009098046001600160a01b039081169981891699600160a01b90990490921697961695908c565b600454829081101580613c5e575060048181548110613c4557613c456156e6565b600091825260209091206001600a90920201015460ff16155b15613c7f576040516372c4e6fd60e01b8152600481018290526024016108ff565b826002613c8b82613a85565b6002811115613c9c57613c9c61567a565b1415613cbe57604051633d240fc360e01b8152600481018290526024016108ff565b613cfc33308560048881548110613cd757613cd76156e6565b600091825260209091206002600a9092020101546001600160a01b03169291906146e1565b613d068484614e86565b50505050565b60056020528160005260406000208181548110613d2857600080fd5b90600052602060002001600091509150505481565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613da29190615784565b613dad9060126158cb565b613db890600a6159d2565b905080600114613dd457613dcc81846158a9565b9150506114cd565b509092915050565b6040516001600160a01b03831660248201526044810182905261207990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152615054565b613e5c615305565b610100840151613e7f576040516379d1504360e01b815260040160405180910390fd5b60008054906101000a90046001600160a01b03166001600160a01b0316630b68a5806040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ef49190615713565b8461010001511015613f1957604051631efe3f1960e11b815260040160405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b0316634c4e61e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f91919061539a565b60e08601516040516340c10f1960e01b815230600482015260248101919091529091506001600160a01b038216906340c10f1990604401600060405180830381600087803b158015613fe257600080fd5b505af1158015613ff6573d6000803e3d6000fd5b50505050806001600160a01b03166340c10f1960008054906101000a90046001600160a01b03166001600160a01b0316634c12d4716040518163ffffffff1660e01b8152600401602060405180830381865afa15801561405a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061407e919061539a565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b1580156140c657600080fd5b505af11580156140da573d6000803e3d6000fd5b50505050806001600160a01b03166340c10f1960008054906101000a90046001600160a01b03166001600160a01b0316638a2381d76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561413e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614162919061539a565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b1580156141aa57600080fd5b505af11580156141be573d6000803e3d6000fd5b5050505060408581015161010087015191516340c10f1960e01b81526001600160a01b03918216600482015260248101929092528216906340c10f1990604401600060405180830381600087803b15801561421857600080fd5b505af115801561422c573d6000803e3d6000fd5b505060048054808952600054604080516361c97bb360e11b815290519295506001600160a01b03909116935063c392f76692818101926020929091908290030181865afa158015614281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a59190615713565b8660c001818152505060048690806001815401808255809150506001900390600052602060002090600a02016000909190919091506000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160020160146101000a81548160ff02191690831515021790555060a08201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c0820151816004015560e08201518160050155610100820151816006015561012082015181600701556101408201518160080155610160820151816009015550506005600087604001516001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150558561014001516006600088606001516001600160a01b03166001600160a01b03168152602001908152602001600020600901600082825461447e91906156ce565b90915550506060808701516040808901516101008a01516101408b01516001600160a01b0394851660008181526006602081815291879020015486519485529084019290925293820152919392169184917f1c719a9a8ef2d44db7255e8d65b4a18a23f44758d6ebc0d6b80fe018d25433fb910160405180910390a45093949350505050565b60008161010001516000141561451c57506000919050565b61014082015161452f5750600019919050565b6114cd61453b8361455a565b61454484614af2565b84610100015161455491906156ce565b906147d6565b60a08101516060820151604051630787c49960e21b81526001600160a01b03918216600482015260009283921690631e1f126490602401602060405180830381865afa1580156145ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d29190615713565b610140840151909150610b66908261485b565b6145ed615305565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000928392839283929190911690631e1f126490602401602060405180830381865afa158015614645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146699190615713565b905060006146888860c00151896040015161485b90919063ffffffff16565b905060006146c26146a1670de0b6b3a7640000846156ce565b614554856146bc8d60c001518d61485b90919063ffffffff16565b9061485b565b90506146ce8982614b34565b929c919b50995090975095505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052613d069085906323b872dd60e01b90608401613e08565b60008161012001516000141561473157506000919050565b60208201518251604051630787c49960e21b81526001600160a01b0391821660048201526000929190911690631e1f126490602401602060405180830381865afa158015614783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a79190615713565b610120840151909150610b66908261485b565b6000808212156147d2576147cd826159e1565b6114cd565b5090565b6000610b6683670de0b6b3a7640000846150de565b6001600160a01b038116600090815260018301602052604081205415614813575060006114cd565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106148ad5760405163072fa3c960e31b815260048101829052670de0b6b3a764000060248201526044016108ff565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826148e75780670de0b6b3a76400008504019450505050506114cd565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b614933615305565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000928392839283929190911690631e1f126490602401602060405180830381865afa15801561498b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149af9190615713565b905060006149ce826146bc8a60c001518a61485b90919063ffffffff16565b60c08901519091506000906149f9906145546149f282670de0b6b3a76400006156fc565b859061485b565b90506000614a148a606001518361485b90919063ffffffff16565b9050614a2d8a608001518361485b90919063ffffffff16565b9650614a468a60a001518361485b90919063ffffffff16565b9550614a6384614554858d6040015161485b90919063ffffffff16565b945060405180610180016040528060008152602001600115158152602001336001600160a01b031681526020018b600001516001600160a01b031681526020016000151581526020018b602001516001600160a01b0316815260200160008152602001828152602001848152602001600081526020018a81526020014281525097505050505092959194509250565b60006114cd614b20670de0b6b3a76400006301e187e085610160015142614b1991906156fc565b91906150de565b60c08401516101008501516146bc9161485b565b614b3c615305565b60208301518351604051630787c49960e21b81526001600160a01b0391821660048201526000928392839283929190911690631e1f126490602401602060405180830381865afa158015614b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bb89190615713565b60c0880151909150600090614be390614554614bdc82670de0b6b3a76400006156fc565b8a9061485b565b90506000614bfe89606001518361485b90919063ffffffff16565b9050614c1789608001518361485b90919063ffffffff16565b9550614c308960a001518361485b90919063ffffffff16565b94506000614c55614c4e858c60c0015161485b90919063ffffffff16565b8a906147d6565b9050614c72846145548b8d6040015161485b90919063ffffffff16565b945060405180610180016040528060008152602001600115158152602001336001600160a01b031681526020018b600001516001600160a01b031681526020016000151581526020018b602001516001600160a01b03168152602001600081526020018381526020018a8152602001600081526020018281526020014281525097505050505092959194509250565b600180546001600160a01b0319166001600160a01b03831690811790915560405181907f564590b81987d147246f63910a8e1ee4eb09c4d64cc75ee975a8ffedfcc2210e90600090a350565b6001600160a01b038116600090815260018301602052604081205480614d775760009150506114cd565b6000614d846001836156fc565b905060006001614d92875490565b614d9c91906156fc565b9050808214614e28576000866000018281548110614dbc57614dbc6156e6565b60009182526020909120015487546001600160a01b0390911691508190889085908110614deb57614deb6156e6565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018801909152604090208390555b8554869080614e3957614e396159fe565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260018881019091526040822091909155935050505092915050565b80614ea457604051635491c16d60e01b815260040160405180910390fd5b600060048381548110614eb957614eb96156e6565b90600052602060002090600a02019050614ed281614f78565b6002810154600090614eed906001600160a01b03168461519a565b905080826008016000828254614f0391906156ce565b90915550504260098084019190915560028301546001600160a01b031660009081526006602052604081209091018054839290614f419084906156ce565b909155505060405181815284907fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c5590602001611201565b604080516101808101825282548152600183015460ff808216151560208401526001600160a01b036101009283900481169484019490945260028501548085166060850152600160a01b90041615156080830152600384015490921660a0820152600483015460c0820152600583015460e082015260068301549181019190915260078201546101208201526008820154610140820152600982015461016082015261502390614af2565b81600701600082825461503691906156ce565b909155505050565b600081831061504d5781610b66565b5090919050565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649082015282906000906150a3906001600160a01b038416908590615229565b805190915015613d0657808060200190518101906150c19190615a14565b613d0657604051639b8d506160e01b815260040160405180910390fd5b600080806000198587098587029250828110838203039150508381106151215760405163072fa3c960e31b815260048101829052602481018590526044016108ff565b8061513157508290049050610b66565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156151db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151ff9190615784565b61520a9060126158cb565b61521590600a6159d2565b905080600114613dd457613dcc818461588a565b6060833b6152555760405163dc5dd7fd60e01b81526001600160a01b03851660048201526024016108ff565b600080856001600160a01b0316856040516152709190615a5d565b6000604051808303816000865af19150503d80600081146152ad576040519150601f19603f3d011682016040523d82523d6000602084013e6152b2565b606091505b50915091506152c28282866152cc565b9695505050505050565b606083156152db575081610b66565b8251156152eb5782518060208501fd5b8160405162461bcd60e51b81526004016108ff9190615a79565b6040518061018001604052806000815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114612bef57600080fd5b6000602082840312156153ac57600080fd5b8151610b6681615385565b6000602082840312156153c957600080fd5b5035919050565b8051825260208101516153e7602084018215159052565b50604081015161540260408401826001600160a01b03169052565b50606081015161541d60608401826001600160a01b03169052565b506080810151615431608084018215159052565b5060a081015161544c60a08401826001600160a01b03169052565b5060c0818101519083015260e0808201519083015261010080820151908301526101208082015190830152610140808201519083015261016090810151910152565b61018081016114cd82846153d0565b600080604083850312156154b057600080fd5b82356154bb81615385565b946020939093013593505050565b6101e081016154d882876153d0565b84610180830152836101a0830152826101c083015295945050505050565b60006020828403121561550857600080fd5b8135610b6681615385565b602080825282518282018190526000919060409081850190868401855b828110156155b557815180516001600160a01b0390811686528782015116878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e08082015190860152610100808201519086015261012090810151908501526101409093019290850190600101615530565b5091979650505050505050565b600080604083850312156155d557600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015615627576156138385516153d0565b928401926101809290920191600101615600565b50909695505050505050565b8015158114612bef57600080fd5b6000806040838503121561565457600080fd5b823561565f81615385565b9150602083013561566f81615633565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106156b257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052601160045260246000fd5b600082198211156156e1576156e16156b8565b500190565b634e487b7160e01b600052603260045260246000fd5b60008282101561570e5761570e6156b8565b500390565b60006020828403121561572557600080fd5b5051919050565b60008083128015600160ff1b85018412161561574a5761574a6156b8565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561577e5761577e6156b8565b50500390565b60006020828403121561579657600080fd5b815160ff81168114610b6657600080fd5b60006000198214156157bb576157bb6156b8565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156157eb57600080fd5b825167ffffffffffffffff8082111561580357600080fd5b818501915085601f83011261581757600080fd5b815181811115615829576158296157c2565b8060051b604051601f19603f8301168101818110858211171561584e5761584e6157c2565b60405291825284820192508381018501918883111561586c57600080fd5b938501935b8285101561134157845184529385019392850192615871565b60008160001904831182151516156158a4576158a46156b8565b500290565b6000826158c657634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff8416808210156158e5576158e56156b8565b90039392505050565b600181815b8085111561592957816000190482111561590f5761590f6156b8565b8085161561591c57918102915b93841c93908002906158f3565b509250929050565b600082615940575060016114cd565b8161594d575060006114cd565b8160018114615963576002811461596d57615989565b60019150506114cd565b60ff84111561597e5761597e6156b8565b50506001821b6114cd565b5060208310610133831016604e8410600b84101617156159ac575081810a6114cd565b6159b683836158ee565b80600019048211156159ca576159ca6156b8565b029392505050565b6000610b6660ff841683615931565b6000600160ff1b8214156159f7576159f76156b8565b5060000390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615a2657600080fd5b8151610b6681615633565b60005b83811015615a4c578181015183820152602001615a34565b83811115613d065750506000910152565b60008251615a6f818460208701615a31565b9190910192915050565b6020815260008251806020840152615a98816040850160208701615a31565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "author": "BaksDAO",
    "errors": {
      "BaksDAOBorrowBelowMinimumPrincipalAmount()": [
        {
          "details": "Thrown when trying to borrow below minimum principal amount."
        }
      ],
      "BaksDAOBorrowZeroAmount()": [
        {
          "details": "Thrown when borrowing a zero amount of stablecoin."
        }
      ],
      "BaksDAOCollateralTokenAlreadyListed(address)": [
        {
          "details": "Thrown when trying to list collateral token that's already listed.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOCollateralTokenNotListed(address)": [
        {
          "details": "Thrown when trying to unlist collateral token that's not listed.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOCollateralTokenTooLargeDecimals(address,uint8)": [
        {
          "details": "Thrown when trying to list collateral token that has too large decimals.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOCollateralTokenZeroDecimals(address)": [
        {
          "details": "Thrown when trying to list collateral token that has zero decimals.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAODepositZeroAmount()": [
        {
          "details": "Thrown when depositing a zero amount of collateral token."
        }
      ],
      "BaksDAOInactiveLoan(uint256)": [
        {
          "details": "Thrown when trying to interact with inactive loan with `id` id.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAOInitialLoanToValueRatioTooHigh(address,uint256)": [
        {
          "details": "Thrown when trying to set initial loan-to-value ratio that higher than margin call or liquidation ones.",
          "params": {
            "initialLoanToValueRatio": "The initial loan-to-value ratio that was tried to set.",
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOLoanIsSubjectToLiquidation(uint256)": [
        {
          "details": "Thrown when trying to interact with loan with `id` id that is subject to liquidation.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAOLoanNotSubjectToLiquidation(uint256)": [
        {
          "details": "Thrown when trying to liquidate healthy loan with `id` id.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAONativeCurrencyCollateralNotAllowed(uint256)": [
        {
          "details": "Thrown when trying to deposit native currency collateral to the non-wrapped native currency token loan with `id` id.",
          "params": {
            "id": "The loan id."
          }
        }
      ],
      "BaksDAONoNeedToRebalance()": [
        {
          "details": "Thrown when there's no need to rebalance the platform."
        }
      ],
      "BaksDAORepayZeroAmount()": [
        {
          "details": "Thrown when repaying a zero amount of stablecoin."
        }
      ],
      "BaksDAOStabilizationFundOutOfFunds(uint256)": [
        {
          "details": "Thrown when trying to rebalance the platform and there is a shortage of funds to burn.",
          "params": {
            "shortage": "Shoratge of funds to burn."
          }
        }
      ],
      "BaksDAOTokenNotAllowedAsCollateral(address)": [
        {
          "details": "Thrown when interacting with a token that's not allowed as collateral.",
          "params": {
            "token": "The address of the collateral token contract."
          }
        }
      ],
      "BaksDAOTokenNotAllowedToBeSalvaged(address)": [
        {
          "details": "Thrown when trying to salvage one of allowed collateral tokens or stablecoin.",
          "params": {
            "token": "The address of the token contract."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "borrow(address,uint256)": {
        "details": "The caller must have allowed this contract to spend a sufficient amount of collateral tokens to cover initial loan-to-value ratio.",
        "params": {
          "amount": "The amount of stablecoin to borrow and issue.",
          "collateralToken": "The address of the collateral token contract."
        }
      },
      "deposit(uint256,uint256)": {
        "details": "The caller must have allowed this contract to spend `amount` of collateral tokens.",
        "params": {
          "amount": "The amount of collateral token to deposit.",
          "loanId": "The loan id."
        }
      },
      "repay(uint256,uint256)": {
        "params": {
          "amount": "The amount of stablecoin to repay.",
          "loanId": "The loan id."
        }
      }
    },
    "title": "Core smart contract of BaksDAO platform",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(address,uint256)": {
        "notice": "Increases loan's principal on `collateralToken` collateral token and mints `amount` of stablecoin."
      },
      "borrowInNativeCurrency(uint256)": {
        "notice": "Increases loan's principal on wrapped native currency token and mints stablecoin."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposits `amount` of collateral token to loan with `id` id."
      },
      "depositInNativeCurrency(uint256)": {
        "notice": "Deposits wrapped native currency token to loan with `id` id."
      },
      "repay(uint256,uint256)": {
        "notice": "Decreases principal of loan with `id` id by `amount` of stablecoin."
      }
    },
    "notice": "You should use this contract to interact with the BaksDAO platform.Only this contract can issue BAKS and BDV tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4140,
        "contract": "contracts/Bank.sol:Bank",
        "label": "core",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICore)3413"
      },
      {
        "astId": 7519,
        "contract": "contracts/Bank.sol:Bank",
        "label": "governor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7521,
        "contract": "contracts/Bank.sol:Bank",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11360,
        "contract": "contracts/Bank.sol:Bank",
        "label": "initializing",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 11362,
        "contract": "contracts/Bank.sol:Bank",
        "label": "initialized",
        "offset": 21,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 11078,
        "contract": "contracts/Bank.sol:Bank",
        "label": "status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 204,
        "contract": "contracts/Bank.sol:Bank",
        "label": "loans",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Data)10352_storage)dyn_storage"
      },
      {
        "astId": 209,
        "contract": "contracts/Bank.sol:Bank",
        "label": "loanIds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 215,
        "contract": "contracts/Bank.sol:Bank",
        "label": "collateralTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_contract(IERC20)7757,t_struct(Data)8332_storage)"
      },
      {
        "astId": 218,
        "contract": "contracts/Bank.sol:Bank",
        "label": "collateralTokensSet",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Set)8695_storage"
      },
      {
        "astId": 220,
        "contract": "contracts/Bank.sol:Bank",
        "label": "nextVoiceMintingStage",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Data)10352_storage)dyn_storage": {
        "base": "t_struct(Data)10352_storage",
        "encoding": "dynamic_array",
        "label": "struct Loan.Data[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)3413": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)7757": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)7878": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)7757,t_struct(Data)8332_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)7757",
        "label": "mapping(contract IERC20 => struct CollateralToken.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)8332_storage"
      },
      "t_struct(Data)10352_storage": {
        "encoding": "inplace",
        "label": "struct Loan.Data",
        "members": [
          {
            "astId": 10327,
            "contract": "contracts/Bank.sol:Bank",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10329,
            "contract": "contracts/Bank.sol:Bank",
            "label": "isActive",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 10331,
            "contract": "contracts/Bank.sol:Bank",
            "label": "borrower",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10334,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)7757"
          },
          {
            "astId": 10336,
            "contract": "contracts/Bank.sol:Bank",
            "label": "isNativeCurrency",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 10339,
            "contract": "contracts/Bank.sol:Bank",
            "label": "priceOracle",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IPriceOracle)7878"
          },
          {
            "astId": 10341,
            "contract": "contracts/Bank.sol:Bank",
            "label": "interest",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10343,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilizationFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10345,
            "contract": "contracts/Bank.sol:Bank",
            "label": "principalAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 10347,
            "contract": "contracts/Bank.sol:Bank",
            "label": "interestAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 10349,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 10351,
            "contract": "contracts/Bank.sol:Bank",
            "label": "lastInteractionAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Data)8332_storage": {
        "encoding": "inplace",
        "label": "struct CollateralToken.Data",
        "members": [
          {
            "astId": 8312,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)7757"
          },
          {
            "astId": 8315,
            "contract": "contracts/Bank.sol:Bank",
            "label": "priceOracle",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPriceOracle)7878"
          },
          {
            "astId": 8317,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilityFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8319,
            "contract": "contracts/Bank.sol:Bank",
            "label": "stabilizationFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8321,
            "contract": "contracts/Bank.sol:Bank",
            "label": "exchangeFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8323,
            "contract": "contracts/Bank.sol:Bank",
            "label": "developmentFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8325,
            "contract": "contracts/Bank.sol:Bank",
            "label": "initialLoanToValueRatio",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8327,
            "contract": "contracts/Bank.sol:Bank",
            "label": "marginCallLoanToValueRatio",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8329,
            "contract": "contracts/Bank.sol:Bank",
            "label": "liquidationLoanToValueRatio",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8331,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Set)8695_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableAddressSet.Set",
        "members": [
          {
            "astId": 8690,
            "contract": "contracts/Bank.sol:Bank",
            "label": "elements",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 8694,
            "contract": "contracts/Bank.sol:Bank",
            "label": "indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}